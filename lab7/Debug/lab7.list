
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004808  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a58  08004a58  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a60  08004a60  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000497c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000498c  2000498c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6d6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021be  00000000  00000000  0002d716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  0002f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad0  00000000  00000000  00030490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023fe  00000000  00000000  00030f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdb3  00000000  00000000  0003335e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d841c  00000000  00000000  0003f111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011752d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f84  00000000  00000000  00117580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080049a0 	.word	0x080049a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080049a0 	.word	0x080049a0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 f9d6 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f860 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8be 	bl	8000680 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN | RCC_AHB1ENR_GPIOAEN;
 8000504:	4b23      	ldr	r3, [pc, #140]	; (8000594 <main+0xa0>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a22      	ldr	r2, [pc, #136]	; (8000594 <main+0xa0>)
 800050a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800050e:	6313      	str	r3, [r2, #48]	; 0x30

  GPIOG->MODER |= GPIO_MODER_MODE14_0;
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <main+0xa4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <main+0xa4>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051a:	6013      	str	r3, [r2, #0]
  GPIOG->MODER &= ~GPIO_MODER_MODE14_1;
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <main+0xa4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1d      	ldr	r2, [pc, #116]	; (8000598 <main+0xa4>)
 8000522:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000526:	6013      	str	r3, [r2, #0]

  GPIOG->MODER |= GPIO_MODER_MODE13_0;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <main+0xa4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <main+0xa4>)
 800052e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000532:	6013      	str	r3, [r2, #0]
  GPIOG->MODER &= ~GPIO_MODER_MODE13_1;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <main+0xa4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <main+0xa4>)
 800053a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800053e:	6013      	str	r3, [r2, #0]

  GPIOA->MODER &= ~GPIO_MODER_MODE0_1;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <main+0xa8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a15      	ldr	r2, [pc, #84]	; (800059c <main+0xa8>)
 8000546:	f023 0302 	bic.w	r3, r3, #2
 800054a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODE0_0;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <main+0xa8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a12      	ldr	r2, [pc, #72]	; (800059c <main+0xa8>)
 8000552:	f023 0301 	bic.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000558:	f000 ff56 	bl	8001408 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 800055c:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <main+0xac>)
 800055e:	2101      	movs	r1, #1
 8000560:	2001      	movs	r0, #1
 8000562:	f001 f848 	bl	80015f6 <osSemaphoreNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <main+0xb0>)
 800056a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <main+0xb4>)
 800056e:	2100      	movs	r1, #0
 8000570:	480e      	ldr	r0, [pc, #56]	; (80005ac <main+0xb8>)
 8000572:	f000 ff93 	bl	800149c <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <main+0xbc>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <main+0xc0>)
 800057e:	2100      	movs	r1, #0
 8000580:	480d      	ldr	r0, [pc, #52]	; (80005b8 <main+0xc4>)
 8000582:	f000 ff8b 	bl	800149c <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <main+0xc8>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f000 ff60 	bl	8001450 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x9c>
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800
 8000598:	40021800 	.word	0x40021800
 800059c:	40020000 	.word	0x40020000
 80005a0:	08004a38 	.word	0x08004a38
 80005a4:	20000034 	.word	0x20000034
 80005a8:	080049f0 	.word	0x080049f0
 80005ac:	080006d1 	.word	0x080006d1
 80005b0:	2000002c 	.word	0x2000002c
 80005b4:	08004a14 	.word	0x08004a14
 80005b8:	08000735 	.word	0x08000735
 80005bc:	20000030 	.word	0x20000030

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 f9de 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xb8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <SystemClock_Config+0xb8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <SystemClock_Config+0xb8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <SystemClock_Config+0xbc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <SystemClock_Config+0xbc>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <SystemClock_Config+0xbc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fa8f 	bl	8000b58 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000640:	f000 f8a0 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fcf2 	bl	8001048 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800066a:	f000 f88b 	bl	8000784 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_GPIO_Init+0x4c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <MX_GPIO_Init+0x4c>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_GPIO_Init+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    while ((GPIOA->IDR & 0x0001) == 0x0001)
 80006d8:	e01a      	b.n	8000710 <StartTask1+0x40>
	    {
	      if (osSemaphoreAcquire(myBinarySem01Handle, osWaitForever) == osOK){
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <StartTask1+0x58>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f04f 31ff 	mov.w	r1, #4294967295
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f810 	bl	8001708 <osSemaphoreAcquire>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d110      	bne.n	8000710 <StartTask1+0x40>
	    	  GPIOG->ODR &= ~GPIO_ODR_OD13;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <StartTask1+0x5c>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <StartTask1+0x5c>)
 80006f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006f8:	6153      	str	r3, [r2, #20]
	    	  GPIOG->ODR |= GPIO_ODR_OD14;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <StartTask1+0x5c>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <StartTask1+0x5c>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000704:	6153      	str	r3, [r2, #20]
	    	  osSemaphoreRelease(myBinarySem01Handle);
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <StartTask1+0x58>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f84e 	bl	80017ac <osSemaphoreRelease>
	    while ((GPIOA->IDR & 0x0001) == 0x0001)
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <StartTask1+0x60>)
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	2b01      	cmp	r3, #1
 800071a:	d0de      	beq.n	80006da <StartTask1+0xa>
	      	  }
	    }
	    osDelay(500);
 800071c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000720:	f000 ff4e 	bl	80015c0 <osDelay>
	    while ((GPIOA->IDR & 0x0001) == 0x0001)
 8000724:	e7f4      	b.n	8000710 <StartTask1+0x40>
 8000726:	bf00      	nop
 8000728:	20000034 	.word	0x20000034
 800072c:	40021800 	.word	0x40021800
 8000730:	40020000 	.word	0x40020000

08000734 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(myBinarySem01Handle, osWaitForever) == osOK){
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <StartTask2+0x48>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f04f 31ff 	mov.w	r1, #4294967295
 8000744:	4618      	mov	r0, r3
 8000746:	f000 ffdf 	bl	8001708 <osSemaphoreAcquire>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d110      	bne.n	8000772 <StartTask2+0x3e>
		  GPIOG->ODR |= GPIO_ODR_OD13;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <StartTask2+0x4c>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <StartTask2+0x4c>)
 8000756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800075a:	6153      	str	r3, [r2, #20]
		  GPIOG->ODR &= ~GPIO_ODR_OD14;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <StartTask2+0x4c>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <StartTask2+0x4c>)
 8000762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000766:	6153      	str	r3, [r2, #20]
		  osSemaphoreRelease(myBinarySem01Handle);
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <StartTask2+0x48>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f81d 	bl	80017ac <osSemaphoreRelease>
    }

    osDelay(20);
 8000772:	2014      	movs	r0, #20
 8000774:	f000 ff24 	bl	80015c0 <osDelay>
	  if (osSemaphoreAcquire(myBinarySem01Handle, osWaitForever) == osOK){
 8000778:	e7e0      	b.n	800073c <StartTask2+0x8>
 800077a:	bf00      	nop
 800077c:	20000034 	.word	0x20000034
 8000780:	40021800 	.word	0x40021800

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_MspInit+0x54>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <HAL_MspInit+0x54>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_MspInit+0x54>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <HAL_MspInit+0x54>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <HAL_MspInit+0x54>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_MspInit+0x54>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	210f      	movs	r1, #15
 80007d2:	f06f 0001 	mvn.w	r0, #1
 80007d6:	f000 f996 	bl	8000b06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000818:	f000 f898 	bl	800094c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800081c:	f002 ff1e 	bl	800365c <xTaskGetSchedulerState>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d001      	beq.n	800082a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000826:	f003 fe07 	bl	8004438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800088c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800085a:	490e      	ldr	r1, [pc, #56]	; (8000894 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000870:	4c0b      	ldr	r4, [pc, #44]	; (80008a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800087e:	f7ff ffd7 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000882:	f004 f853 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000886:	f7ff fe35 	bl	80004f4 <main>
  bx  lr    
 800088a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800088c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000898:	08004a68 	.word	0x08004a68
  ldr r2, =_sbss
 800089c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008a0:	2000498c 	.word	0x2000498c

080008a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <HAL_Init+0x40>)
 80008b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_Init+0x40>)
 80008be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_Init+0x40>)
 80008ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 f90d 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d6:	200f      	movs	r0, #15
 80008d8:	f000 f808 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008dc:	f7ff ff58 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023c00 	.word	0x40023c00

080008ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x54>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_InitTick+0x58>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	fbb3 f3f1 	udiv	r3, r3, r1
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f917 	bl	8000b3e <HAL_SYSTICK_Config>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e00e      	b.n	8000938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b0f      	cmp	r3, #15
 800091e:	d80a      	bhi.n	8000936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f000 f8ed 	bl	8000b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <HAL_InitTick+0x5c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	e000      	b.n	8000938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000
 8000944:	20000008 	.word	0x20000008
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x20>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_IncTick+0x24>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_IncTick+0x24>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	20000038 	.word	0x20000038

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000038 	.word	0x20000038

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	210f      	movs	r1, #15
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f7ff ff8e 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff47 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff5c 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff8e 	bl	8000a44 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffb0 	bl	8000aac <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e267      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d075      	beq.n	8000c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b76:	4b88      	ldr	r3, [pc, #544]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d00c      	beq.n	8000b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b82:	4b85      	ldr	r3, [pc, #532]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b8a:	2b08      	cmp	r3, #8
 8000b8c:	d112      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b8e:	4b82      	ldr	r3, [pc, #520]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b9a:	d10b      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9c:	4b7e      	ldr	r3, [pc, #504]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d05b      	beq.n	8000c60 <HAL_RCC_OscConfig+0x108>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d157      	bne.n	8000c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e242      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bbc:	d106      	bne.n	8000bcc <HAL_RCC_OscConfig+0x74>
 8000bbe:	4b76      	ldr	r3, [pc, #472]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a75      	ldr	r2, [pc, #468]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e01d      	b.n	8000c08 <HAL_RCC_OscConfig+0xb0>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd4:	d10c      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x98>
 8000bd6:	4b70      	ldr	r3, [pc, #448]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a6f      	ldr	r2, [pc, #444]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	4b6d      	ldr	r3, [pc, #436]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a6c      	ldr	r2, [pc, #432]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e00b      	b.n	8000c08 <HAL_RCC_OscConfig+0xb0>
 8000bf0:	4b69      	ldr	r3, [pc, #420]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a68      	ldr	r2, [pc, #416]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b66      	ldr	r3, [pc, #408]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a65      	ldr	r2, [pc, #404]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d013      	beq.n	8000c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff feb0 	bl	8000974 <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c18:	f7ff feac 	bl	8000974 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b64      	cmp	r3, #100	; 0x64
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e207      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2a:	4b5b      	ldr	r3, [pc, #364]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f0      	beq.n	8000c18 <HAL_RCC_OscConfig+0xc0>
 8000c36:	e014      	b.n	8000c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fe9c 	bl	8000974 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff fe98 	bl	8000974 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e1f3      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c52:	4b51      	ldr	r3, [pc, #324]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0xe8>
 8000c5e:	e000      	b.n	8000c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d063      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00b      	beq.n	8000c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c7a:	4b47      	ldr	r3, [pc, #284]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d11c      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c86:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d116      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c92:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d005      	beq.n	8000caa <HAL_RCC_OscConfig+0x152>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d001      	beq.n	8000caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e1c7      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4937      	ldr	r1, [pc, #220]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cbe:	e03a      	b.n	8000d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d020      	beq.n	8000d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc8:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <HAL_RCC_OscConfig+0x244>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cce:	f7ff fe51 	bl	8000974 <HAL_GetTick>
 8000cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd6:	f7ff fe4d 	bl	8000974 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e1a8      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0f0      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4925      	ldr	r1, [pc, #148]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	600b      	str	r3, [r1, #0]
 8000d08:	e015      	b.n	8000d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d0a:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_RCC_OscConfig+0x244>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d10:	f7ff fe30 	bl	8000974 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fe2c 	bl	8000974 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e187      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d036      	beq.n	8000db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d016      	beq.n	8000d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_RCC_OscConfig+0x248>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d50:	f7ff fe10 	bl	8000974 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d58:	f7ff fe0c 	bl	8000974 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e167      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f0      	beq.n	8000d58 <HAL_RCC_OscConfig+0x200>
 8000d76:	e01b      	b.n	8000db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_RCC_OscConfig+0x248>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fdf9 	bl	8000974 <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d84:	e00e      	b.n	8000da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d86:	f7ff fdf5 	bl	8000974 <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d907      	bls.n	8000da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e150      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	42470000 	.word	0x42470000
 8000da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	4b88      	ldr	r3, [pc, #544]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1ea      	bne.n	8000d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 8097 	beq.w	8000eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc2:	4b81      	ldr	r3, [pc, #516]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10f      	bne.n	8000dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b7d      	ldr	r3, [pc, #500]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a7c      	ldr	r2, [pc, #496]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b7a      	ldr	r3, [pc, #488]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dea:	2301      	movs	r3, #1
 8000dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dee:	4b77      	ldr	r3, [pc, #476]	; (8000fcc <HAL_RCC_OscConfig+0x474>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d118      	bne.n	8000e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dfa:	4b74      	ldr	r3, [pc, #464]	; (8000fcc <HAL_RCC_OscConfig+0x474>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a73      	ldr	r2, [pc, #460]	; (8000fcc <HAL_RCC_OscConfig+0x474>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fdb5 	bl	8000974 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0e:	f7ff fdb1 	bl	8000974 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e10c      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e20:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <HAL_RCC_OscConfig+0x474>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <HAL_RCC_OscConfig+0x2ea>
 8000e34:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e38:	4a63      	ldr	r2, [pc, #396]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e40:	e01c      	b.n	8000e7c <HAL_RCC_OscConfig+0x324>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x30c>
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e4e:	4a5e      	ldr	r2, [pc, #376]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6713      	str	r3, [r2, #112]	; 0x70
 8000e56:	4b5c      	ldr	r3, [pc, #368]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5a:	4a5b      	ldr	r2, [pc, #364]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6713      	str	r3, [r2, #112]	; 0x70
 8000e62:	e00b      	b.n	8000e7c <HAL_RCC_OscConfig+0x324>
 8000e64:	4b58      	ldr	r3, [pc, #352]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e68:	4a57      	ldr	r2, [pc, #348]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e70:	4b55      	ldr	r3, [pc, #340]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e74:	4a54      	ldr	r2, [pc, #336]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e76:	f023 0304 	bic.w	r3, r3, #4
 8000e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d015      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e84:	f7ff fd76 	bl	8000974 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e8a:	e00a      	b.n	8000ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fd72 	bl	8000974 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e0cb      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0ee      	beq.n	8000e8c <HAL_RCC_OscConfig+0x334>
 8000eae:	e014      	b.n	8000eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fd60 	bl	8000974 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb6:	e00a      	b.n	8000ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fd5c 	bl	8000974 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e0b5      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ece:	4b3e      	ldr	r3, [pc, #248]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1ee      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d105      	bne.n	8000eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80a1 	beq.w	8001038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ef6:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d05c      	beq.n	8000fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d141      	bne.n	8000f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_RCC_OscConfig+0x478>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fd30 	bl	8000974 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f18:	f7ff fd2c 	bl	8000974 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e087      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69da      	ldr	r2, [r3, #28]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	019b      	lsls	r3, r3, #6
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	085b      	lsrs	r3, r3, #1
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	061b      	lsls	r3, r3, #24
 8000f5a:	491b      	ldr	r1, [pc, #108]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_RCC_OscConfig+0x478>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fd05 	bl	8000974 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f6e:	f7ff fd01 	bl	8000974 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e05c      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x416>
 8000f8c:	e054      	b.n	8001038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_RCC_OscConfig+0x478>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fcee 	bl	8000974 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9c:	f7ff fcea 	bl	8000974 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e045      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x444>
 8000fba:	e03d      	b.n	8001038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d107      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e038      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000
 8000fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_RCC_OscConfig+0x4ec>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d028      	beq.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d121      	bne.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d11a      	bne.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001004:	4013      	ands	r3, r2
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800100a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800100c:	4293      	cmp	r3, r2
 800100e:	d111      	bne.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	3b01      	subs	r3, #1
 800101e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001020:	429a      	cmp	r2, r3
 8001022:	d107      	bne.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0cc      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800105c:	4b68      	ldr	r3, [pc, #416]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d90c      	bls.n	8001084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106a:	4b65      	ldr	r3, [pc, #404]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001072:	4b63      	ldr	r3, [pc, #396]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d001      	beq.n	8001084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0b8      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d020      	beq.n	80010d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800109c:	4b59      	ldr	r3, [pc, #356]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4a58      	ldr	r2, [pc, #352]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b4:	4b53      	ldr	r3, [pc, #332]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c0:	4b50      	ldr	r3, [pc, #320]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	494d      	ldr	r1, [pc, #308]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d044      	beq.n	8001168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d107      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d119      	bne.n	8001126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e07f      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d003      	beq.n	8001106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001102:	2b03      	cmp	r3, #3
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001106:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e06f      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e067      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f023 0203 	bic.w	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4934      	ldr	r1, [pc, #208]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	4313      	orrs	r3, r2
 8001136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001138:	f7ff fc1c 	bl	8000974 <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	e00a      	b.n	8001156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001140:	f7ff fc18 	bl	8000974 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	f241 3288 	movw	r2, #5000	; 0x1388
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e04f      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 020c 	and.w	r2, r3, #12
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	429a      	cmp	r2, r3
 8001166:	d1eb      	bne.n	8001140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d20c      	bcs.n	8001190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e032      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	4916      	ldr	r1, [pc, #88]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d009      	beq.n	80011ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	490e      	ldr	r1, [pc, #56]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ce:	f000 f821 	bl	8001214 <HAL_RCC_GetSysClockFreq>
 80011d2:	4602      	mov	r2, r0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	490a      	ldr	r1, [pc, #40]	; (8001208 <HAL_RCC_ClockConfig+0x1c0>)
 80011e0:	5ccb      	ldrb	r3, [r1, r3]
 80011e2:	fa22 f303 	lsr.w	r3, r2, r3
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_RCC_ClockConfig+0x1c8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fb7c 	bl	80008ec <HAL_InitTick>

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00
 8001204:	40023800 	.word	0x40023800
 8001208:	08004a48 	.word	0x08004a48
 800120c:	20000000 	.word	0x20000000
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001218:	b090      	sub	sp, #64	; 0x40
 800121a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800122c:	4b59      	ldr	r3, [pc, #356]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b08      	cmp	r3, #8
 8001236:	d00d      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0x40>
 8001238:	2b08      	cmp	r3, #8
 800123a:	f200 80a1 	bhi.w	8001380 <HAL_RCC_GetSysClockFreq+0x16c>
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0x34>
 8001242:	2b04      	cmp	r3, #4
 8001244:	d003      	beq.n	800124e <HAL_RCC_GetSysClockFreq+0x3a>
 8001246:	e09b      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001248:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_GetSysClockFreq+0x184>)
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800124c:	e09b      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800124e:	4b53      	ldr	r3, [pc, #332]	; (800139c <HAL_RCC_GetSysClockFreq+0x188>)
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001252:	e098      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001254:	4b4f      	ldr	r3, [pc, #316]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d028      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126a:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	099b      	lsrs	r3, r3, #6
 8001270:	2200      	movs	r2, #0
 8001272:	623b      	str	r3, [r7, #32]
 8001274:	627a      	str	r2, [r7, #36]	; 0x24
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800127c:	2100      	movs	r1, #0
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_RCC_GetSysClockFreq+0x188>)
 8001280:	fb03 f201 	mul.w	r2, r3, r1
 8001284:	2300      	movs	r3, #0
 8001286:	fb00 f303 	mul.w	r3, r0, r3
 800128a:	4413      	add	r3, r2
 800128c:	4a43      	ldr	r2, [pc, #268]	; (800139c <HAL_RCC_GetSysClockFreq+0x188>)
 800128e:	fba0 1202 	umull	r1, r2, r0, r2
 8001292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001294:	460a      	mov	r2, r1
 8001296:	62ba      	str	r2, [r7, #40]	; 0x28
 8001298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800129a:	4413      	add	r3, r2
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a0:	2200      	movs	r2, #0
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	61fa      	str	r2, [r7, #28]
 80012a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ae:	f7fe ff9f 	bl	80001f0 <__aeabi_uldivmod>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4613      	mov	r3, r2
 80012b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ba:	e053      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	099b      	lsrs	r3, r3, #6
 80012c2:	2200      	movs	r2, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	617a      	str	r2, [r7, #20]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80012ce:	f04f 0b00 	mov.w	fp, #0
 80012d2:	4652      	mov	r2, sl
 80012d4:	465b      	mov	r3, fp
 80012d6:	f04f 0000 	mov.w	r0, #0
 80012da:	f04f 0100 	mov.w	r1, #0
 80012de:	0159      	lsls	r1, r3, #5
 80012e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012e4:	0150      	lsls	r0, r2, #5
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ebb2 080a 	subs.w	r8, r2, sl
 80012ee:	eb63 090b 	sbc.w	r9, r3, fp
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001302:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001306:	ebb2 0408 	subs.w	r4, r2, r8
 800130a:	eb63 0509 	sbc.w	r5, r3, r9
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	00eb      	lsls	r3, r5, #3
 8001318:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800131c:	00e2      	lsls	r2, r4, #3
 800131e:	4614      	mov	r4, r2
 8001320:	461d      	mov	r5, r3
 8001322:	eb14 030a 	adds.w	r3, r4, sl
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	eb45 030b 	adc.w	r3, r5, fp
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800133a:	4629      	mov	r1, r5
 800133c:	028b      	lsls	r3, r1, #10
 800133e:	4621      	mov	r1, r4
 8001340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001344:	4621      	mov	r1, r4
 8001346:	028a      	lsls	r2, r1, #10
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134e:	2200      	movs	r2, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	60fa      	str	r2, [r7, #12]
 8001354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001358:	f7fe ff4a 	bl	80001f0 <__aeabi_uldivmod>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4613      	mov	r3, r2
 8001362:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	0c1b      	lsrs	r3, r3, #16
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	3301      	adds	r3, #1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001378:	fbb2 f3f3 	udiv	r3, r2, r3
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800137e:	e002      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_RCC_GetSysClockFreq+0x184>)
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001388:	4618      	mov	r0, r3
 800138a:	3740      	adds	r7, #64	; 0x40
 800138c:	46bd      	mov	sp, r7
 800138e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	00f42400 	.word	0x00f42400
 800139c:	017d7840 	.word	0x017d7840

080013a0 <__NVIC_SetPriority>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80013f8:	2100      	movs	r1, #0
 80013fa:	f06f 0004 	mvn.w	r0, #4
 80013fe:	f7ff ffcf 	bl	80013a0 <__NVIC_SetPriority>
#endif
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800140e:	f3ef 8305 	mrs	r3, IPSR
 8001412:	603b      	str	r3, [r7, #0]
  return(result);
 8001414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800141a:	f06f 0305 	mvn.w	r3, #5
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	e00c      	b.n	800143c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <osKernelInitialize+0x44>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <osKernelInitialize+0x44>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	e002      	b.n	800143c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000003c 	.word	0x2000003c

08001450 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001456:	f3ef 8305 	mrs	r3, IPSR
 800145a:	603b      	str	r3, [r7, #0]
  return(result);
 800145c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001462:	f06f 0305 	mvn.w	r3, #5
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	e010      	b.n	800148c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <osKernelStart+0x48>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d109      	bne.n	8001486 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001472:	f7ff ffbf 	bl	80013f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <osKernelStart+0x48>)
 8001478:	2202      	movs	r2, #2
 800147a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800147c:	f001 fca6 	bl	8002dcc <vTaskStartScheduler>
      stat = osOK;
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	e002      	b.n	800148c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000003c 	.word	0x2000003c

0800149c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b08e      	sub	sp, #56	; 0x38
 80014a0:	af04      	add	r7, sp, #16
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014ac:	f3ef 8305 	mrs	r3, IPSR
 80014b0:	617b      	str	r3, [r7, #20]
  return(result);
 80014b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d17e      	bne.n	80015b6 <osThreadNew+0x11a>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d07b      	beq.n	80015b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80014c2:	2318      	movs	r3, #24
 80014c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d045      	beq.n	8001562 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <osThreadNew+0x48>
        name = attr->name;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <osThreadNew+0x6e>
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b38      	cmp	r3, #56	; 0x38
 80014fc:	d805      	bhi.n	800150a <osThreadNew+0x6e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <osThreadNew+0x72>
        return (NULL);
 800150a:	2300      	movs	r3, #0
 800150c:	e054      	b.n	80015b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00e      	beq.n	8001544 <osThreadNew+0xa8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b5b      	cmp	r3, #91	; 0x5b
 800152c:	d90a      	bls.n	8001544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <osThreadNew+0xa8>
        mem = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	e010      	b.n	8001566 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10c      	bne.n	8001566 <osThreadNew+0xca>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <osThreadNew+0xca>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <osThreadNew+0xca>
          mem = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	e001      	b.n	8001566 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d110      	bne.n	800158e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001574:	9202      	str	r2, [sp, #8]
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	6a3a      	ldr	r2, [r7, #32]
 8001580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f001 fa4c 	bl	8002a20 <xTaskCreateStatic>
 8001588:	4603      	mov	r3, r0
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	e013      	b.n	80015b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d110      	bne.n	80015b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f001 fa97 	bl	8002ada <xTaskCreate>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <osThreadNew+0x11a>
            hTask = NULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80015b6:	693b      	ldr	r3, [r7, #16]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015c8:	f3ef 8305 	mrs	r3, IPSR
 80015cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80015ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <osDelay+0x1c>
    stat = osErrorISR;
 80015d4:	f06f 0305 	mvn.w	r3, #5
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e007      	b.n	80015ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f001 fbbc 	bl	8002d64 <vTaskDelay>
    }
  }

  return (stat);
 80015ec:	68fb      	ldr	r3, [r7, #12]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b08a      	sub	sp, #40	; 0x28
 80015fa:	af02      	add	r7, sp, #8
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001606:	f3ef 8305 	mrs	r3, IPSR
 800160a:	613b      	str	r3, [r7, #16]
  return(result);
 800160c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800160e:	2b00      	cmp	r3, #0
 8001610:	d175      	bne.n	80016fe <osSemaphoreNew+0x108>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d072      	beq.n	80016fe <osSemaphoreNew+0x108>
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d86e      	bhi.n	80016fe <osSemaphoreNew+0x108>
    mem = -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d015      	beq.n	8001658 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <osSemaphoreNew+0x4c>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b4f      	cmp	r3, #79	; 0x4f
 800163a:	d902      	bls.n	8001642 <osSemaphoreNew+0x4c>
        mem = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	e00c      	b.n	800165c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d108      	bne.n	800165c <osSemaphoreNew+0x66>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d104      	bne.n	800165c <osSemaphoreNew+0x66>
          mem = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	e001      	b.n	800165c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001662:	d04c      	beq.n	80016fe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d128      	bne.n	80016bc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d10a      	bne.n	8001686 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2203      	movs	r2, #3
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2001      	movs	r0, #1
 800167e:	f000 fa29 	bl	8001ad4 <xQueueGenericCreateStatic>
 8001682:	61f8      	str	r0, [r7, #28]
 8001684:	e005      	b.n	8001692 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8001686:	2203      	movs	r2, #3
 8001688:	2100      	movs	r1, #0
 800168a:	2001      	movs	r0, #1
 800168c:	f000 fa9a 	bl	8001bc4 <xQueueGenericCreate>
 8001690:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d022      	beq.n	80016de <osSemaphoreNew+0xe8>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d01f      	beq.n	80016de <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800169e:	2300      	movs	r3, #0
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	69f8      	ldr	r0, [r7, #28]
 80016a6:	f000 fb55 	bl	8001d54 <xQueueGenericSend>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d016      	beq.n	80016de <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80016b0:	69f8      	ldr	r0, [r7, #28]
 80016b2:	f000 ffe1 	bl	8002678 <vQueueDelete>
            hSemaphore = NULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	e010      	b.n	80016de <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 fad7 	bl	8001c7e <xQueueCreateCountingSemaphoreStatic>
 80016d0:	61f8      	str	r0, [r7, #28]
 80016d2:	e004      	b.n	80016de <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 fb08 	bl	8001cec <xQueueCreateCountingSemaphore>
 80016dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00c      	beq.n	80016fe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e001      	b.n	80016f6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80016f6:	6979      	ldr	r1, [r7, #20]
 80016f8:	69f8      	ldr	r0, [r7, #28]
 80016fa:	f001 f909 	bl	8002910 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80016fe:	69fb      	ldr	r3, [r7, #28]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001720:	f06f 0303 	mvn.w	r3, #3
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e039      	b.n	800179c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001728:	f3ef 8305 	mrs	r3, IPSR
 800172c:	60fb      	str	r3, [r7, #12]
  return(result);
 800172e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8001730:	2b00      	cmp	r3, #0
 8001732:	d022      	beq.n	800177a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800173a:	f06f 0303 	mvn.w	r3, #3
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e02c      	b.n	800179c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	461a      	mov	r2, r3
 800174c:	2100      	movs	r1, #0
 800174e:	6938      	ldr	r0, [r7, #16]
 8001750:	f000 ff12 	bl	8002578 <xQueueReceiveFromISR>
 8001754:	4603      	mov	r3, r0
 8001756:	2b01      	cmp	r3, #1
 8001758:	d003      	beq.n	8001762 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800175a:	f06f 0302 	mvn.w	r3, #2
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e01c      	b.n	800179c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d019      	beq.n	800179c <osSemaphoreAcquire+0x94>
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <osSemaphoreAcquire+0xa0>)
 800176a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f3bf 8f4f 	dsb	sy
 8001774:	f3bf 8f6f 	isb	sy
 8001778:	e010      	b.n	800179c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	6938      	ldr	r0, [r7, #16]
 800177e:	f000 fdef 	bl	8002360 <xQueueSemaphoreTake>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	d009      	beq.n	800179c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800178e:	f06f 0301 	mvn.w	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e002      	b.n	800179c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8001796:	f06f 0302 	mvn.w	r3, #2
 800179a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800179c:	697b      	ldr	r3, [r7, #20]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000ed04 	.word	0xe000ed04

080017ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80017c2:	f06f 0303 	mvn.w	r3, #3
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e02c      	b.n	8001824 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017ca:	f3ef 8305 	mrs	r3, IPSR
 80017ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80017d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01a      	beq.n	800180c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4619      	mov	r1, r3
 80017e0:	6938      	ldr	r0, [r7, #16]
 80017e2:	f000 fc50 	bl	8002086 <xQueueGiveFromISR>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d003      	beq.n	80017f4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80017ec:	f06f 0302 	mvn.w	r3, #2
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e017      	b.n	8001824 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d014      	beq.n	8001824 <osSemaphoreRelease+0x78>
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <osSemaphoreRelease+0x84>)
 80017fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	f3bf 8f6f 	isb	sy
 800180a:	e00b      	b.n	8001824 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800180c:	2300      	movs	r3, #0
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	6938      	ldr	r0, [r7, #16]
 8001814:	f000 fa9e 	bl	8001d54 <xQueueGenericSend>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	d002      	beq.n	8001824 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800181e:	f06f 0302 	mvn.w	r3, #2
 8001822:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8001824:	697b      	ldr	r3, [r7, #20]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000ed04 	.word	0xe000ed04

08001834 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <vApplicationGetIdleTaskMemory+0x2c>)
 8001844:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <vApplicationGetIdleTaskMemory+0x30>)
 800184a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000040 	.word	0x20000040
 8001864:	2000009c 	.word	0x2000009c

08001868 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <vApplicationGetTimerTaskMemory+0x2c>)
 8001878:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <vApplicationGetTimerTaskMemory+0x30>)
 800187e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	2000029c 	.word	0x2000029c
 8001898:	200002f8 	.word	0x200002f8

0800189c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f103 0208 	add.w	r2, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f103 0208 	add.w	r2, r3, #8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f103 0208 	add.w	r2, r3, #8
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018f6:	b480      	push	{r7}
 80018f8:	b085      	sub	sp, #20
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d103      	bne.n	800195e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e00c      	b.n	8001978 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3308      	adds	r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e002      	b.n	800196c <vListInsert+0x2e>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	429a      	cmp	r2, r3
 8001976:	d2f6      	bcs.n	8001966 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6892      	ldr	r2, [r2, #8]
 80019c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6852      	ldr	r2, [r2, #4]
 80019d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d103      	bne.n	80019e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10a      	bne.n	8001a2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1c:	f383 8811 	msr	BASEPRI, r3
 8001a20:	f3bf 8f6f 	isb	sy
 8001a24:	f3bf 8f4f 	dsb	sy
 8001a28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a2a:	bf00      	nop
 8001a2c:	e7fe      	b.n	8001a2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001a2e:	f002 fc71 	bl	8004314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	441a      	add	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	441a      	add	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	22ff      	movs	r2, #255	; 0xff
 8001a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	22ff      	movs	r2, #255	; 0xff
 8001a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d114      	bne.n	8001aae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01a      	beq.n	8001ac2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3310      	adds	r3, #16
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fc25 	bl	80032e0 <xTaskRemoveFromEventList>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d012      	beq.n	8001ac2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <xQueueGenericReset+0xcc>)
 8001a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	f3bf 8f6f 	isb	sy
 8001aac:	e009      	b.n	8001ac2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3310      	adds	r3, #16
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fef2 	bl	800189c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3324      	adds	r3, #36	; 0x24
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff feed 	bl	800189c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001ac2:	f002 fc57 	bl	8004374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	e000ed04 	.word	0xe000ed04

08001ad4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	; 0x38
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10a      	bne.n	8001afe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aec:	f383 8811 	msr	BASEPRI, r3
 8001af0:	f3bf 8f6f 	isb	sy
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001afa:	bf00      	nop
 8001afc:	e7fe      	b.n	8001afc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10a      	bne.n	8001b1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b08:	f383 8811 	msr	BASEPRI, r3
 8001b0c:	f3bf 8f6f 	isb	sy
 8001b10:	f3bf 8f4f 	dsb	sy
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001b16:	bf00      	nop
 8001b18:	e7fe      	b.n	8001b18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <xQueueGenericCreateStatic+0x52>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <xQueueGenericCreateStatic+0x56>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <xQueueGenericCreateStatic+0x58>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10a      	bne.n	8001b46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b34:	f383 8811 	msr	BASEPRI, r3
 8001b38:	f3bf 8f6f 	isb	sy
 8001b3c:	f3bf 8f4f 	dsb	sy
 8001b40:	623b      	str	r3, [r7, #32]
}
 8001b42:	bf00      	nop
 8001b44:	e7fe      	b.n	8001b44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <xQueueGenericCreateStatic+0x7e>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <xQueueGenericCreateStatic+0x82>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <xQueueGenericCreateStatic+0x84>
 8001b56:	2300      	movs	r3, #0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10a      	bne.n	8001b72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b60:	f383 8811 	msr	BASEPRI, r3
 8001b64:	f3bf 8f6f 	isb	sy
 8001b68:	f3bf 8f4f 	dsb	sy
 8001b6c:	61fb      	str	r3, [r7, #28]
}
 8001b6e:	bf00      	nop
 8001b70:	e7fe      	b.n	8001b70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001b72:	2350      	movs	r3, #80	; 0x50
 8001b74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b50      	cmp	r3, #80	; 0x50
 8001b7a:	d00a      	beq.n	8001b92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b80:	f383 8811 	msr	BASEPRI, r3
 8001b84:	f3bf 8f6f 	isb	sy
 8001b88:	f3bf 8f4f 	dsb	sy
 8001b8c:	61bb      	str	r3, [r7, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	e7fe      	b.n	8001b90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001b92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00d      	beq.n	8001bba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ba6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f83f 	bl	8001c38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3730      	adds	r7, #48	; 0x30
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10a      	bne.n	8001bee <xQueueGenericCreate+0x2a>
	__asm volatile
 8001bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bdc:	f383 8811 	msr	BASEPRI, r3
 8001be0:	f3bf 8f6f 	isb	sy
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	613b      	str	r3, [r7, #16]
}
 8001bea:	bf00      	nop
 8001bec:	e7fe      	b.n	8001bec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	3350      	adds	r3, #80	; 0x50
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fcab 	bl	8004558 <pvPortMalloc>
 8001c02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d011      	beq.n	8001c2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3350      	adds	r3, #80	; 0x50
 8001c12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c1c:	79fa      	ldrb	r2, [r7, #7]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	4613      	mov	r3, r2
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f805 	bl	8001c38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
	}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d103      	bne.n	8001c54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e002      	b.n	8001c5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c66:	2101      	movs	r1, #1
 8001c68:	69b8      	ldr	r0, [r7, #24]
 8001c6a:	f7ff fecb 	bl	8001a04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b08a      	sub	sp, #40	; 0x28
 8001c82:	af02      	add	r7, sp, #8
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8001c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c94:	f383 8811 	msr	BASEPRI, r3
 8001c98:	f3bf 8f6f 	isb	sy
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	61bb      	str	r3, [r7, #24]
}
 8001ca2:	bf00      	nop
 8001ca4:	e7fe      	b.n	8001ca4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d90a      	bls.n	8001cc4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8001cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb2:	f383 8811 	msr	BASEPRI, r3
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	617b      	str	r3, [r7, #20]
}
 8001cc0:	bf00      	nop
 8001cc2:	e7fe      	b.n	8001cc2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7ff ff00 	bl	8001ad4 <xQueueGenericCreateStatic>
 8001cd4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
	}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10a      	bne.n	8001d12 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8001cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d00:	f383 8811 	msr	BASEPRI, r3
 8001d04:	f3bf 8f6f 	isb	sy
 8001d08:	f3bf 8f4f 	dsb	sy
 8001d0c:	613b      	str	r3, [r7, #16]
}
 8001d0e:	bf00      	nop
 8001d10:	e7fe      	b.n	8001d10 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d90a      	bls.n	8001d30 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8001d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	60fb      	str	r3, [r7, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	e7fe      	b.n	8001d2e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001d30:	2202      	movs	r2, #2
 8001d32:	2100      	movs	r1, #0
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff45 	bl	8001bc4 <xQueueGenericCreate>
 8001d3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001d48:	697b      	ldr	r3, [r7, #20]
	}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d62:	2300      	movs	r3, #0
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <xQueueGenericSend+0x32>
	__asm volatile
 8001d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001d82:	bf00      	nop
 8001d84:	e7fe      	b.n	8001d84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <xQueueGenericSend+0x40>
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <xQueueGenericSend+0x44>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <xQueueGenericSend+0x46>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10a      	bne.n	8001db4 <xQueueGenericSend+0x60>
	__asm volatile
 8001d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001db0:	bf00      	nop
 8001db2:	e7fe      	b.n	8001db2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d103      	bne.n	8001dc2 <xQueueGenericSend+0x6e>
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <xQueueGenericSend+0x72>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <xQueueGenericSend+0x74>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <xQueueGenericSend+0x8e>
	__asm volatile
 8001dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	623b      	str	r3, [r7, #32]
}
 8001dde:	bf00      	nop
 8001de0:	e7fe      	b.n	8001de0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001de2:	f001 fc3b 	bl	800365c <xTaskGetSchedulerState>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <xQueueGenericSend+0x9e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <xQueueGenericSend+0xa2>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <xQueueGenericSend+0xa4>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10a      	bne.n	8001e12 <xQueueGenericSend+0xbe>
	__asm volatile
 8001dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e00:	f383 8811 	msr	BASEPRI, r3
 8001e04:	f3bf 8f6f 	isb	sy
 8001e08:	f3bf 8f4f 	dsb	sy
 8001e0c:	61fb      	str	r3, [r7, #28]
}
 8001e0e:	bf00      	nop
 8001e10:	e7fe      	b.n	8001e10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e12:	f002 fa7f 	bl	8004314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d302      	bcc.n	8001e28 <xQueueGenericSend+0xd4>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d129      	bne.n	8001e7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e2e:	f000 fc5e 	bl	80026ee <prvCopyDataToQueue>
 8001e32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	3324      	adds	r3, #36	; 0x24
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 fa4d 	bl	80032e0 <xTaskRemoveFromEventList>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <xQueueGenericSend+0x1f8>)
 8001e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	e00a      	b.n	8001e74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <xQueueGenericSend+0x1f8>)
 8001e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e74:	f002 fa7e 	bl	8004374 <vPortExitCritical>
				return pdPASS;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e063      	b.n	8001f44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e82:	f002 fa77 	bl	8004374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e05c      	b.n	8001f44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fa87 	bl	80033a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e9e:	f002 fa69 	bl	8004374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ea2:	f000 fff9 	bl	8002e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ea6:	f002 fa35 	bl	8004314 <vPortEnterCritical>
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb6:	d103      	bne.n	8001ec0 <xQueueGenericSend+0x16c>
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d103      	bne.n	8001ed6 <xQueueGenericSend+0x182>
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ed6:	f002 fa4d 	bl	8004374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001eda:	1d3a      	adds	r2, r7, #4
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fa76 	bl	80033d4 <xTaskCheckForTimeOut>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d124      	bne.n	8001f38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ef0:	f000 fcf5 	bl	80028de <prvIsQueueFull>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d018      	beq.n	8001f2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efc:	3310      	adds	r3, #16
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f001 f99c 	bl	8003240 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f0a:	f000 fc80 	bl	800280e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f0e:	f000 ffd1 	bl	8002eb4 <xTaskResumeAll>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f47f af7c 	bne.w	8001e12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <xQueueGenericSend+0x1f8>)
 8001f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	e772      	b.n	8001e12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f2e:	f000 fc6e 	bl	800280e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f32:	f000 ffbf 	bl	8002eb4 <xTaskResumeAll>
 8001f36:	e76c      	b.n	8001e12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f3a:	f000 fc68 	bl	800280e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f3e:	f000 ffb9 	bl	8002eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3738      	adds	r7, #56	; 0x38
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b090      	sub	sp, #64	; 0x40
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f7a:	bf00      	nop
 8001f7c:	e7fe      	b.n	8001f7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d103      	bne.n	8001f8c <xQueueGenericSendFromISR+0x3c>
 8001f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <xQueueGenericSendFromISR+0x40>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <xQueueGenericSendFromISR+0x42>
 8001f90:	2300      	movs	r3, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10a      	bne.n	8001fac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9a:	f383 8811 	msr	BASEPRI, r3
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001fa8:	bf00      	nop
 8001faa:	e7fe      	b.n	8001faa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d103      	bne.n	8001fba <xQueueGenericSendFromISR+0x6a>
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <xQueueGenericSendFromISR+0x6e>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <xQueueGenericSendFromISR+0x70>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10a      	bne.n	8001fda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc8:	f383 8811 	msr	BASEPRI, r3
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	623b      	str	r3, [r7, #32]
}
 8001fd6:	bf00      	nop
 8001fd8:	e7fe      	b.n	8001fd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fda:	f002 fa7d 	bl	80044d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001fde:	f3ef 8211 	mrs	r2, BASEPRI
 8001fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe6:	f383 8811 	msr	BASEPRI, r3
 8001fea:	f3bf 8f6f 	isb	sy
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	61fa      	str	r2, [r7, #28]
 8001ff4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <xQueueGenericSendFromISR+0xbc>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d12f      	bne.n	800206c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002022:	f000 fb64 	bl	80026ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002026:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202e:	d112      	bne.n	8002056 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203a:	3324      	adds	r3, #36	; 0x24
 800203c:	4618      	mov	r0, r3
 800203e:	f001 f94f 	bl	80032e0 <xTaskRemoveFromEventList>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e007      	b.n	8002066 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800205a:	3301      	adds	r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	b25a      	sxtb	r2, r3
 8002060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002066:	2301      	movs	r3, #1
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800206a:	e001      	b.n	8002070 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002072:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800207a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800207c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800207e:	4618      	mov	r0, r3
 8002080:	3740      	adds	r7, #64	; 0x40
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b08e      	sub	sp, #56	; 0x38
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10a      	bne.n	80020b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800209a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209e:	f383 8811 	msr	BASEPRI, r3
 80020a2:	f3bf 8f6f 	isb	sy
 80020a6:	f3bf 8f4f 	dsb	sy
 80020aa:	623b      	str	r3, [r7, #32]
}
 80020ac:	bf00      	nop
 80020ae:	e7fe      	b.n	80020ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <xQueueGiveFromISR+0x48>
	__asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	61fb      	str	r3, [r7, #28]
}
 80020ca:	bf00      	nop
 80020cc:	e7fe      	b.n	80020cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <xQueueGiveFromISR+0x58>
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <xQueueGiveFromISR+0x5c>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <xQueueGiveFromISR+0x5e>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <xQueueGiveFromISR+0x78>
	__asm volatile
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	61bb      	str	r3, [r7, #24]
}
 80020fa:	bf00      	nop
 80020fc:	e7fe      	b.n	80020fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020fe:	f002 f9eb 	bl	80044d8 <vPortValidateInterruptPriority>
	__asm volatile
 8002102:	f3ef 8211 	mrs	r2, BASEPRI
 8002106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210a:	f383 8811 	msr	BASEPRI, r3
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	f3bf 8f4f 	dsb	sy
 8002116:	617a      	str	r2, [r7, #20]
 8002118:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800211a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800212a:	429a      	cmp	r2, r3
 800212c:	d22b      	bcs.n	8002186 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002140:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d112      	bne.n	8002170 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	3324      	adds	r3, #36	; 0x24
 8002156:	4618      	mov	r0, r3
 8002158:	f001 f8c2 	bl	80032e0 <xTaskRemoveFromEventList>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00e      	beq.n	8002180 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e007      	b.n	8002180 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002174:	3301      	adds	r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	b25a      	sxtb	r2, r3
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002180:	2301      	movs	r3, #1
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
 8002184:	e001      	b.n	800218a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002186:	2300      	movs	r3, #0
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
 800218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f383 8811 	msr	BASEPRI, r3
}
 8002194:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002198:	4618      	mov	r0, r3
 800219a:	3738      	adds	r7, #56	; 0x38
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <xQueueReceive+0x30>
	__asm volatile
 80021ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	623b      	str	r3, [r7, #32]
}
 80021cc:	bf00      	nop
 80021ce:	e7fe      	b.n	80021ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d103      	bne.n	80021de <xQueueReceive+0x3e>
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <xQueueReceive+0x42>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <xQueueReceive+0x44>
 80021e2:	2300      	movs	r3, #0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <xQueueReceive+0x5e>
	__asm volatile
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	61fb      	str	r3, [r7, #28]
}
 80021fa:	bf00      	nop
 80021fc:	e7fe      	b.n	80021fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021fe:	f001 fa2d 	bl	800365c <xTaskGetSchedulerState>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <xQueueReceive+0x6e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <xQueueReceive+0x72>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <xQueueReceive+0x74>
 8002212:	2300      	movs	r3, #0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <xQueueReceive+0x8e>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	61bb      	str	r3, [r7, #24]
}
 800222a:	bf00      	nop
 800222c:	e7fe      	b.n	800222c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800222e:	f002 f871 	bl	8004314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01f      	beq.n	800227e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002242:	f000 fabe 	bl	80027c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00f      	beq.n	8002276 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	3310      	adds	r3, #16
 800225a:	4618      	mov	r0, r3
 800225c:	f001 f840 	bl	80032e0 <xTaskRemoveFromEventList>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <xQueueReceive+0x1bc>)
 8002268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002276:	f002 f87d 	bl	8004374 <vPortExitCritical>
				return pdPASS;
 800227a:	2301      	movs	r3, #1
 800227c:	e069      	b.n	8002352 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002284:	f002 f876 	bl	8004374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002288:	2300      	movs	r3, #0
 800228a:	e062      	b.n	8002352 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f001 f886 	bl	80033a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800229c:	2301      	movs	r3, #1
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022a0:	f002 f868 	bl	8004374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022a4:	f000 fdf8 	bl	8002e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022a8:	f002 f834 	bl	8004314 <vPortEnterCritical>
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d103      	bne.n	80022c2 <xQueueReceive+0x122>
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ce:	d103      	bne.n	80022d8 <xQueueReceive+0x138>
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022d8:	f002 f84c 	bl	8004374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022dc:	1d3a      	adds	r2, r7, #4
 80022de:	f107 0310 	add.w	r3, r7, #16
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f001 f875 	bl	80033d4 <xTaskCheckForTimeOut>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d123      	bne.n	8002338 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022f2:	f000 fade 	bl	80028b2 <prvIsQueueEmpty>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d017      	beq.n	800232c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fe:	3324      	adds	r3, #36	; 0x24
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f000 ff9b 	bl	8003240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800230a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800230c:	f000 fa7f 	bl	800280e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002310:	f000 fdd0 	bl	8002eb4 <xTaskResumeAll>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d189      	bne.n	800222e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <xQueueReceive+0x1bc>)
 800231c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	e780      	b.n	800222e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800232c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800232e:	f000 fa6e 	bl	800280e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002332:	f000 fdbf 	bl	8002eb4 <xTaskResumeAll>
 8002336:	e77a      	b.n	800222e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800233a:	f000 fa68 	bl	800280e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800233e:	f000 fdb9 	bl	8002eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002344:	f000 fab5 	bl	80028b2 <prvIsQueueEmpty>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	f43f af6f 	beq.w	800222e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002350:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002352:	4618      	mov	r0, r3
 8002354:	3730      	adds	r7, #48	; 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000ed04 	.word	0xe000ed04

08002360 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	; 0x38
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800236a:	2300      	movs	r3, #0
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002372:	2300      	movs	r3, #0
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	623b      	str	r3, [r7, #32]
}
 800238e:	bf00      	nop
 8002390:	e7fe      	b.n	8002390 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	61fb      	str	r3, [r7, #28]
}
 80023ac:	bf00      	nop
 80023ae:	e7fe      	b.n	80023ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023b0:	f001 f954 	bl	800365c <xTaskGetSchedulerState>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <xQueueSemaphoreTake+0x60>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <xQueueSemaphoreTake+0x64>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <xQueueSemaphoreTake+0x66>
 80023c4:	2300      	movs	r3, #0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	61bb      	str	r3, [r7, #24]
}
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023e0:	f001 ff98 	bl	8004314 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d024      	beq.n	800243a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d104      	bne.n	800240a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002400:	f001 faa2 	bl	8003948 <pvTaskIncrementMutexHeldCount>
 8002404:	4602      	mov	r2, r0
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00f      	beq.n	8002432 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	3310      	adds	r3, #16
 8002416:	4618      	mov	r0, r3
 8002418:	f000 ff62 	bl	80032e0 <xTaskRemoveFromEventList>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002422:	4b54      	ldr	r3, [pc, #336]	; (8002574 <xQueueSemaphoreTake+0x214>)
 8002424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002432:	f001 ff9f 	bl	8004374 <vPortExitCritical>
				return pdPASS;
 8002436:	2301      	movs	r3, #1
 8002438:	e097      	b.n	800256a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d111      	bne.n	8002464 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	617b      	str	r3, [r7, #20]
}
 8002458:	bf00      	nop
 800245a:	e7fe      	b.n	800245a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800245c:	f001 ff8a 	bl	8004374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002460:	2300      	movs	r3, #0
 8002462:	e082      	b.n	800256a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	4618      	mov	r0, r3
 8002470:	f000 ff9a 	bl	80033a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002474:	2301      	movs	r3, #1
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002478:	f001 ff7c 	bl	8004374 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800247c:	f000 fd0c 	bl	8002e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002480:	f001 ff48 	bl	8004314 <vPortEnterCritical>
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800248a:	b25b      	sxtb	r3, r3
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d103      	bne.n	800249a <xQueueSemaphoreTake+0x13a>
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d103      	bne.n	80024b0 <xQueueSemaphoreTake+0x150>
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b0:	f001 ff60 	bl	8004374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024b4:	463a      	mov	r2, r7
 80024b6:	f107 030c 	add.w	r3, r7, #12
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 ff89 	bl	80033d4 <xTaskCheckForTimeOut>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d132      	bne.n	800252e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024ca:	f000 f9f2 	bl	80028b2 <prvIsQueueEmpty>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d026      	beq.n	8002522 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80024dc:	f001 ff1a 	bl	8004314 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 f8d7 	bl	8003698 <xTaskPriorityInherit>
 80024ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80024ec:	f001 ff42 	bl	8004374 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	3324      	adds	r3, #36	; 0x24
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fea1 	bl	8003240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002500:	f000 f985 	bl	800280e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002504:	f000 fcd6 	bl	8002eb4 <xTaskResumeAll>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	f47f af68 	bne.w	80023e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002510:	4b18      	ldr	r3, [pc, #96]	; (8002574 <xQueueSemaphoreTake+0x214>)
 8002512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	e75e      	b.n	80023e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002524:	f000 f973 	bl	800280e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002528:	f000 fcc4 	bl	8002eb4 <xTaskResumeAll>
 800252c:	e758      	b.n	80023e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800252e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002530:	f000 f96d 	bl	800280e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002534:	f000 fcbe 	bl	8002eb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800253a:	f000 f9ba 	bl	80028b2 <prvIsQueueEmpty>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f43f af4d 	beq.w	80023e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800254c:	f001 fee2 	bl	8004314 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002552:	f000 f8b4 	bl	80026be <prvGetDisinheritPriorityAfterTimeout>
 8002556:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800255e:	4618      	mov	r0, r3
 8002560:	f001 f970 	bl	8003844 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002564:	f001 ff06 	bl	8004374 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002568:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800256a:	4618      	mov	r0, r3
 800256c:	3738      	adds	r7, #56	; 0x38
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	e000ed04 	.word	0xe000ed04

08002578 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08e      	sub	sp, #56	; 0x38
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	623b      	str	r3, [r7, #32]
}
 80025a0:	bf00      	nop
 80025a2:	e7fe      	b.n	80025a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <xQueueReceiveFromISR+0x3a>
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <xQueueReceiveFromISR+0x3e>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <xQueueReceiveFromISR+0x40>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	61fb      	str	r3, [r7, #28]
}
 80025ce:	bf00      	nop
 80025d0:	e7fe      	b.n	80025d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025d2:	f001 ff81 	bl	80044d8 <vPortValidateInterruptPriority>
	__asm volatile
 80025d6:	f3ef 8211 	mrs	r2, BASEPRI
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	61ba      	str	r2, [r7, #24]
 80025ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80025ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d02f      	beq.n	800265e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800260c:	f000 f8d9 	bl	80027c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002618:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d112      	bne.n	8002648 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	3310      	adds	r3, #16
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fe56 	bl	80032e0 <xTaskRemoveFromEventList>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00e      	beq.n	8002658 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e007      	b.n	8002658 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800264c:	3301      	adds	r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	b25a      	sxtb	r2, r3
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002658:	2301      	movs	r3, #1
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
 800265c:	e001      	b.n	8002662 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f383 8811 	msr	BASEPRI, r3
}
 800266c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800266e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002670:	4618      	mov	r0, r3
 8002672:	3738      	adds	r7, #56	; 0x38
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <vQueueDelete+0x28>
	__asm volatile
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	60bb      	str	r3, [r7, #8]
}
 800269c:	bf00      	nop
 800269e:	e7fe      	b.n	800269e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f95f 	bl	8002964 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f002 f81d 	bl	80046f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e001      	b.n	80026e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80026e0:	68fb      	ldr	r3, [r7, #12]
	}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10d      	bne.n	8002728 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d14d      	bne.n	80027b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4618      	mov	r0, r3
 800271a:	f001 f825 	bl	8003768 <xTaskPriorityDisinherit>
 800271e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	e043      	b.n	80027b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d119      	bne.n	8002762 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6858      	ldr	r0, [r3, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	461a      	mov	r2, r3
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	f002 f91b 	bl	8004974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	441a      	add	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	429a      	cmp	r2, r3
 8002756:	d32b      	bcc.n	80027b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	e026      	b.n	80027b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	68d8      	ldr	r0, [r3, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	461a      	mov	r2, r3
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	f002 f901 	bl	8004974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	425b      	negs	r3, r3
 800277c:	441a      	add	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d207      	bcs.n	800279e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	425b      	negs	r3, r3
 8002798:	441a      	add	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d105      	bne.n	80027b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80027b8:	697b      	ldr	r3, [r7, #20]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d018      	beq.n	8002806 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	441a      	add	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d303      	bcc.n	80027f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68d9      	ldr	r1, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	461a      	mov	r2, r3
 8002800:	6838      	ldr	r0, [r7, #0]
 8002802:	f002 f8b7 	bl	8004974 <memcpy>
	}
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002816:	f001 fd7d 	bl	8004314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002820:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002822:	e011      	b.n	8002848 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	2b00      	cmp	r3, #0
 800282a:	d012      	beq.n	8002852 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3324      	adds	r3, #36	; 0x24
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fd55 	bl	80032e0 <xTaskRemoveFromEventList>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800283c:	f000 fe2c 	bl	8003498 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	3b01      	subs	r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	dce9      	bgt.n	8002824 <prvUnlockQueue+0x16>
 8002850:	e000      	b.n	8002854 <prvUnlockQueue+0x46>
					break;
 8002852:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	22ff      	movs	r2, #255	; 0xff
 8002858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800285c:	f001 fd8a 	bl	8004374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002860:	f001 fd58 	bl	8004314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800286a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800286c:	e011      	b.n	8002892 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d012      	beq.n	800289c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3310      	adds	r3, #16
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fd30 	bl	80032e0 <xTaskRemoveFromEventList>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002886:	f000 fe07 	bl	8003498 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800288a:	7bbb      	ldrb	r3, [r7, #14]
 800288c:	3b01      	subs	r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002896:	2b00      	cmp	r3, #0
 8002898:	dce9      	bgt.n	800286e <prvUnlockQueue+0x60>
 800289a:	e000      	b.n	800289e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800289c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	22ff      	movs	r2, #255	; 0xff
 80028a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80028a6:	f001 fd65 	bl	8004374 <vPortExitCritical>
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028ba:	f001 fd2b 	bl	8004314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e001      	b.n	80028d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028d0:	f001 fd50 	bl	8004374 <vPortExitCritical>

	return xReturn;
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028e6:	f001 fd15 	bl	8004314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d102      	bne.n	80028fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80028f6:	2301      	movs	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e001      	b.n	8002900 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002900:	f001 fd38 	bl	8004374 <vPortExitCritical>

	return xReturn;
 8002904:	68fb      	ldr	r3, [r7, #12]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e014      	b.n	800294a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002920:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <vQueueAddToRegistry+0x50>)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800292c:	490c      	ldr	r1, [pc, #48]	; (8002960 <vQueueAddToRegistry+0x50>)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <vQueueAddToRegistry+0x50>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002942:	e006      	b.n	8002952 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3301      	adds	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b07      	cmp	r3, #7
 800294e:	d9e7      	bls.n	8002920 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	200006f8 	.word	0x200006f8

08002964 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e016      	b.n	80029a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <vQueueUnregisterQueue+0x50>)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d10b      	bne.n	800299a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002982:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <vQueueUnregisterQueue+0x50>)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2100      	movs	r1, #0
 8002988:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800298c:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <vQueueUnregisterQueue+0x50>)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
				break;
 8002998:	e006      	b.n	80029a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3301      	adds	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b07      	cmp	r3, #7
 80029a4:	d9e5      	bls.n	8002972 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	200006f8 	.word	0x200006f8

080029b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029c8:	f001 fca4 	bl	8004314 <vPortEnterCritical>
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029d2:	b25b      	sxtb	r3, r3
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d103      	bne.n	80029e2 <vQueueWaitForMessageRestricted+0x2a>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ee:	d103      	bne.n	80029f8 <vQueueWaitForMessageRestricted+0x40>
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f8:	f001 fcbc 	bl	8004374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3324      	adds	r3, #36	; 0x24
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fc3b 	bl	8003288 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f7ff fefb 	bl	800280e <prvUnlockQueue>
	}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08e      	sub	sp, #56	; 0x38
 8002a24:	af04      	add	r7, sp, #16
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	623b      	str	r3, [r7, #32]
}
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	61fb      	str	r3, [r7, #28]
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a66:	235c      	movs	r3, #92	; 0x5c
 8002a68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b5c      	cmp	r3, #92	; 0x5c
 8002a6e:	d00a      	beq.n	8002a86 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	61bb      	str	r3, [r7, #24]
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01e      	beq.n	8002acc <xTaskCreateStatic+0xac>
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9303      	str	r3, [sp, #12]
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f850 	bl	8002b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ac6:	f000 f8dd 	bl	8002c84 <prvAddNewTaskToReadyList>
 8002aca:	e001      	b.n	8002ad0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ad0:	697b      	ldr	r3, [r7, #20]
	}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3728      	adds	r7, #40	; 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b08c      	sub	sp, #48	; 0x30
 8002ade:	af04      	add	r7, sp, #16
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 fd32 	bl	8004558 <pvPortMalloc>
 8002af4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00e      	beq.n	8002b1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002afc:	205c      	movs	r0, #92	; 0x5c
 8002afe:	f001 fd2b 	bl	8004558 <pvPortMalloc>
 8002b02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b10:	e005      	b.n	8002b1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f001 fdec 	bl	80046f0 <vPortFree>
 8002b18:	e001      	b.n	8002b1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9303      	str	r3, [sp, #12]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f80e 	bl	8002b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b48:	69f8      	ldr	r0, [r7, #28]
 8002b4a:	f000 f89b 	bl	8002c84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e002      	b.n	8002b5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	21a5      	movs	r1, #165	; 0xa5
 8002b7e:	f001 ff07 	bl	8004990 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f023 0307 	bic.w	r3, r3, #7
 8002b9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	617b      	str	r3, [r7, #20]
}
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01f      	beq.n	8002c02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	e012      	b.n	8002bee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	7819      	ldrb	r1, [r3, #0]
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3334      	adds	r3, #52	; 0x34
 8002bd8:	460a      	mov	r2, r1
 8002bda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d006      	beq.n	8002bf6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	3301      	adds	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d9e9      	bls.n	8002bc8 <prvInitialiseNewTask+0x64>
 8002bf4:	e000      	b.n	8002bf8 <prvInitialiseNewTask+0x94>
			{
				break;
 8002bf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c00:	e003      	b.n	8002c0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	2b37      	cmp	r3, #55	; 0x37
 8002c0e:	d901      	bls.n	8002c14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c10:	2337      	movs	r3, #55	; 0x37
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	2200      	movs	r2, #0
 8002c24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	3304      	adds	r3, #4
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fe56 	bl	80018dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	3318      	adds	r3, #24
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fe51 	bl	80018dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	2200      	movs	r2, #0
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	69b8      	ldr	r0, [r7, #24]
 8002c64:	f001 fa26 	bl	80040b4 <pxPortInitialiseStack>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c7a:	bf00      	nop
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c8c:	f001 fb42 	bl	8004314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <prvAddNewTaskToReadyList+0xc4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <prvAddNewTaskToReadyList+0xc4>)
 8002c98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <prvAddNewTaskToReadyList+0xc8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ca2:	4a2a      	ldr	r2, [pc, #168]	; (8002d4c <prvAddNewTaskToReadyList+0xc8>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <prvAddNewTaskToReadyList+0xc4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d110      	bne.n	8002cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cb0:	f000 fc16 	bl	80034e0 <prvInitialiseTaskLists>
 8002cb4:	e00d      	b.n	8002cd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <prvAddNewTaskToReadyList+0xcc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <prvAddNewTaskToReadyList+0xc8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d802      	bhi.n	8002cd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <prvAddNewTaskToReadyList+0xc8>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <prvAddNewTaskToReadyList+0xd0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <prvAddNewTaskToReadyList+0xd0>)
 8002cda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <prvAddNewTaskToReadyList+0xd0>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <prvAddNewTaskToReadyList+0xd4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d903      	bls.n	8002cf8 <prvAddNewTaskToReadyList+0x74>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <prvAddNewTaskToReadyList+0xd4>)
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <prvAddNewTaskToReadyList+0xd8>)
 8002d06:	441a      	add	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7fe fdf1 	bl	80018f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d14:	f001 fb2e 	bl	8004374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <prvAddNewTaskToReadyList+0xcc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <prvAddNewTaskToReadyList+0xc8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d207      	bcs.n	8002d3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <prvAddNewTaskToReadyList+0xdc>)
 8002d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000c0c 	.word	0x20000c0c
 8002d4c:	20000738 	.word	0x20000738
 8002d50:	20000c18 	.word	0x20000c18
 8002d54:	20000c28 	.word	0x20000c28
 8002d58:	20000c14 	.word	0x20000c14
 8002d5c:	2000073c 	.word	0x2000073c
 8002d60:	e000ed04 	.word	0xe000ed04

08002d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d017      	beq.n	8002da6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <vTaskDelay+0x60>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <vTaskDelay+0x30>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	60bb      	str	r3, [r7, #8]
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d94:	f000 f880 	bl	8002e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d98:	2100      	movs	r1, #0
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fde8 	bl	8003970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002da0:	f000 f888 	bl	8002eb4 <xTaskResumeAll>
 8002da4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <vTaskDelay+0x64>)
 8002dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000c34 	.word	0x20000c34
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dda:	463a      	mov	r2, r7
 8002ddc:	1d39      	adds	r1, r7, #4
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fd26 	bl	8001834 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002de8:	6839      	ldr	r1, [r7, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	9202      	str	r2, [sp, #8]
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	2300      	movs	r3, #0
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	2300      	movs	r3, #0
 8002df8:	460a      	mov	r2, r1
 8002dfa:	4921      	ldr	r1, [pc, #132]	; (8002e80 <vTaskStartScheduler+0xb4>)
 8002dfc:	4821      	ldr	r0, [pc, #132]	; (8002e84 <vTaskStartScheduler+0xb8>)
 8002dfe:	f7ff fe0f 	bl	8002a20 <xTaskCreateStatic>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <vTaskStartScheduler+0xbc>)
 8002e06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <vTaskStartScheduler+0xbc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e10:	2301      	movs	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e001      	b.n	8002e1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d102      	bne.n	8002e26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002e20:	f000 fdfa 	bl	8003a18 <xTimerCreateTimerTask>
 8002e24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d116      	bne.n	8002e5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	613b      	str	r3, [r7, #16]
}
 8002e3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <vTaskStartScheduler+0xc0>)
 8002e42:	f04f 32ff 	mov.w	r2, #4294967295
 8002e46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <vTaskStartScheduler+0xc4>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <vTaskStartScheduler+0xc8>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e54:	f001 f9bc 	bl	80041d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e58:	e00e      	b.n	8002e78 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d10a      	bne.n	8002e78 <vTaskStartScheduler+0xac>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	60fb      	str	r3, [r7, #12]
}
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <vTaskStartScheduler+0xaa>
}
 8002e78:	bf00      	nop
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	080049d8 	.word	0x080049d8
 8002e84:	080034b1 	.word	0x080034b1
 8002e88:	20000c30 	.word	0x20000c30
 8002e8c:	20000c2c 	.word	0x20000c2c
 8002e90:	20000c18 	.word	0x20000c18
 8002e94:	20000c10 	.word	0x20000c10

08002e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <vTaskSuspendAll+0x18>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <vTaskSuspendAll+0x18>)
 8002ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	20000c34 	.word	0x20000c34

08002eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ec2:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <xTaskResumeAll+0x118>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	603b      	str	r3, [r7, #0]
}
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ee0:	f001 fa18 	bl	8004314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ee4:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <xTaskResumeAll+0x118>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <xTaskResumeAll+0x118>)
 8002eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eee:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <xTaskResumeAll+0x118>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d162      	bne.n	8002fbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <xTaskResumeAll+0x11c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d05e      	beq.n	8002fbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002efe:	e02f      	b.n	8002f60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f00:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <xTaskResumeAll+0x120>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe fd4f 	bl	80019b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fd4a 	bl	80019b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <xTaskResumeAll+0x124>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d903      	bls.n	8002f30 <xTaskResumeAll+0x7c>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	4a2a      	ldr	r2, [pc, #168]	; (8002fd8 <xTaskResumeAll+0x124>)
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <xTaskResumeAll+0x128>)
 8002f3e:	441a      	add	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fe fcd5 	bl	80018f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <xTaskResumeAll+0x12c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <xTaskResumeAll+0x130>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f60:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <xTaskResumeAll+0x120>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1cb      	bne.n	8002f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f6e:	f000 fb55 	bl	800361c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <xTaskResumeAll+0x134>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f7e:	f000 f847 	bl	8003010 <xTaskIncrementTick>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <xTaskResumeAll+0x130>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f1      	bne.n	8002f7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <xTaskResumeAll+0x134>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <xTaskResumeAll+0x130>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d009      	beq.n	8002fbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <xTaskResumeAll+0x138>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fbc:	f001 f9da 	bl	8004374 <vPortExitCritical>

	return xAlreadyYielded;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000c34 	.word	0x20000c34
 8002fd0:	20000c0c 	.word	0x20000c0c
 8002fd4:	20000bcc 	.word	0x20000bcc
 8002fd8:	20000c14 	.word	0x20000c14
 8002fdc:	2000073c 	.word	0x2000073c
 8002fe0:	20000738 	.word	0x20000738
 8002fe4:	20000c20 	.word	0x20000c20
 8002fe8:	20000c1c 	.word	0x20000c1c
 8002fec:	e000ed04 	.word	0xe000ed04

08002ff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <xTaskGetTickCount+0x1c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ffc:	687b      	ldr	r3, [r7, #4]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000c10 	.word	0x20000c10

08003010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800301a:	4b4f      	ldr	r3, [pc, #316]	; (8003158 <xTaskIncrementTick+0x148>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 808f 	bne.w	8003142 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003024:	4b4d      	ldr	r3, [pc, #308]	; (800315c <xTaskIncrementTick+0x14c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800302c:	4a4b      	ldr	r2, [pc, #300]	; (800315c <xTaskIncrementTick+0x14c>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d120      	bne.n	800307a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003038:	4b49      	ldr	r3, [pc, #292]	; (8003160 <xTaskIncrementTick+0x150>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <xTaskIncrementTick+0x48>
	__asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	603b      	str	r3, [r7, #0]
}
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <xTaskIncrementTick+0x46>
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <xTaskIncrementTick+0x150>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <xTaskIncrementTick+0x154>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a3f      	ldr	r2, [pc, #252]	; (8003160 <xTaskIncrementTick+0x150>)
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4a3f      	ldr	r2, [pc, #252]	; (8003164 <xTaskIncrementTick+0x154>)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <xTaskIncrementTick+0x158>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	4a3d      	ldr	r2, [pc, #244]	; (8003168 <xTaskIncrementTick+0x158>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	f000 fad1 	bl	800361c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800307a:	4b3c      	ldr	r3, [pc, #240]	; (800316c <xTaskIncrementTick+0x15c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	429a      	cmp	r2, r3
 8003082:	d349      	bcc.n	8003118 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <xTaskIncrementTick+0x150>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <xTaskIncrementTick+0x15c>)
 8003090:	f04f 32ff 	mov.w	r2, #4294967295
 8003094:	601a      	str	r2, [r3, #0]
					break;
 8003096:	e03f      	b.n	8003118 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003098:	4b31      	ldr	r3, [pc, #196]	; (8003160 <xTaskIncrementTick+0x150>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d203      	bcs.n	80030b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030b0:	4a2e      	ldr	r2, [pc, #184]	; (800316c <xTaskIncrementTick+0x15c>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030b6:	e02f      	b.n	8003118 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fc77 	bl	80019b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3318      	adds	r3, #24
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fc6e 	bl	80019b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <xTaskIncrementTick+0x160>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d903      	bls.n	80030e8 <xTaskIncrementTick+0xd8>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	4a22      	ldr	r2, [pc, #136]	; (8003170 <xTaskIncrementTick+0x160>)
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <xTaskIncrementTick+0x164>)
 80030f6:	441a      	add	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7fe fbf9 	bl	80018f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <xTaskIncrementTick+0x168>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	429a      	cmp	r2, r3
 8003110:	d3b8      	bcc.n	8003084 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003112:	2301      	movs	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003116:	e7b5      	b.n	8003084 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <xTaskIncrementTick+0x168>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311e:	4915      	ldr	r1, [pc, #84]	; (8003174 <xTaskIncrementTick+0x164>)
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d901      	bls.n	8003134 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003130:	2301      	movs	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <xTaskIncrementTick+0x16c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800313c:	2301      	movs	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e004      	b.n	800314c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003142:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <xTaskIncrementTick+0x170>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <xTaskIncrementTick+0x170>)
 800314a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800314c:	697b      	ldr	r3, [r7, #20]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000c34 	.word	0x20000c34
 800315c:	20000c10 	.word	0x20000c10
 8003160:	20000bc4 	.word	0x20000bc4
 8003164:	20000bc8 	.word	0x20000bc8
 8003168:	20000c24 	.word	0x20000c24
 800316c:	20000c2c 	.word	0x20000c2c
 8003170:	20000c14 	.word	0x20000c14
 8003174:	2000073c 	.word	0x2000073c
 8003178:	20000738 	.word	0x20000738
 800317c:	20000c20 	.word	0x20000c20
 8003180:	20000c1c 	.word	0x20000c1c

08003184 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <vTaskSwitchContext+0xa8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <vTaskSwitchContext+0xac>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003198:	e041      	b.n	800321e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <vTaskSwitchContext+0xac>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <vTaskSwitchContext+0xb0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	e010      	b.n	80031ca <vTaskSwitchContext+0x46>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	607b      	str	r3, [r7, #4]
}
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <vTaskSwitchContext+0x3e>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	491b      	ldr	r1, [pc, #108]	; (8003238 <vTaskSwitchContext+0xb4>)
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0e4      	beq.n	80031a8 <vTaskSwitchContext+0x24>
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4a13      	ldr	r2, [pc, #76]	; (8003238 <vTaskSwitchContext+0xb4>)
 80031ea:	4413      	add	r3, r2
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	3308      	adds	r3, #8
 8003200:	429a      	cmp	r2, r3
 8003202:	d104      	bne.n	800320e <vTaskSwitchContext+0x8a>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a09      	ldr	r2, [pc, #36]	; (800323c <vTaskSwitchContext+0xb8>)
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4a06      	ldr	r2, [pc, #24]	; (8003234 <vTaskSwitchContext+0xb0>)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6013      	str	r3, [r2, #0]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000c34 	.word	0x20000c34
 8003230:	20000c20 	.word	0x20000c20
 8003234:	20000c14 	.word	0x20000c14
 8003238:	2000073c 	.word	0x2000073c
 800323c:	20000738 	.word	0x20000738

08003240 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	60fb      	str	r3, [r7, #12]
}
 8003262:	bf00      	nop
 8003264:	e7fe      	b.n	8003264 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <vTaskPlaceOnEventList+0x44>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3318      	adds	r3, #24
 800326c:	4619      	mov	r1, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fe fb65 	bl	800193e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003274:	2101      	movs	r1, #1
 8003276:	6838      	ldr	r0, [r7, #0]
 8003278:	f000 fb7a 	bl	8003970 <prvAddCurrentTaskToDelayedList>
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000738 	.word	0x20000738

08003288 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	617b      	str	r3, [r7, #20]
}
 80032ac:	bf00      	nop
 80032ae:	e7fe      	b.n	80032ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <vTaskPlaceOnEventListRestricted+0x54>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3318      	adds	r3, #24
 80032b6:	4619      	mov	r1, r3
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7fe fb1c 	bl	80018f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
 80032c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	68b8      	ldr	r0, [r7, #8]
 80032ce:	f000 fb4f 	bl	8003970 <prvAddCurrentTaskToDelayedList>
	}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000738 	.word	0x20000738

080032e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	60fb      	str	r3, [r7, #12]
}
 8003308:	bf00      	nop
 800330a:	e7fe      	b.n	800330a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	3318      	adds	r3, #24
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fb4d 	bl	80019b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <xTaskRemoveFromEventList+0xb0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11d      	bne.n	800335a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	3304      	adds	r3, #4
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fb44 	bl	80019b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <xTaskRemoveFromEventList+0xb4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d903      	bls.n	800333c <xTaskRemoveFromEventList+0x5c>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	4a16      	ldr	r2, [pc, #88]	; (8003394 <xTaskRemoveFromEventList+0xb4>)
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4a13      	ldr	r2, [pc, #76]	; (8003398 <xTaskRemoveFromEventList+0xb8>)
 800334a:	441a      	add	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	3304      	adds	r3, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f7fe facf 	bl	80018f6 <vListInsertEnd>
 8003358:	e005      	b.n	8003366 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	3318      	adds	r3, #24
 800335e:	4619      	mov	r1, r3
 8003360:	480e      	ldr	r0, [pc, #56]	; (800339c <xTaskRemoveFromEventList+0xbc>)
 8003362:	f7fe fac8 	bl	80018f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <xTaskRemoveFromEventList+0xc0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	429a      	cmp	r2, r3
 8003372:	d905      	bls.n	8003380 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003374:	2301      	movs	r3, #1
 8003376:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <xTaskRemoveFromEventList+0xc4>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e001      	b.n	8003384 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003384:	697b      	ldr	r3, [r7, #20]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000c34 	.word	0x20000c34
 8003394:	20000c14 	.word	0x20000c14
 8003398:	2000073c 	.word	0x2000073c
 800339c:	20000bcc 	.word	0x20000bcc
 80033a0:	20000738 	.word	0x20000738
 80033a4:	20000c20 	.word	0x20000c20

080033a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <vTaskInternalSetTimeOutState+0x24>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <vTaskInternalSetTimeOutState+0x28>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	605a      	str	r2, [r3, #4]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	20000c24 	.word	0x20000c24
 80033d0:	20000c10 	.word	0x20000c10

080033d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	613b      	str	r3, [r7, #16]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	60fb      	str	r3, [r7, #12]
}
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003416:	f000 ff7d 	bl	8004314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <xTaskCheckForTimeOut+0xbc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d102      	bne.n	800343a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	e023      	b.n	8003482 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <xTaskCheckForTimeOut+0xc0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d007      	beq.n	8003456 <xTaskCheckForTimeOut+0x82>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003450:	2301      	movs	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	e015      	b.n	8003482 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	d20b      	bcs.n	8003478 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad2      	subs	r2, r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff9b 	bl	80033a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e004      	b.n	8003482 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800347e:	2301      	movs	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003482:	f000 ff77 	bl	8004374 <vPortExitCritical>

	return xReturn;
 8003486:	69fb      	ldr	r3, [r7, #28]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000c10 	.word	0x20000c10
 8003494:	20000c24 	.word	0x20000c24

08003498 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <vTaskMissedYield+0x14>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	20000c20 	.word	0x20000c20

080034b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034b8:	f000 f852 	bl	8003560 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <prvIdleTask+0x28>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d9f9      	bls.n	80034b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <prvIdleTask+0x2c>)
 80034c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034d4:	e7f0      	b.n	80034b8 <prvIdleTask+0x8>
 80034d6:	bf00      	nop
 80034d8:	2000073c 	.word	0x2000073c
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	e00c      	b.n	8003506 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <prvInitialiseTaskLists+0x60>)
 80034f8:	4413      	add	r3, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe f9ce 	bl	800189c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3301      	adds	r3, #1
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b37      	cmp	r3, #55	; 0x37
 800350a:	d9ef      	bls.n	80034ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800350c:	480d      	ldr	r0, [pc, #52]	; (8003544 <prvInitialiseTaskLists+0x64>)
 800350e:	f7fe f9c5 	bl	800189c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003512:	480d      	ldr	r0, [pc, #52]	; (8003548 <prvInitialiseTaskLists+0x68>)
 8003514:	f7fe f9c2 	bl	800189c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003518:	480c      	ldr	r0, [pc, #48]	; (800354c <prvInitialiseTaskLists+0x6c>)
 800351a:	f7fe f9bf 	bl	800189c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800351e:	480c      	ldr	r0, [pc, #48]	; (8003550 <prvInitialiseTaskLists+0x70>)
 8003520:	f7fe f9bc 	bl	800189c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003524:	480b      	ldr	r0, [pc, #44]	; (8003554 <prvInitialiseTaskLists+0x74>)
 8003526:	f7fe f9b9 	bl	800189c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <prvInitialiseTaskLists+0x78>)
 800352c:	4a05      	ldr	r2, [pc, #20]	; (8003544 <prvInitialiseTaskLists+0x64>)
 800352e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <prvInitialiseTaskLists+0x7c>)
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <prvInitialiseTaskLists+0x68>)
 8003534:	601a      	str	r2, [r3, #0]
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	2000073c 	.word	0x2000073c
 8003544:	20000b9c 	.word	0x20000b9c
 8003548:	20000bb0 	.word	0x20000bb0
 800354c:	20000bcc 	.word	0x20000bcc
 8003550:	20000be0 	.word	0x20000be0
 8003554:	20000bf8 	.word	0x20000bf8
 8003558:	20000bc4 	.word	0x20000bc4
 800355c:	20000bc8 	.word	0x20000bc8

08003560 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003566:	e019      	b.n	800359c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003568:	f000 fed4 	bl	8004314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800356c:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <prvCheckTasksWaitingTermination+0x50>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fa19 	bl	80019b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <prvCheckTasksWaitingTermination+0x54>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3b01      	subs	r3, #1
 8003584:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <prvCheckTasksWaitingTermination+0x54>)
 8003586:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <prvCheckTasksWaitingTermination+0x58>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3b01      	subs	r3, #1
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <prvCheckTasksWaitingTermination+0x58>)
 8003590:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003592:	f000 feef 	bl	8004374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f810 	bl	80035bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <prvCheckTasksWaitingTermination+0x58>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e1      	bne.n	8003568 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000be0 	.word	0x20000be0
 80035b4:	20000c0c 	.word	0x20000c0c
 80035b8:	20000bf4 	.word	0x20000bf4

080035bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 f88c 	bl	80046f0 <vPortFree>
				vPortFree( pxTCB );
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f001 f889 	bl	80046f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035de:	e018      	b.n	8003612 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d103      	bne.n	80035f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f001 f880 	bl	80046f0 <vPortFree>
	}
 80035f0:	e00f      	b.n	8003612 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d00a      	beq.n	8003612 <prvDeleteTCB+0x56>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	60fb      	str	r3, [r7, #12]
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <prvDeleteTCB+0x54>
	}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <prvResetNextTaskUnblockTime+0x38>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <prvResetNextTaskUnblockTime+0x3c>)
 800362e:	f04f 32ff 	mov.w	r2, #4294967295
 8003632:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003634:	e008      	b.n	8003648 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <prvResetNextTaskUnblockTime+0x38>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <prvResetNextTaskUnblockTime+0x3c>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	20000bc4 	.word	0x20000bc4
 8003658:	20000c2c 	.word	0x20000c2c

0800365c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <xTaskGetSchedulerState+0x34>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800366a:	2301      	movs	r3, #1
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	e008      	b.n	8003682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <xTaskGetSchedulerState+0x38>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003678:	2302      	movs	r3, #2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	e001      	b.n	8003682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003682:	687b      	ldr	r3, [r7, #4]
	}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	20000c18 	.word	0x20000c18
 8003694:	20000c34 	.word	0x20000c34

08003698 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d051      	beq.n	8003752 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	4b2a      	ldr	r3, [pc, #168]	; (800375c <xTaskPriorityInherit+0xc4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d241      	bcs.n	8003740 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	db06      	blt.n	80036d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <xTaskPriorityInherit+0xc4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6959      	ldr	r1, [r3, #20]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <xTaskPriorityInherit+0xc8>)
 80036e4:	4413      	add	r3, r2
 80036e6:	4299      	cmp	r1, r3
 80036e8:	d122      	bne.n	8003730 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe f95e 	bl	80019b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <xTaskPriorityInherit+0xc4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003702:	4b18      	ldr	r3, [pc, #96]	; (8003764 <xTaskPriorityInherit+0xcc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d903      	bls.n	8003712 <xTaskPriorityInherit+0x7a>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	4a15      	ldr	r2, [pc, #84]	; (8003764 <xTaskPriorityInherit+0xcc>)
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4a10      	ldr	r2, [pc, #64]	; (8003760 <xTaskPriorityInherit+0xc8>)
 8003720:	441a      	add	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fe f8e4 	bl	80018f6 <vListInsertEnd>
 800372e:	e004      	b.n	800373a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <xTaskPriorityInherit+0xc4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800373a:	2301      	movs	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e008      	b.n	8003752 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <xTaskPriorityInherit+0xc4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	429a      	cmp	r2, r3
 800374c:	d201      	bcs.n	8003752 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800374e:	2301      	movs	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003752:	68fb      	ldr	r3, [r7, #12]
	}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000738 	.word	0x20000738
 8003760:	2000073c 	.word	0x2000073c
 8003764:	20000c14 	.word	0x20000c14

08003768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d056      	beq.n	800382c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800377e:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <xTaskPriorityDisinherit+0xd0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	429a      	cmp	r2, r3
 8003786:	d00a      	beq.n	800379e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	60fb      	str	r3, [r7, #12]
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60bb      	str	r3, [r7, #8]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c0:	1e5a      	subs	r2, r3, #1
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d02c      	beq.n	800382c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d128      	bne.n	800382c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	3304      	adds	r3, #4
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe f8e6 	bl	80019b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	4b0f      	ldr	r3, [pc, #60]	; (800383c <xTaskPriorityDisinherit+0xd4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d903      	bls.n	800380c <xTaskPriorityDisinherit+0xa4>
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	4a0c      	ldr	r2, [pc, #48]	; (800383c <xTaskPriorityDisinherit+0xd4>)
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4a09      	ldr	r2, [pc, #36]	; (8003840 <xTaskPriorityDisinherit+0xd8>)
 800381a:	441a      	add	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	3304      	adds	r3, #4
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f7fe f867 	bl	80018f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800382c:	697b      	ldr	r3, [r7, #20]
	}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000738 	.word	0x20000738
 800383c:	20000c14 	.word	0x20000c14
 8003840:	2000073c 	.word	0x2000073c

08003844 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003852:	2301      	movs	r3, #1
 8003854:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d06a      	beq.n	8003932 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	60fb      	str	r3, [r7, #12]
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d902      	bls.n	800388a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	e002      	b.n	8003890 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	429a      	cmp	r2, r3
 8003898:	d04b      	beq.n	8003932 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d146      	bne.n	8003932 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d10a      	bne.n	80038c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	60bb      	str	r3, [r7, #8]
}
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db04      	blt.n	80038e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	6959      	ldr	r1, [r3, #20]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4a13      	ldr	r2, [pc, #76]	; (8003940 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80038f2:	4413      	add	r3, r2
 80038f4:	4299      	cmp	r1, r3
 80038f6:	d11c      	bne.n	8003932 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe f857 	bl	80019b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d903      	bls.n	8003916 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003924:	441a      	add	r2, r3
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3304      	adds	r3, #4
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7fd ffe2 	bl	80018f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003932:	bf00      	nop
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000738 	.word	0x20000738
 8003940:	2000073c 	.word	0x2000073c
 8003944:	20000c14 	.word	0x20000c14

08003948 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <pvTaskIncrementMutexHeldCount+0x24>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <pvTaskIncrementMutexHeldCount+0x24>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800395a:	3201      	adds	r2, #1
 800395c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800395e:	4b03      	ldr	r3, [pc, #12]	; (800396c <pvTaskIncrementMutexHeldCount+0x24>)
 8003960:	681b      	ldr	r3, [r3, #0]
	}
 8003962:	4618      	mov	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	20000738 	.word	0x20000738

08003970 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800397a:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <prvAddCurrentTaskToDelayedList+0x90>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003980:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3304      	adds	r3, #4
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe f812 	bl	80019b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d10a      	bne.n	80039aa <prvAddCurrentTaskToDelayedList+0x3a>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800399a:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3304      	adds	r3, #4
 80039a0:	4619      	mov	r1, r3
 80039a2:	4819      	ldr	r0, [pc, #100]	; (8003a08 <prvAddCurrentTaskToDelayedList+0x98>)
 80039a4:	f7fd ffa7 	bl	80018f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039a8:	e026      	b.n	80039f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039b2:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d209      	bcs.n	80039d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <prvAddCurrentTaskToDelayedList+0x9c>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f7fd ffb5 	bl	800193e <vListInsert>
}
 80039d4:	e010      	b.n	80039f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <prvAddCurrentTaskToDelayedList+0xa0>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3304      	adds	r3, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f7fd ffab 	bl	800193e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d202      	bcs.n	80039f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80039f2:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000c10 	.word	0x20000c10
 8003a04:	20000738 	.word	0x20000738
 8003a08:	20000bf8 	.word	0x20000bf8
 8003a0c:	20000bc8 	.word	0x20000bc8
 8003a10:	20000bc4 	.word	0x20000bc4
 8003a14:	20000c2c 	.word	0x20000c2c

08003a18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a22:	f000 fb07 	bl	8004034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a26:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <xTimerCreateTimerTask+0x80>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d021      	beq.n	8003a72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a36:	1d3a      	adds	r2, r7, #4
 8003a38:	f107 0108 	add.w	r1, r7, #8
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd ff11 	bl	8001868 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	9202      	str	r2, [sp, #8]
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	2302      	movs	r3, #2
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	460a      	mov	r2, r1
 8003a58:	4910      	ldr	r1, [pc, #64]	; (8003a9c <xTimerCreateTimerTask+0x84>)
 8003a5a:	4811      	ldr	r0, [pc, #68]	; (8003aa0 <xTimerCreateTimerTask+0x88>)
 8003a5c:	f7fe ffe0 	bl	8002a20 <xTaskCreateStatic>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <xTimerCreateTimerTask+0x8c>)
 8003a64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <xTimerCreateTimerTask+0x8c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	613b      	str	r3, [r7, #16]
}
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a8e:	697b      	ldr	r3, [r7, #20]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000c68 	.word	0x20000c68
 8003a9c:	080049e0 	.word	0x080049e0
 8003aa0:	08003bdd 	.word	0x08003bdd
 8003aa4:	20000c6c 	.word	0x20000c6c

08003aa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	623b      	str	r3, [r7, #32]
}
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <xTimerGenericCommand+0x98>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02a      	beq.n	8003b34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	dc18      	bgt.n	8003b22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003af0:	f7ff fdb4 	bl	800365c <xTaskGetSchedulerState>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d109      	bne.n	8003b0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <xTimerGenericCommand+0x98>)
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	f107 0110 	add.w	r1, r7, #16
 8003b02:	2300      	movs	r3, #0
 8003b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b06:	f7fe f925 	bl	8001d54 <xQueueGenericSend>
 8003b0a:	6278      	str	r0, [r7, #36]	; 0x24
 8003b0c:	e012      	b.n	8003b34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <xTimerGenericCommand+0x98>)
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	f107 0110 	add.w	r1, r7, #16
 8003b16:	2300      	movs	r3, #0
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f7fe f91b 	bl	8001d54 <xQueueGenericSend>
 8003b1e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b20:	e008      	b.n	8003b34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <xTimerGenericCommand+0x98>)
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	f107 0110 	add.w	r1, r7, #16
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	f7fe fa0f 	bl	8001f50 <xQueueGenericSendFromISR>
 8003b32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3728      	adds	r7, #40	; 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000c68 	.word	0x20000c68

08003b44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <prvProcessExpiredTimer+0x94>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fd ff27 	bl	80019b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d022      	beq.n	8003bb6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	18d1      	adds	r1, r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f000 f8d1 	bl	8003d24 <prvInsertTimerInActiveList>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01f      	beq.n	8003bc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	2100      	movs	r1, #0
 8003b92:	6978      	ldr	r0, [r7, #20]
 8003b94:	f7ff ff88 	bl	8003aa8 <xTimerGenericCommand>
 8003b98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d113      	bne.n	8003bc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60fb      	str	r3, [r7, #12]
}
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	6978      	ldr	r0, [r7, #20]
 8003bce:	4798      	blx	r3
}
 8003bd0:	bf00      	nop
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000c60 	.word	0x20000c60

08003bdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003be4:	f107 0308 	add.w	r3, r7, #8
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f857 	bl	8003c9c <prvGetNextExpireTime>
 8003bee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f803 	bl	8003c00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003bfa:	f000 f8d5 	bl	8003da8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bfe:	e7f1      	b.n	8003be4 <prvTimerTask+0x8>

08003c00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c0a:	f7ff f945 	bl	8002e98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c0e:	f107 0308 	add.w	r3, r7, #8
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f866 	bl	8003ce4 <prvSampleTimeNow>
 8003c18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d130      	bne.n	8003c82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <prvProcessTimerOrBlockTask+0x3c>
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d806      	bhi.n	8003c3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c2e:	f7ff f941 	bl	8002eb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff85 	bl	8003b44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c3a:	e024      	b.n	8003c86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <prvProcessTimerOrBlockTask+0x90>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <prvProcessTimerOrBlockTask+0x50>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <prvProcessTimerOrBlockTask+0x52>
 8003c50:	2300      	movs	r3, #0
 8003c52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <prvProcessTimerOrBlockTask+0x94>)
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	4619      	mov	r1, r3
 8003c62:	f7fe fea9 	bl	80029b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c66:	f7ff f925 	bl	8002eb4 <xTaskResumeAll>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <prvProcessTimerOrBlockTask+0x98>)
 8003c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	f3bf 8f6f 	isb	sy
}
 8003c80:	e001      	b.n	8003c86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c82:	f7ff f917 	bl	8002eb4 <xTaskResumeAll>
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000c64 	.word	0x20000c64
 8003c94:	20000c68 	.word	0x20000c68
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <prvGetNextExpireTime+0x44>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <prvGetNextExpireTime+0x16>
 8003cae:	2201      	movs	r2, #1
 8003cb0:	e000      	b.n	8003cb4 <prvGetNextExpireTime+0x18>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <prvGetNextExpireTime+0x44>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e001      	b.n	8003cd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000c60 	.word	0x20000c60

08003ce4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003cec:	f7ff f980 	bl	8002ff0 <xTaskGetTickCount>
 8003cf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <prvSampleTimeNow+0x3c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d205      	bcs.n	8003d08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003cfc:	f000 f936 	bl	8003f6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e002      	b.n	8003d0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d0e:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <prvSampleTimeNow+0x3c>)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d14:	68fb      	ldr	r3, [r7, #12]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000c70 	.word	0x20000c70

08003d24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d812      	bhi.n	8003d70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d302      	bcc.n	8003d5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e01b      	b.n	8003d96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <prvInsertTimerInActiveList+0x7c>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4619      	mov	r1, r3
 8003d68:	4610      	mov	r0, r2
 8003d6a:	f7fd fde8 	bl	800193e <vListInsert>
 8003d6e:	e012      	b.n	8003d96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d206      	bcs.n	8003d86 <prvInsertTimerInActiveList+0x62>
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d302      	bcc.n	8003d86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e007      	b.n	8003d96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <prvInsertTimerInActiveList+0x80>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4610      	mov	r0, r2
 8003d92:	f7fd fdd4 	bl	800193e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d96:	697b      	ldr	r3, [r7, #20]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000c64 	.word	0x20000c64
 8003da4:	20000c60 	.word	0x20000c60

08003da8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08e      	sub	sp, #56	; 0x38
 8003dac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dae:	e0ca      	b.n	8003f46 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	da18      	bge.n	8003de8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003db6:	1d3b      	adds	r3, r7, #4
 8003db8:	3304      	adds	r3, #4
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	61fb      	str	r3, [r7, #28]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dde:	6850      	ldr	r0, [r2, #4]
 8003de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de2:	6892      	ldr	r2, [r2, #8]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f2c0 80aa 	blt.w	8003f44 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fdd5 	bl	80019b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e06:	463b      	mov	r3, r7
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff6b 	bl	8003ce4 <prvSampleTimeNow>
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b09      	cmp	r3, #9
 8003e14:	f200 8097 	bhi.w	8003f46 <prvProcessReceivedCommands+0x19e>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <prvProcessReceivedCommands+0x78>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e49 	.word	0x08003e49
 8003e2c:	08003ebd 	.word	0x08003ebd
 8003e30:	08003ed1 	.word	0x08003ed1
 8003e34:	08003f1b 	.word	0x08003f1b
 8003e38:	08003e49 	.word	0x08003e49
 8003e3c:	08003e49 	.word	0x08003e49
 8003e40:	08003ebd 	.word	0x08003ebd
 8003e44:	08003ed1 	.word	0x08003ed1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	18d1      	adds	r1, r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e68:	f7ff ff5c 	bl	8003d24 <prvInsertTimerInActiveList>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d069      	beq.n	8003f46 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05e      	beq.n	8003f46 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	441a      	add	r2, r3
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	2100      	movs	r1, #0
 8003e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e9a:	f7ff fe05 	bl	8003aa8 <xTimerGenericCommand>
 8003e9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d14f      	bne.n	8003f46 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	61bb      	str	r3, [r7, #24]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003ece:	e03a      	b.n	8003f46 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	617b      	str	r3, [r7, #20]
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	18d1      	adds	r1, r2, r3
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f14:	f7ff ff06 	bl	8003d24 <prvInsertTimerInActiveList>
					break;
 8003f18:	e015      	b.n	8003f46 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d103      	bne.n	8003f30 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2a:	f000 fbe1 	bl	80046f0 <vPortFree>
 8003f2e:	e00a      	b.n	8003f46 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f42:	e000      	b.n	8003f46 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003f44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <prvProcessReceivedCommands+0x1c0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1d39      	adds	r1, r7, #4
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe f926 	bl	80021a0 <xQueueReceive>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f47f af2a 	bne.w	8003db0 <prvProcessReceivedCommands+0x8>
	}
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	3730      	adds	r7, #48	; 0x30
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000c68 	.word	0x20000c68

08003f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f72:	e048      	b.n	8004006 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f74:	4b2d      	ldr	r3, [pc, #180]	; (800402c <prvSwitchTimerLists+0xc0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f7e:	4b2b      	ldr	r3, [pc, #172]	; (800402c <prvSwitchTimerLists+0xc0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fd fd0f 	bl	80019b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02e      	beq.n	8004006 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4413      	add	r3, r2
 8003fb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d90e      	bls.n	8003fd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fc6:	4b19      	ldr	r3, [pc, #100]	; (800402c <prvSwitchTimerLists+0xc0>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7fd fcb4 	bl	800193e <vListInsert>
 8003fd6:	e016      	b.n	8004006 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7ff fd60 	bl	8003aa8 <xTimerGenericCommand>
 8003fe8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	603b      	str	r3, [r7, #0]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <prvSwitchTimerLists+0xc0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1b1      	bne.n	8003f74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <prvSwitchTimerLists+0xc0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <prvSwitchTimerLists+0xc4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <prvSwitchTimerLists+0xc0>)
 800401c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800401e:	4a04      	ldr	r2, [pc, #16]	; (8004030 <prvSwitchTimerLists+0xc4>)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	6013      	str	r3, [r2, #0]
}
 8004024:	bf00      	nop
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000c60 	.word	0x20000c60
 8004030:	20000c64 	.word	0x20000c64

08004034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800403a:	f000 f96b 	bl	8004314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800403e:	4b15      	ldr	r3, [pc, #84]	; (8004094 <prvCheckForValidListAndQueue+0x60>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d120      	bne.n	8004088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004046:	4814      	ldr	r0, [pc, #80]	; (8004098 <prvCheckForValidListAndQueue+0x64>)
 8004048:	f7fd fc28 	bl	800189c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800404c:	4813      	ldr	r0, [pc, #76]	; (800409c <prvCheckForValidListAndQueue+0x68>)
 800404e:	f7fd fc25 	bl	800189c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004052:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <prvCheckForValidListAndQueue+0x6c>)
 8004054:	4a10      	ldr	r2, [pc, #64]	; (8004098 <prvCheckForValidListAndQueue+0x64>)
 8004056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <prvCheckForValidListAndQueue+0x70>)
 800405a:	4a10      	ldr	r2, [pc, #64]	; (800409c <prvCheckForValidListAndQueue+0x68>)
 800405c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800405e:	2300      	movs	r3, #0
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <prvCheckForValidListAndQueue+0x74>)
 8004064:	4a11      	ldr	r2, [pc, #68]	; (80040ac <prvCheckForValidListAndQueue+0x78>)
 8004066:	2110      	movs	r1, #16
 8004068:	200a      	movs	r0, #10
 800406a:	f7fd fd33 	bl	8001ad4 <xQueueGenericCreateStatic>
 800406e:	4603      	mov	r3, r0
 8004070:	4a08      	ldr	r2, [pc, #32]	; (8004094 <prvCheckForValidListAndQueue+0x60>)
 8004072:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <prvCheckForValidListAndQueue+0x60>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <prvCheckForValidListAndQueue+0x60>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	490b      	ldr	r1, [pc, #44]	; (80040b0 <prvCheckForValidListAndQueue+0x7c>)
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fc44 	bl	8002910 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004088:	f000 f974 	bl	8004374 <vPortExitCritical>
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000c68 	.word	0x20000c68
 8004098:	20000c38 	.word	0x20000c38
 800409c:	20000c4c 	.word	0x20000c4c
 80040a0:	20000c60 	.word	0x20000c60
 80040a4:	20000c64 	.word	0x20000c64
 80040a8:	20000d14 	.word	0x20000d14
 80040ac:	20000c74 	.word	0x20000c74
 80040b0:	080049e8 	.word	0x080049e8

080040b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b04      	subs	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3b04      	subs	r3, #4
 80040d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f023 0201 	bic.w	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b04      	subs	r3, #4
 80040e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040e4:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <pxPortInitialiseStack+0x64>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3b14      	subs	r3, #20
 80040ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3b04      	subs	r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f06f 0202 	mvn.w	r2, #2
 8004102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b20      	subs	r3, #32
 8004108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800410a:	68fb      	ldr	r3, [r7, #12]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	0800411d 	.word	0x0800411d

0800411c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <prvTaskExitError+0x54>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d00a      	beq.n	8004146 <prvTaskExitError+0x2a>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	60fb      	str	r3, [r7, #12]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <prvTaskExitError+0x28>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60bb      	str	r3, [r7, #8]
}
 8004158:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800415a:	bf00      	nop
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0fc      	beq.n	800415c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	2000000c 	.word	0x2000000c
	...

08004180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <pxCurrentTCBConst2>)
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6808      	ldr	r0, [r1, #0]
 8004186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418a:	f380 8809 	msr	PSP, r0
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8811 	msr	BASEPRI, r0
 800419a:	4770      	bx	lr
 800419c:	f3af 8000 	nop.w

080041a0 <pxCurrentTCBConst2>:
 80041a0:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop

080041a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041a8:	4808      	ldr	r0, [pc, #32]	; (80041cc <prvPortStartFirstTask+0x24>)
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f380 8808 	msr	MSP, r0
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8814 	msr	CONTROL, r0
 80041ba:	b662      	cpsie	i
 80041bc:	b661      	cpsie	f
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	df00      	svc	0
 80041c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ca:	bf00      	nop
 80041cc:	e000ed08 	.word	0xe000ed08

080041d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041d6:	4b46      	ldr	r3, [pc, #280]	; (80042f0 <xPortStartScheduler+0x120>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a46      	ldr	r2, [pc, #280]	; (80042f4 <xPortStartScheduler+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10a      	bne.n	80041f6 <xPortStartScheduler+0x26>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	613b      	str	r3, [r7, #16]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041f6:	4b3e      	ldr	r3, [pc, #248]	; (80042f0 <xPortStartScheduler+0x120>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3f      	ldr	r2, [pc, #252]	; (80042f8 <xPortStartScheduler+0x128>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10a      	bne.n	8004216 <xPortStartScheduler+0x46>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <xPortStartScheduler+0x12c>)
 8004218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	22ff      	movs	r2, #255	; 0xff
 8004226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b31      	ldr	r3, [pc, #196]	; (8004300 <xPortStartScheduler+0x130>)
 800423c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <xPortStartScheduler+0x134>)
 8004240:	2207      	movs	r2, #7
 8004242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004244:	e009      	b.n	800425a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004246:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <xPortStartScheduler+0x134>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3b01      	subs	r3, #1
 800424c:	4a2d      	ldr	r2, [pc, #180]	; (8004304 <xPortStartScheduler+0x134>)
 800424e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d0ef      	beq.n	8004246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <xPortStartScheduler+0x134>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1c3 0307 	rsb	r3, r3, #7
 800426e:	2b04      	cmp	r3, #4
 8004270:	d00a      	beq.n	8004288 <xPortStartScheduler+0xb8>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60bb      	str	r3, [r7, #8]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004288:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <xPortStartScheduler+0x134>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <xPortStartScheduler+0x134>)
 8004290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004292:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <xPortStartScheduler+0x134>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <xPortStartScheduler+0x134>)
 800429c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <xPortStartScheduler+0x138>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <xPortStartScheduler+0x138>)
 80042ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <xPortStartScheduler+0x138>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a14      	ldr	r2, [pc, #80]	; (8004308 <xPortStartScheduler+0x138>)
 80042b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042be:	f000 f8dd 	bl	800447c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <xPortStartScheduler+0x13c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042c8:	f000 f8fc 	bl	80044c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <xPortStartScheduler+0x140>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <xPortStartScheduler+0x140>)
 80042d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042d8:	f7ff ff66 	bl	80041a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042dc:	f7fe ff52 	bl	8003184 <vTaskSwitchContext>
	prvTaskExitError();
 80042e0:	f7ff ff1c 	bl	800411c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	e000ed00 	.word	0xe000ed00
 80042f4:	410fc271 	.word	0x410fc271
 80042f8:	410fc270 	.word	0x410fc270
 80042fc:	e000e400 	.word	0xe000e400
 8004300:	20000d64 	.word	0x20000d64
 8004304:	20000d68 	.word	0x20000d68
 8004308:	e000ed20 	.word	0xe000ed20
 800430c:	2000000c 	.word	0x2000000c
 8004310:	e000ef34 	.word	0xe000ef34

08004314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	607b      	str	r3, [r7, #4]
}
 800432c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <vPortEnterCritical+0x58>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	4a0d      	ldr	r2, [pc, #52]	; (800436c <vPortEnterCritical+0x58>)
 8004336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <vPortEnterCritical+0x58>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10f      	bne.n	8004360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <vPortEnterCritical+0x5c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <vPortEnterCritical+0x4c>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	603b      	str	r3, [r7, #0]
}
 800435c:	bf00      	nop
 800435e:	e7fe      	b.n	800435e <vPortEnterCritical+0x4a>
	}
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	2000000c 	.word	0x2000000c
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <vPortExitCritical+0x50>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <vPortExitCritical+0x24>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	607b      	str	r3, [r7, #4]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <vPortExitCritical+0x50>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3b01      	subs	r3, #1
 800439e:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <vPortExitCritical+0x50>)
 80043a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <vPortExitCritical+0x50>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <vPortExitCritical+0x42>
 80043aa:	2300      	movs	r3, #0
 80043ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f383 8811 	msr	BASEPRI, r3
}
 80043b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000000c 	.word	0x2000000c
	...

080043d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043d0:	f3ef 8009 	mrs	r0, PSP
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <pxCurrentTCBConst>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f01e 0f10 	tst.w	lr, #16
 80043e0:	bf08      	it	eq
 80043e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ea:	6010      	str	r0, [r2, #0]
 80043ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043f4:	f380 8811 	msr	BASEPRI, r0
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f7fe fec0 	bl	8003184 <vTaskSwitchContext>
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f380 8811 	msr	BASEPRI, r0
 800440c:	bc09      	pop	{r0, r3}
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	6808      	ldr	r0, [r1, #0]
 8004412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004416:	f01e 0f10 	tst.w	lr, #16
 800441a:	bf08      	it	eq
 800441c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004420:	f380 8809 	msr	PSP, r0
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst>:
 8004430:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	607b      	str	r3, [r7, #4]
}
 8004450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004452:	f7fe fddd 	bl	8003010 <xTaskIncrementTick>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <xPortSysTickHandler+0x40>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	2300      	movs	r3, #0
 8004466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f383 8811 	msr	BASEPRI, r3
}
 800446e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <vPortSetupTimerInterrupt+0x38>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <vPortSetupTimerInterrupt+0x3c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <vPortSetupTimerInterrupt+0x40>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <vPortSetupTimerInterrupt+0x44>)
 800449a:	3b01      	subs	r3, #1
 800449c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e010 	.word	0xe000e010
 80044b4:	e000e018 	.word	0xe000e018
 80044b8:	20000000 	.word	0x20000000
 80044bc:	10624dd3 	.word	0x10624dd3
 80044c0:	e000e014 	.word	0xe000e014

080044c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044d4 <vPortEnableVFP+0x10>
 80044c8:	6801      	ldr	r1, [r0, #0]
 80044ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ce:	6001      	str	r1, [r0, #0]
 80044d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044d2:	bf00      	nop
 80044d4:	e000ed88 	.word	0xe000ed88

080044d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044de:	f3ef 8305 	mrs	r3, IPSR
 80044e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	d914      	bls.n	8004514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <vPortValidateInterruptPriority+0x70>)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044f4:	4b15      	ldr	r3, [pc, #84]	; (800454c <vPortValidateInterruptPriority+0x74>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	7afa      	ldrb	r2, [r7, #11]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d20a      	bcs.n	8004514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
}
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <vPortValidateInterruptPriority+0x78>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800451c:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <vPortValidateInterruptPriority+0x7c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d90a      	bls.n	800453a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	603b      	str	r3, [r7, #0]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <vPortValidateInterruptPriority+0x60>
	}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	e000e3f0 	.word	0xe000e3f0
 800454c:	20000d64 	.word	0x20000d64
 8004550:	e000ed0c 	.word	0xe000ed0c
 8004554:	20000d68 	.word	0x20000d68

08004558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004564:	f7fe fc98 	bl	8002e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004568:	4b5b      	ldr	r3, [pc, #364]	; (80046d8 <pvPortMalloc+0x180>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004570:	f000 f920 	bl	80047b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004574:	4b59      	ldr	r3, [pc, #356]	; (80046dc <pvPortMalloc+0x184>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 8093 	bne.w	80046a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01d      	beq.n	80045c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004588:	2208      	movs	r2, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	2b00      	cmp	r3, #0
 8004598:	d014      	beq.n	80045c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f023 0307 	bic.w	r3, r3, #7
 80045a0:	3308      	adds	r3, #8
 80045a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <pvPortMalloc+0x6c>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	617b      	str	r3, [r7, #20]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d06e      	beq.n	80046a8 <pvPortMalloc+0x150>
 80045ca:	4b45      	ldr	r3, [pc, #276]	; (80046e0 <pvPortMalloc+0x188>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d869      	bhi.n	80046a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045d4:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <pvPortMalloc+0x18c>)
 80045d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045d8:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <pvPortMalloc+0x18c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045de:	e004      	b.n	80045ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d903      	bls.n	80045fc <pvPortMalloc+0xa4>
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f1      	bne.n	80045e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <pvPortMalloc+0x180>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004602:	429a      	cmp	r2, r3
 8004604:	d050      	beq.n	80046a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2208      	movs	r2, #8
 800460c:	4413      	add	r3, r2
 800460e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad2      	subs	r2, r2, r3
 8004620:	2308      	movs	r3, #8
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	429a      	cmp	r2, r3
 8004626:	d91f      	bls.n	8004668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <pvPortMalloc+0xf8>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	613b      	str	r3, [r7, #16]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad2      	subs	r2, r2, r3
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004662:	69b8      	ldr	r0, [r7, #24]
 8004664:	f000 f908 	bl	8004878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <pvPortMalloc+0x188>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	4a1b      	ldr	r2, [pc, #108]	; (80046e0 <pvPortMalloc+0x188>)
 8004674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004676:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <pvPortMalloc+0x188>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <pvPortMalloc+0x190>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d203      	bcs.n	800468a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <pvPortMalloc+0x188>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <pvPortMalloc+0x190>)
 8004688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <pvPortMalloc+0x184>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	431a      	orrs	r2, r3
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <pvPortMalloc+0x194>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	4a11      	ldr	r2, [pc, #68]	; (80046ec <pvPortMalloc+0x194>)
 80046a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046a8:	f7fe fc04 	bl	8002eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <pvPortMalloc+0x174>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60fb      	str	r3, [r7, #12]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <pvPortMalloc+0x172>
	return pvReturn;
 80046cc:	69fb      	ldr	r3, [r7, #28]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3728      	adds	r7, #40	; 0x28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20004974 	.word	0x20004974
 80046dc:	20004988 	.word	0x20004988
 80046e0:	20004978 	.word	0x20004978
 80046e4:	2000496c 	.word	0x2000496c
 80046e8:	2000497c 	.word	0x2000497c
 80046ec:	20004980 	.word	0x20004980

080046f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d04d      	beq.n	800479e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004702:	2308      	movs	r3, #8
 8004704:	425b      	negs	r3, r3
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <vPortFree+0xb8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <vPortFree+0x44>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	60fb      	str	r3, [r7, #12]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <vPortFree+0x62>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	60bb      	str	r3, [r7, #8]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <vPortFree+0xb8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01e      	beq.n	800479e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d11a      	bne.n	800479e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <vPortFree+0xb8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	43db      	mvns	r3, r3
 8004772:	401a      	ands	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004778:	f7fe fb8e 	bl	8002e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <vPortFree+0xbc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4413      	add	r3, r2
 8004786:	4a09      	ldr	r2, [pc, #36]	; (80047ac <vPortFree+0xbc>)
 8004788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800478a:	6938      	ldr	r0, [r7, #16]
 800478c:	f000 f874 	bl	8004878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <vPortFree+0xc0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <vPortFree+0xc0>)
 8004798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800479a:	f7fe fb8b 	bl	8002eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20004988 	.word	0x20004988
 80047ac:	20004978 	.word	0x20004978
 80047b0:	20004984 	.word	0x20004984

080047b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <prvHeapInit+0xac>)
 80047c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3307      	adds	r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0307 	bic.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	4a1f      	ldr	r2, [pc, #124]	; (8004860 <prvHeapInit+0xac>)
 80047e4:	4413      	add	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <prvHeapInit+0xb0>)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047f2:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <prvHeapInit+0xb0>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4413      	add	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004800:	2208      	movs	r2, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a15      	ldr	r2, [pc, #84]	; (8004868 <prvHeapInit+0xb4>)
 8004814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <prvHeapInit+0xb4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <prvHeapInit+0xb4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <prvHeapInit+0xb4>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a0a      	ldr	r2, [pc, #40]	; (800486c <prvHeapInit+0xb8>)
 8004842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <prvHeapInit+0xbc>)
 800484a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <prvHeapInit+0xc0>)
 800484e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000d6c 	.word	0x20000d6c
 8004864:	2000496c 	.word	0x2000496c
 8004868:	20004974 	.word	0x20004974
 800486c:	2000497c 	.word	0x2000497c
 8004870:	20004978 	.word	0x20004978
 8004874:	20004988 	.word	0x20004988

08004878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004880:	4b28      	ldr	r3, [pc, #160]	; (8004924 <prvInsertBlockIntoFreeList+0xac>)
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e002      	b.n	800488c <prvInsertBlockIntoFreeList+0x14>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d8f7      	bhi.n	8004886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	4413      	add	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d108      	bne.n	80048ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	441a      	add	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	441a      	add	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d118      	bne.n	8004900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <prvInsertBlockIntoFreeList+0xb0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d00d      	beq.n	80048f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	441a      	add	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e008      	b.n	8004908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048f6:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <prvInsertBlockIntoFreeList+0xb0>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e003      	b.n	8004908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d002      	beq.n	8004916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2000496c 	.word	0x2000496c
 8004928:	20004974 	.word	0x20004974

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f000 f82e 	bl	80049a0 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	08004a60 	.word	0x08004a60
 8004968:	08004a60 	.word	0x08004a60
 800496c:	08004a60 	.word	0x08004a60
 8004970:	08004a64 	.word	0x08004a64

08004974 <memcpy>:
 8004974:	440a      	add	r2, r1
 8004976:	4291      	cmp	r1, r2
 8004978:	f100 33ff 	add.w	r3, r0, #4294967295
 800497c:	d100      	bne.n	8004980 <memcpy+0xc>
 800497e:	4770      	bx	lr
 8004980:	b510      	push	{r4, lr}
 8004982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800498a:	4291      	cmp	r1, r2
 800498c:	d1f9      	bne.n	8004982 <memcpy+0xe>
 800498e:	bd10      	pop	{r4, pc}

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <_init>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr

080049ac <_fini>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	bf00      	nop
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr
