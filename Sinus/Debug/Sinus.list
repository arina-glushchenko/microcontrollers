
Sinus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004c58  08004c58  00014c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e40  08004e40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e48  08004e48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a690  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001864  00000000  00000000  0002a6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad8  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a10  00000000  00000000  0002ca08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002421c  00000000  00000000  0002d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd5c  00000000  00000000  00051634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3657  00000000  00000000  0005d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001409e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003124  00000000  00000000  00140a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c3c 	.word	0x08004c3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08004c3c 	.word	0x08004c3c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b974 	b.w	8000e2c <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468e      	mov	lr, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14d      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4694      	mov	ip, r2
 8000b6e:	d969      	bls.n	8000c44 <__udivmoddi4+0xe8>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b152      	cbz	r2, 8000b8c <__udivmoddi4+0x30>
 8000b76:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7a:	f1c2 0120 	rsb	r1, r2, #32
 8000b7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b86:	ea41 0e03 	orr.w	lr, r1, r3
 8000b8a:	4094      	lsls	r4, r2
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	0c21      	lsrs	r1, r4, #16
 8000b92:	fbbe f6f8 	udiv	r6, lr, r8
 8000b96:	fa1f f78c 	uxth.w	r7, ip
 8000b9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ba2:	fb06 f107 	mul.w	r1, r6, r7
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bb2:	f080 811f 	bcs.w	8000df4 <__udivmoddi4+0x298>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 811c 	bls.w	8000df4 <__udivmoddi4+0x298>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 f707 	mul.w	r7, r0, r7
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x92>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be0:	f080 810a 	bcs.w	8000df8 <__udivmoddi4+0x29c>
 8000be4:	42a7      	cmp	r7, r4
 8000be6:	f240 8107 	bls.w	8000df8 <__udivmoddi4+0x29c>
 8000bea:	4464      	add	r4, ip
 8000bec:	3802      	subs	r0, #2
 8000bee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf2:	1be4      	subs	r4, r4, r7
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	b11d      	cbz	r5, 8000c00 <__udivmoddi4+0xa4>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0xc2>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	f000 80ef 	beq.w	8000dee <__udivmoddi4+0x292>
 8000c10:	2600      	movs	r6, #0
 8000c12:	e9c5 0100 	strd	r0, r1, [r5]
 8000c16:	4630      	mov	r0, r6
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fab3 f683 	clz	r6, r3
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d14a      	bne.n	8000cbc <__udivmoddi4+0x160>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d302      	bcc.n	8000c30 <__udivmoddi4+0xd4>
 8000c2a:	4282      	cmp	r2, r0
 8000c2c:	f200 80f9 	bhi.w	8000e22 <__udivmoddi4+0x2c6>
 8000c30:	1a84      	subs	r4, r0, r2
 8000c32:	eb61 0303 	sbc.w	r3, r1, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	469e      	mov	lr, r3
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d0e0      	beq.n	8000c00 <__udivmoddi4+0xa4>
 8000c3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c42:	e7dd      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000c44:	b902      	cbnz	r2, 8000c48 <__udivmoddi4+0xec>
 8000c46:	deff      	udf	#255	; 0xff
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f040 8092 	bne.w	8000d76 <__udivmoddi4+0x21a>
 8000c52:	eba1 010c 	sub.w	r1, r1, ip
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f fe8c 	uxth.w	lr, ip
 8000c5e:	2601      	movs	r6, #1
 8000c60:	0c20      	lsrs	r0, r4, #16
 8000c62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c66:	fb07 1113 	mls	r1, r7, r3, r1
 8000c6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6e:	fb0e f003 	mul.w	r0, lr, r3
 8000c72:	4288      	cmp	r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x12c>
 8000c76:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x12a>
 8000c80:	4288      	cmp	r0, r1
 8000c82:	f200 80cb 	bhi.w	8000e1c <__udivmoddi4+0x2c0>
 8000c86:	4643      	mov	r3, r8
 8000c88:	1a09      	subs	r1, r1, r0
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c90:	fb07 1110 	mls	r1, r7, r0, r1
 8000c94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c98:	fb0e fe00 	mul.w	lr, lr, r0
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x156>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x154>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f200 80bb 	bhi.w	8000e26 <__udivmoddi4+0x2ca>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x9a>
 8000cbc:	f1c6 0720 	rsb	r7, r6, #32
 8000cc0:	40b3      	lsls	r3, r6
 8000cc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cca:	fa20 f407 	lsr.w	r4, r0, r7
 8000cce:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	40f9      	lsrs	r1, r7
 8000cd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cda:	fa00 f306 	lsl.w	r3, r0, r6
 8000cde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ce2:	0c20      	lsrs	r0, r4, #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0x1b8>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d04:	f080 8088 	bcs.w	8000e18 <__udivmoddi4+0x2bc>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f240 8085 	bls.w	8000e18 <__udivmoddi4+0x2bc>
 8000d0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d28:	458e      	cmp	lr, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1e2>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d34:	d26c      	bcs.n	8000e10 <__udivmoddi4+0x2b4>
 8000d36:	458e      	cmp	lr, r1
 8000d38:	d96a      	bls.n	8000e10 <__udivmoddi4+0x2b4>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d42:	fba0 9402 	umull	r9, r4, r0, r2
 8000d46:	eba1 010e 	sub.w	r1, r1, lr
 8000d4a:	42a1      	cmp	r1, r4
 8000d4c:	46c8      	mov	r8, r9
 8000d4e:	46a6      	mov	lr, r4
 8000d50:	d356      	bcc.n	8000e00 <__udivmoddi4+0x2a4>
 8000d52:	d053      	beq.n	8000dfc <__udivmoddi4+0x2a0>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x212>
 8000d56:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d62:	fa22 f306 	lsr.w	r3, r2, r6
 8000d66:	40f1      	lsrs	r1, r6
 8000d68:	431f      	orrs	r7, r3
 8000d6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1c2 0320 	rsb	r3, r2, #32
 8000d7a:	40d8      	lsrs	r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa21 f303 	lsr.w	r3, r1, r3
 8000d84:	4091      	lsls	r1, r2
 8000d86:	4301      	orrs	r1, r0
 8000d88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8c:	fa1f fe8c 	uxth.w	lr, ip
 8000d90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d94:	fb07 3610 	mls	r6, r7, r0, r3
 8000d98:	0c0b      	lsrs	r3, r1, #16
 8000d9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000da2:	429e      	cmp	r6, r3
 8000da4:	fa04 f402 	lsl.w	r4, r4, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x260>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db2:	d22f      	bcs.n	8000e14 <__udivmoddi4+0x2b8>
 8000db4:	429e      	cmp	r6, r3
 8000db6:	d92d      	bls.n	8000e14 <__udivmoddi4+0x2b8>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	b289      	uxth	r1, r1
 8000dc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x28a>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ddc:	d216      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d914      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000de2:	3e02      	subs	r6, #2
 8000de4:	4461      	add	r1, ip
 8000de6:	1ac9      	subs	r1, r1, r3
 8000de8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dec:	e738      	b.n	8000c60 <__udivmoddi4+0x104>
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e705      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e3      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6f8      	b.n	8000bee <__udivmoddi4+0x92>
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	d2a9      	bcs.n	8000d54 <__udivmoddi4+0x1f8>
 8000e00:	ebb9 0802 	subs.w	r8, r9, r2
 8000e04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7a3      	b.n	8000d54 <__udivmoddi4+0x1f8>
 8000e0c:	4646      	mov	r6, r8
 8000e0e:	e7ea      	b.n	8000de6 <__udivmoddi4+0x28a>
 8000e10:	4620      	mov	r0, r4
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e2>
 8000e14:	4640      	mov	r0, r8
 8000e16:	e7d1      	b.n	8000dbc <__udivmoddi4+0x260>
 8000e18:	46d0      	mov	r8, sl
 8000e1a:	e77b      	b.n	8000d14 <__udivmoddi4+0x1b8>
 8000e1c:	3b02      	subs	r3, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	e732      	b.n	8000c88 <__udivmoddi4+0x12c>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e709      	b.n	8000c3a <__udivmoddi4+0xde>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e742      	b.n	8000cb2 <__udivmoddi4+0x156>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init(){
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOGEN|RCC_AHB1ENR_GPIODEN);
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <init+0x88>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <init+0x88>)
 8000e3a:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <init+0x88>)
 8000e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e44:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <init+0x88>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4a:	6453      	str	r3, [r2, #68]	; 0x44

	GPIOG->MODER &= ~GPIO_MODER_MODER14_1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <init+0x8c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <init+0x8c>)
 8000e52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000e56:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~GPIO_MODER_MODER14_0;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <init+0x8c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <init+0x8c>)
 8000e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e62:	6013      	str	r3, [r2, #0]

    GPIOG->MODER &= ~GPIO_MODER_MODER13_1;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <init+0x8c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <init+0x8c>)
 8000e6a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000e6e:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~GPIO_MODER_MODER13_0;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <init+0x8c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <init+0x8c>)
 8000e76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e7a:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &= ~GPIO_MODER_MODER13_0;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <init+0x90>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <init+0x90>)
 8000e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e86:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER13_1;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <init+0x90>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <init+0x90>)
 8000e8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e92:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &= ~GPIO_MODER_MODER12_0;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <init+0x90>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <init+0x90>)
 8000e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e9e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER12_1;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <init+0x90>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <init+0x90>)
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	6013      	str	r3, [r2, #0]

}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40021800 	.word	0x40021800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <initTIM4>:

void initTIM4(){
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <initTIM4+0x34>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <initTIM4+0x34>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->CR1 |= TIM_CR1_CEN;  // Counter enable
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <initTIM4+0x38>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a08      	ldr	r2, [pc, #32]	; (8000efc <initTIM4+0x38>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
	TIM4->CCER |= (TIM_CCER_CC3E | TIM_CCER_CC2E);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <initTIM4+0x38>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <initTIM4+0x38>)
 8000ee6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8000eea:	6213      	str	r3, [r2, #32]

}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40000800 	.word	0x40000800

08000f00 <initTIM3>:

void initTIM3(){
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <initTIM3+0x34>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <initTIM3+0x34>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 |= TIM_CR1_CEN;  // Counter enable
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <initTIM3+0x38>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <initTIM3+0x38>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6013      	str	r3, [r2, #0]
	TIM3->CCER |= (TIM_CCER_CC2E | TIM_CCER_CC1E);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <initTIM3+0x38>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <initTIM3+0x38>)
 8000f22:	f043 0311 	orr.w	r3, r3, #17
 8000f26:	6213      	str	r3, [r2, #32]

}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	00000000 	.word	0x00000000

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b0a3      	sub	sp, #140	; 0x8c
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fcb1 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f933 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 faf7 	bl	8001540 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f52:	f000 f99f 	bl	8001294 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f56:	f000 f9f1 	bl	800133c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f5a:	f000 fa71 	bl	8001440 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000f5e:	f7ff ff67 	bl	8000e30 <init>
  initTIM4();
 8000f62:	f7ff ffaf 	bl	8000ec4 <initTIM4>
  initTIM3();
 8000f66:	f7ff ffcb 	bl	8000f00 <initTIM3>

  ADC_HandleTypeDef hadc1;
  hadc1.Instance = ADC1;
 8000f6a:	4b87      	ldr	r3, [pc, #540]	; (8001188 <main+0x248>)
 8000f6c:	623b      	str	r3, [r7, #32]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_ADC_Init(&hadc1);
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fd2e 	bl	80019d8 <HAL_ADC_Init>

  ADC_ChannelConfTypeDef sConfig;
  sConfig.Channel = ADC_CHANNEL_1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
  sConfig.Rank = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f84:	2303      	movs	r3, #3
 8000f86:	61bb      	str	r3, [r7, #24]

  ADC_ChannelConfTypeDef sConfig1;
  sConfig1.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f88:	4b80      	ldr	r3, [pc, #512]	; (800118c <main+0x24c>)
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfig1.Rank = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
  sConfig1.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f90:	2303      	movs	r3, #3
 8000f92:	60bb      	str	r3, [r7, #8]

  double intensity = 0;
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  double sin_val = 0;
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_ConfigChannel(&hadc1, &sConfig1);
 8000fac:	463a      	mov	r2, r7
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 febd 	bl	8001d34 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fd4e 	bl	8001a60 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fe19 	bl	8001c04 <HAL_ADC_PollForConversion>

	  ReadValue = HAL_ADC_GetValue(&hadc1);
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fe9f 	bl	8001d1a <HAL_ADC_GetValue>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  temperature = (((ReadValue*2.92)/4096 - V25) / (AVGSLOPE))*1000 + 25;
 8000fe2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa54 	bl	8000494 <__aeabi_i2d>
 8000fec:	a35c      	add	r3, pc, #368	; (adr r3, 8001160 <main+0x220>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fab9 	bl	8000568 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b63      	ldr	r3, [pc, #396]	; (8001190 <main+0x250>)
 8001004:	f7ff fbda 	bl	80007bc <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	a355      	add	r3, pc, #340	; (adr r3, 8001168 <main+0x228>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff f8ef 	bl	80001f8 <__aeabi_dsub>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b5b      	ldr	r3, [pc, #364]	; (8001194 <main+0x254>)
 8001028:	f7ff fbc8 	bl	80007bc <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b57      	ldr	r3, [pc, #348]	; (8001198 <main+0x258>)
 800103a:	f7ff fa95 	bl	8000568 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b54      	ldr	r3, [pc, #336]	; (800119c <main+0x25c>)
 800104c:	f7ff f8d6 	bl	80001fc <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	  temperature = (temperature + 40)*100 / 165;
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b50      	ldr	r3, [pc, #320]	; (80011a0 <main+0x260>)
 800105e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001062:	f7ff f8cb 	bl	80001fc <__adddf3>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b4c      	ldr	r3, [pc, #304]	; (80011a4 <main+0x264>)
 8001074:	f7ff fa78 	bl	8000568 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	a33b      	add	r3, pc, #236	; (adr r3, 8001170 <main+0x230>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	f7ff fb99 	bl	80007bc <__aeabi_ddiv>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	  TIM3->CCR1 = temperature;
 8001092:	4c45      	ldr	r4, [pc, #276]	; (80011a8 <main+0x268>)
 8001094:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001098:	f7ff fd28 	bl	8000aec <__aeabi_d2uiz>
 800109c:	4603      	mov	r3, r0
 800109e:	6363      	str	r3, [r4, #52]	; 0x34

	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80010a0:	f107 0210 	add.w	r2, r7, #16
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fe42 	bl	8001d34 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fcd3 	bl	8001a60 <HAL_ADC_Start>
	  intensity += (PI / 100);
 80010ba:	a32f      	add	r3, pc, #188	; (adr r3, 8001178 <main+0x238>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80010c4:	f7ff f89a 	bl	80001fc <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	  if (intensity == 2 * PI) intensity = 0;
 80010d0:	a32b      	add	r3, pc, #172	; (adr r3, 8001180 <main+0x240>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80010da:	f7ff fcad 	bl	8000a38 <__aeabi_dcmpeq>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <main+0x1b0>
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	  sin_val = sin(intensity) * 20 +20;
 80010f0:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 80010f4:	f002 fd58 	bl	8003ba8 <sin>
 80010f8:	ec51 0b10 	vmov	r0, r1, d0
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <main+0x26c>)
 8001102:	f7ff fa31 	bl	8000568 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <main+0x26c>)
 8001114:	f7ff f872 	bl	80001fc <__adddf3>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	  TIM4->CCR2 = sin_val;
 8001120:	4c23      	ldr	r4, [pc, #140]	; (80011b0 <main+0x270>)
 8001122:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001126:	f7ff fce1 	bl	8000aec <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	63a3      	str	r3, [r4, #56]	; 0x38
	  HAL_Delay(10);
 800112e:	200a      	movs	r0, #10
 8001130:	f000 fc2e 	bl	8001990 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1,20);
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	2114      	movs	r1, #20
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fd62 	bl	8001c04 <HAL_ADC_PollForConversion>
	  ReadValue = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  ReadValue = HAL_ADC_GetValue(&hadc1);
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fde5 	bl	8001d1a <HAL_ADC_GetValue>
 8001150:	4603      	mov	r3, r0
 8001152:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  TIM3->CCR2 = ReadValue;
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <main+0x268>)
 8001158:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800115c:	6393      	str	r3, [r2, #56]	; 0x38
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig1);
 800115e:	e725      	b.n	8000fac <main+0x6c>
 8001160:	f5c28f5c 	.word	0xf5c28f5c
 8001164:	40075c28 	.word	0x40075c28
 8001168:	851eb852 	.word	0x851eb852
 800116c:	3fe851eb 	.word	0x3fe851eb
 8001170:	00000000 	.word	0x00000000
 8001174:	4064a000 	.word	0x4064a000
 8001178:	920a2edc 	.word	0x920a2edc
 800117c:	3fa015bf 	.word	0x3fa015bf
 8001180:	542fe938 	.word	0x542fe938
 8001184:	401921fb 	.word	0x401921fb
 8001188:	40012000 	.word	0x40012000
 800118c:	10000012 	.word	0x10000012
 8001190:	40b00000 	.word	0x40b00000
 8001194:	40040000 	.word	0x40040000
 8001198:	408f4000 	.word	0x408f4000
 800119c:	40390000 	.word	0x40390000
 80011a0:	40440000 	.word	0x40440000
 80011a4:	40590000 	.word	0x40590000
 80011a8:	40000400 	.word	0x40000400
 80011ac:	40340000 	.word	0x40340000
 80011b0:	40000800 	.word	0x40000800

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	; 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2230      	movs	r2, #48	; 0x30
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fce6 	bl	8003b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <SystemClock_Config+0xd8>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a2a      	ldr	r2, [pc, #168]	; (800128c <SystemClock_Config+0xd8>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <SystemClock_Config+0xd8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <SystemClock_Config+0xdc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a24      	ldr	r2, [pc, #144]	; (8001290 <SystemClock_Config+0xdc>)
 80011fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <SystemClock_Config+0xdc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001224:	2308      	movs	r3, #8
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001228:	23b4      	movs	r3, #180	; 0xb4
 800122a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fa8b 	bl	8002754 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001244:	f000 f9c0 	bl	80015c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001248:	f001 fa34 	bl	80026b4 <HAL_PWREx_EnableOverDrive>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001252:	f000 f9b9 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2302      	movs	r3, #2
 800125c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001262:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001266:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2105      	movs	r1, #5
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fce5 	bl	8002c44 <HAL_RCC_ClockConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001280:	f000 f9a2 	bl	80015c8 <Error_Handler>
  }
}
 8001284:	bf00      	nop
 8001286:	3750      	adds	r7, #80	; 0x50
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40007000 	.word	0x40007000

08001294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <MX_ADC1_Init+0x98>)
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <MX_ADC1_Init+0x9c>)
 80012aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <MX_ADC1_Init+0x98>)
 80012ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <MX_ADC1_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <MX_ADC1_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_ADC1_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_ADC1_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_ADC1_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_ADC1_Init+0x98>)
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <MX_ADC1_Init+0xa0>)
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_ADC1_Init+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_ADC1_Init+0x98>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_ADC1_Init+0x98>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_ADC1_Init+0x98>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_ADC1_Init+0x98>)
 80012f6:	f000 fb6f 	bl	80019d8 <HAL_ADC_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001300:	f000 f962 	bl	80015c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_ADC1_Init+0xa4>)
 8001306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800130c:	2303      	movs	r3, #3
 800130e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_ADC1_Init+0x98>)
 8001316:	f000 fd0d 	bl	8001d34 <HAL_ADC_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001320:	f000 f952 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000028 	.word	0x20000028
 8001330:	40012000 	.word	0x40012000
 8001334:	0f000001 	.word	0x0f000001
 8001338:	10000012 	.word	0x10000012

0800133c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <MX_TIM3_Init+0xfc>)
 800136e:	4a33      	ldr	r2, [pc, #204]	; (800143c <MX_TIM3_Init+0x100>)
 8001370:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000-1;
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_TIM3_Init+0xfc>)
 8001374:	f242 3227 	movw	r2, #8999	; 0x2327
 8001378:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <MX_TIM3_Init+0xfc>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <MX_TIM3_Init+0xfc>)
 8001382:	2263      	movs	r2, #99	; 0x63
 8001384:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <MX_TIM3_Init+0xfc>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_TIM3_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001392:	4829      	ldr	r0, [pc, #164]	; (8001438 <MX_TIM3_Init+0xfc>)
 8001394:	f001 fe42 	bl	800301c <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800139e:	f000 f913 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4822      	ldr	r0, [pc, #136]	; (8001438 <MX_TIM3_Init+0xfc>)
 80013b0:	f001 ff9e 	bl	80032f0 <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013ba:	f000 f905 	bl	80015c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013be:	481e      	ldr	r0, [pc, #120]	; (8001438 <MX_TIM3_Init+0xfc>)
 80013c0:	f001 fe7b 	bl	80030ba <HAL_TIM_PWM_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013ca:	f000 f8fd 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	4619      	mov	r1, r3
 80013dc:	4816      	ldr	r0, [pc, #88]	; (8001438 <MX_TIM3_Init+0xfc>)
 80013de:	f002 fb39 	bl	8003a54 <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013e8:	f000 f8ee 	bl	80015c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	; 0x60
 80013ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_TIM3_Init+0xfc>)
 8001404:	f001 feb2 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800140e:	f000 f8db 	bl	80015c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2204      	movs	r2, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM3_Init+0xfc>)
 800141a:	f001 fea7 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001424:	f000 f8d0 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM3_Init+0xfc>)
 800142a:	f000 f977 	bl	800171c <HAL_TIM_MspPostInit>

}
 800142e:	bf00      	nop
 8001430:	3738      	adds	r7, #56	; 0x38
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000070 	.word	0x20000070
 800143c:	40000400 	.word	0x40000400

08001440 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001470:	4b31      	ldr	r3, [pc, #196]	; (8001538 <MX_TIM4_Init+0xf8>)
 8001472:	4a32      	ldr	r2, [pc, #200]	; (800153c <MX_TIM4_Init+0xfc>)
 8001474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001476:	4b30      	ldr	r3, [pc, #192]	; (8001538 <MX_TIM4_Init+0xf8>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <MX_TIM4_Init+0xf8>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <MX_TIM4_Init+0xf8>)
 8001484:	2263      	movs	r2, #99	; 0x63
 8001486:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <MX_TIM4_Init+0xf8>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <MX_TIM4_Init+0xf8>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001494:	4828      	ldr	r0, [pc, #160]	; (8001538 <MX_TIM4_Init+0xf8>)
 8001496:	f001 fdc1 	bl	800301c <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80014a0:	f000 f892 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4821      	ldr	r0, [pc, #132]	; (8001538 <MX_TIM4_Init+0xf8>)
 80014b2:	f001 ff1d 	bl	80032f0 <HAL_TIM_ConfigClockSource>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80014bc:	f000 f884 	bl	80015c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c0:	481d      	ldr	r0, [pc, #116]	; (8001538 <MX_TIM4_Init+0xf8>)
 80014c2:	f001 fdfa 	bl	80030ba <HAL_TIM_PWM_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80014cc:	f000 f87c 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014d8:	f107 0320 	add.w	r3, r7, #32
 80014dc:	4619      	mov	r1, r3
 80014de:	4816      	ldr	r0, [pc, #88]	; (8001538 <MX_TIM4_Init+0xf8>)
 80014e0:	f002 fab8 	bl	8003a54 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80014ea:	f000 f86d 	bl	80015c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	; 0x60
 80014f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_TIM4_Init+0xf8>)
 8001506:	f001 fe31 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001510:	f000 f85a 	bl	80015c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2204      	movs	r2, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM4_Init+0xf8>)
 800151c:	f001 fe26 	bl	800316c <HAL_TIM_PWM_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001526:	f000 f84f 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM4_Init+0xf8>)
 800152c:	f000 f8f6 	bl	800171c <HAL_TIM_MspPostInit>

}
 8001530:	bf00      	nop
 8001532:	3738      	adds	r7, #56	; 0x38
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200000b8 	.word	0x200000b8
 800153c:	40000800 	.word	0x40000800

08001540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <MX_GPIO_Init+0x84>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <MX_GPIO_Init+0x84>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_GPIO_Init+0x84>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MX_GPIO_Init+0x84>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <MX_GPIO_Init+0x84>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_GPIO_Init+0x84>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_GPIO_Init+0x84>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <MX_GPIO_Init+0x84>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <MX_GPIO_Init+0x84>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_GPIO_Init+0x84>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <MX_GPIO_Init+0x84>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_GPIO_Init+0x84>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <Error_Handler+0x8>
	...

080015d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <HAL_MspInit+0x4c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_MspInit+0x4c>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_ADC_MspInit+0x7c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d127      	bne.n	8001696 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_ADC_MspInit+0x80>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <HAL_ADC_MspInit+0x80>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_ADC_MspInit+0x80>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_ADC_MspInit+0x80>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_ADC_MspInit+0x80>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_ADC_MspInit+0x80>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800167e:	2306      	movs	r3, #6
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001682:	2303      	movs	r3, #3
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_ADC_MspInit+0x84>)
 8001692:	f000 fe63 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40012000 	.word	0x40012000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a15      	ldr	r2, [pc, #84]	; (8001710 <HAL_TIM_Base_MspInit+0x64>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10e      	bne.n	80016dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016da:	e012      	b.n	8001702 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_TIM_Base_MspInit+0x6c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10d      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40000400 	.word	0x40000400
 8001714:	40023800 	.word	0x40023800
 8001718:	40000800 	.word	0x40000800

0800171c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_TIM_MspPostInit+0xb0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d11e      	bne.n	800177c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <HAL_TIM_MspPostInit+0xb4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <HAL_TIM_MspPostInit+0xb4>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_TIM_MspPostInit+0xb4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175a:	23c0      	movs	r3, #192	; 0xc0
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800176a:	2302      	movs	r3, #2
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4817      	ldr	r0, [pc, #92]	; (80017d4 <HAL_TIM_MspPostInit+0xb8>)
 8001776:	f000 fdf1 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800177a:	e023      	b.n	80017c4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <HAL_TIM_MspPostInit+0xbc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d11e      	bne.n	80017c4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_TIM_MspPostInit+0xb4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_TIM_MspPostInit+0xb4>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_TIM_MspPostInit+0xb4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80017a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017b4:	2302      	movs	r3, #2
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4807      	ldr	r0, [pc, #28]	; (80017dc <HAL_TIM_MspPostInit+0xc0>)
 80017c0:	f000 fdcc 	bl	800235c <HAL_GPIO_Init>
}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40000400 	.word	0x40000400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40000800 	.word	0x40000800
 80017dc:	40020c00 	.word	0x40020c00

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 f890 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001890 <LoopFillZerobss+0x12>
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <LoopFillZerobss+0x16>)
 800185e:	490e      	ldr	r1, [pc, #56]	; (8001898 <LoopFillZerobss+0x1a>)
 8001860:	4a0e      	ldr	r2, [pc, #56]	; (800189c <LoopFillZerobss+0x1e>)
 8001862:	2300      	movs	r3, #0
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:
 8001866:	58d4      	ldr	r4, [r2, r3]
 8001868:	50c4      	str	r4, [r0, r3]
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:
 800186c:	18c4      	adds	r4, r0, r3
 800186e:	428c      	cmp	r4, r1
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <LoopFillZerobss+0x22>)
 8001874:	4c0b      	ldr	r4, [pc, #44]	; (80018a4 <LoopFillZerobss+0x26>)
 8001876:	2300      	movs	r3, #0
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:
 800187e:	42a2      	cmp	r2, r4
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>
 8001882:	f7ff ffd7 	bl	8001834 <SystemInit>
 8001886:	f002 f961 	bl	8003b4c <__libc_init_array>
 800188a:	f7ff fb59 	bl	8000f40 <main>
 800188e:	4770      	bx	lr
 8001890:	20030000 	.word	0x20030000
 8001894:	20000000 	.word	0x20000000
 8001898:	2000000c 	.word	0x2000000c
 800189c:	08004e50 	.word	0x08004e50
 80018a0:	2000000c 	.word	0x2000000c
 80018a4:	20000104 	.word	0x20000104

080018a8 <ADC_IRQHandler>:
 80018a8:	e7fe      	b.n	80018a8 <ADC_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <HAL_Init+0x40>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_Init+0x40>)
 80018c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_Init+0x40>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 fd0d 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018da:	200f      	movs	r0, #15
 80018dc:	f000 f808 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e0:	f7ff fe78 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fd17 	bl	8002342 <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f000 fced 	bl	800230a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	; (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	20000008 	.word	0x20000008
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x20>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x24>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <HAL_IncTick+0x24>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008
 8001974:	20000100 	.word	0x20000100

08001978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_GetTick+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000100 	.word	0x20000100

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff ffee 	bl	8001978 <HAL_GetTick>
 800199c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d005      	beq.n	80019b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_Delay+0x44>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019b6:	bf00      	nop
 80019b8:	f7ff ffde 	bl	8001978 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d8f7      	bhi.n	80019b8 <HAL_Delay+0x28>
  {
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008

080019d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e033      	b.n	8001a56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fe14 	bl	8001624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a1e:	f023 0302 	bic.w	r3, r3, #2
 8001a22:	f043 0202 	orr.w	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fab4 	bl	8001f98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
 8001a46:	e001      	b.n	8001a4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Start+0x1a>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e0b2      	b.n	8001be0 <HAL_ADC_Start+0x180>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d018      	beq.n	8001ac2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001aa0:	4b52      	ldr	r3, [pc, #328]	; (8001bec <HAL_ADC_Start+0x18c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	; (8001bf0 <HAL_ADC_Start+0x190>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0c9a      	lsrs	r2, r3, #18
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ab4:	e002      	b.n	8001abc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f9      	bne.n	8001ab6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d17a      	bne.n	8001bc6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001afa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0e:	d106      	bne.n	8001b1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	f023 0206 	bic.w	r2, r3, #6
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b1c:	e002      	b.n	8001b24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_ADC_Start+0x194>)
 8001b2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d12a      	bne.n	8001b9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <HAL_ADC_Start+0x198>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d015      	beq.n	8001b7c <HAL_ADC_Start+0x11c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_ADC_Start+0x19c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d105      	bne.n	8001b66 <HAL_ADC_Start+0x106>
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_ADC_Start+0x194>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a25      	ldr	r2, [pc, #148]	; (8001c00 <HAL_ADC_Start+0x1a0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d136      	bne.n	8001bde <HAL_ADC_Start+0x17e>
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_ADC_Start+0x194>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d130      	bne.n	8001bde <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d129      	bne.n	8001bde <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	e020      	b.n	8001bde <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_ADC_Start+0x198>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d11b      	bne.n	8001bde <HAL_ADC_Start+0x17e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d114      	bne.n	8001bde <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	e00b      	b.n	8001bde <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f043 0210 	orr.w	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	431bde83 	.word	0x431bde83
 8001bf4:	40012300 	.word	0x40012300
 8001bf8:	40012000 	.word	0x40012000
 8001bfc:	40012100 	.word	0x40012100
 8001c00:	40012200 	.word	0x40012200

08001c04 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c20:	d113      	bne.n	8001c4a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c30:	d10b      	bne.n	8001c4a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e063      	b.n	8001d12 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c4a:	f7ff fe95 	bl	8001978 <HAL_GetTick>
 8001c4e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c50:	e021      	b.n	8001c96 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d01d      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_ADC_PollForConversion+0x6c>
 8001c60:	f7ff fe8a 	bl	8001978 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d212      	bcs.n	8001c96 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d00b      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f043 0204 	orr.w	r2, r3, #4
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e03d      	b.n	8001d12 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d1d6      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0212 	mvn.w	r2, #18
 8001cac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d123      	bne.n	8001d10 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11f      	bne.n	8001d10 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d111      	bne.n	8001d10 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1c>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e113      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x244>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b09      	cmp	r3, #9
 8001d5e:	d925      	bls.n	8001dac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68d9      	ldr	r1, [r3, #12]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	3b1e      	subs	r3, #30
 8001d76:	2207      	movs	r2, #7
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	400a      	ands	r2, r1
 8001d84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68d9      	ldr	r1, [r3, #12]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	4603      	mov	r3, r0
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4403      	add	r3, r0
 8001d9e:	3b1e      	subs	r3, #30
 8001da0:	409a      	lsls	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	e022      	b.n	8001df2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6919      	ldr	r1, [r3, #16]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	400a      	ands	r2, r1
 8001dce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6919      	ldr	r1, [r3, #16]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4403      	add	r3, r0
 8001de8:	409a      	lsls	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d824      	bhi.n	8001e44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b05      	subs	r3, #5
 8001e0c:	221f      	movs	r2, #31
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	400a      	ands	r2, r1
 8001e1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b05      	subs	r3, #5
 8001e36:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34
 8001e42:	e04c      	b.n	8001ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d824      	bhi.n	8001e96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b23      	subs	r3, #35	; 0x23
 8001e5e:	221f      	movs	r2, #31
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43da      	mvns	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b23      	subs	r3, #35	; 0x23
 8001e88:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
 8001e94:	e023      	b.n	8001ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b41      	subs	r3, #65	; 0x41
 8001ea8:	221f      	movs	r2, #31
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b41      	subs	r3, #65	; 0x41
 8001ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_ADC_ConfigChannel+0x250>)
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <HAL_ADC_ConfigChannel+0x254>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d10f      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1d8>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b12      	cmp	r3, #18
 8001ef2:	d10b      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_ADC_ConfigChannel+0x254>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12b      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x23a>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_ADC_ConfigChannel+0x258>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0x1f4>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b11      	cmp	r3, #17
 8001f26:	d122      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_ADC_ConfigChannel+0x258>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d111      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_ADC_ConfigChannel+0x25c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <HAL_ADC_ConfigChannel+0x260>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9a      	lsrs	r2, r3, #18
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f60:	e002      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40012300 	.word	0x40012300
 8001f88:	40012000 	.word	0x40012000
 8001f8c:	10000012 	.word	0x10000012
 8001f90:	20000000 	.word	0x20000000
 8001f94:	431bde83 	.word	0x431bde83

08001f98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa0:	4b79      	ldr	r3, [pc, #484]	; (8002188 <ADC_Init+0x1f0>)
 8001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	021a      	lsls	r2, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6899      	ldr	r1, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <ADC_Init+0x1f4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800203e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6899      	ldr	r1, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	e00f      	b.n	8002096 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002094:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0202 	bic.w	r2, r2, #2
 80020a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7e1b      	ldrb	r3, [r3, #24]
 80020b0:	005a      	lsls	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6859      	ldr	r1, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	3b01      	subs	r3, #1
 80020f0:	035a      	lsls	r2, r3, #13
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	e007      	b.n	800210c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	3b01      	subs	r3, #1
 8002128:	051a      	lsls	r2, r3, #20
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6899      	ldr	r1, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800214e:	025a      	lsls	r2, r3, #9
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	029a      	lsls	r2, r3, #10
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	609a      	str	r2, [r3, #8]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40012300 	.word	0x40012300
 800218c:	0f000001 	.word	0x0f000001

08002190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <__NVIC_GetPriorityGrouping+0x18>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0307 	and.w	r3, r3, #7
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff47 	bl	8002190 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff5c 	bl	80021d8 <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffb0 	bl	80022b0 <SysTick_Config>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e177      	b.n	8002668 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	f040 8166 	bne.w	8002662 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d005      	beq.n	80023ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d130      	bne.n	8002410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0201 	and.w	r2, r3, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b03      	cmp	r3, #3
 800241a:	d017      	beq.n	800244c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d123      	bne.n	80024a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	69b9      	ldr	r1, [r7, #24]
 800249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80c0 	beq.w	8002662 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_GPIO_Init+0x324>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a65      	ldr	r2, [pc, #404]	; (8002680 <HAL_GPIO_Init+0x324>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_GPIO_Init+0x324>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fe:	4a61      	ldr	r2, [pc, #388]	; (8002684 <HAL_GPIO_Init+0x328>)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_GPIO_Init+0x32c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d037      	beq.n	800259a <HAL_GPIO_Init+0x23e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a57      	ldr	r2, [pc, #348]	; (800268c <HAL_GPIO_Init+0x330>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d031      	beq.n	8002596 <HAL_GPIO_Init+0x23a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a56      	ldr	r2, [pc, #344]	; (8002690 <HAL_GPIO_Init+0x334>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02b      	beq.n	8002592 <HAL_GPIO_Init+0x236>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a55      	ldr	r2, [pc, #340]	; (8002694 <HAL_GPIO_Init+0x338>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_GPIO_Init+0x232>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a54      	ldr	r2, [pc, #336]	; (8002698 <HAL_GPIO_Init+0x33c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <HAL_GPIO_Init+0x22e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a53      	ldr	r2, [pc, #332]	; (800269c <HAL_GPIO_Init+0x340>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x22a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_GPIO_Init+0x344>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x226>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a51      	ldr	r2, [pc, #324]	; (80026a4 <HAL_GPIO_Init+0x348>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x222>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a50      	ldr	r2, [pc, #320]	; (80026a8 <HAL_GPIO_Init+0x34c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x21e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4f      	ldr	r2, [pc, #316]	; (80026ac <HAL_GPIO_Init+0x350>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x21a>
 8002572:	2309      	movs	r3, #9
 8002574:	e012      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002576:	230a      	movs	r3, #10
 8002578:	e010      	b.n	800259c <HAL_GPIO_Init+0x240>
 800257a:	2308      	movs	r3, #8
 800257c:	e00e      	b.n	800259c <HAL_GPIO_Init+0x240>
 800257e:	2307      	movs	r3, #7
 8002580:	e00c      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002582:	2306      	movs	r3, #6
 8002584:	e00a      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002586:	2305      	movs	r3, #5
 8002588:	e008      	b.n	800259c <HAL_GPIO_Init+0x240>
 800258a:	2304      	movs	r3, #4
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x240>
 800258e:	2303      	movs	r3, #3
 8002590:	e004      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002592:	2302      	movs	r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x240>
 800259a:	2300      	movs	r3, #0
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f002 0203 	and.w	r2, r2, #3
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4093      	lsls	r3, r2
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ac:	4935      	ldr	r1, [pc, #212]	; (8002684 <HAL_GPIO_Init+0x328>)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_GPIO_Init+0x354>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025de:	4a34      	ldr	r2, [pc, #208]	; (80026b0 <HAL_GPIO_Init+0x354>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e4:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <HAL_GPIO_Init+0x354>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <HAL_GPIO_Init+0x354>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800260e:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <HAL_GPIO_Init+0x354>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002632:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_GPIO_Init+0x354>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_GPIO_Init+0x354>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <HAL_GPIO_Init+0x354>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3301      	adds	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b0f      	cmp	r3, #15
 800266c:	f67f ae84 	bls.w	8002378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	40013800 	.word	0x40013800
 8002688:	40020000 	.word	0x40020000
 800268c:	40020400 	.word	0x40020400
 8002690:	40020800 	.word	0x40020800
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40021000 	.word	0x40021000
 800269c:	40021400 	.word	0x40021400
 80026a0:	40021800 	.word	0x40021800
 80026a4:	40021c00 	.word	0x40021c00
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40022400 	.word	0x40022400
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_PWREx_EnableOverDrive+0x90>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_PWREx_EnableOverDrive+0x90>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_PWREx_EnableOverDrive+0x90>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_PWREx_EnableOverDrive+0x94>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e0:	f7ff f94a 	bl	8001978 <HAL_GetTick>
 80026e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026e6:	e009      	b.n	80026fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026e8:	f7ff f946 	bl	8001978 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026f6:	d901      	bls.n	80026fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e01f      	b.n	800273c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_PWREx_EnableOverDrive+0x98>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002708:	d1ee      	bne.n	80026e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_PWREx_EnableOverDrive+0x9c>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002710:	f7ff f932 	bl	8001978 <HAL_GetTick>
 8002714:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002716:	e009      	b.n	800272c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002718:	f7ff f92e 	bl	8001978 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002726:	d901      	bls.n	800272c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e007      	b.n	800273c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_PWREx_EnableOverDrive+0x98>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002738:	d1ee      	bne.n	8002718 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	420e0040 	.word	0x420e0040
 800274c:	40007000 	.word	0x40007000
 8002750:	420e0044 	.word	0x420e0044

08002754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e267      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d075      	beq.n	800285e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002772:	4b88      	ldr	r3, [pc, #544]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d00c      	beq.n	8002798 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277e:	4b85      	ldr	r3, [pc, #532]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002786:	2b08      	cmp	r3, #8
 8002788:	d112      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278a:	4b82      	ldr	r3, [pc, #520]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002796:	d10b      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	4b7e      	ldr	r3, [pc, #504]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d05b      	beq.n	800285c <HAL_RCC_OscConfig+0x108>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d157      	bne.n	800285c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e242      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b8:	d106      	bne.n	80027c8 <HAL_RCC_OscConfig+0x74>
 80027ba:	4b76      	ldr	r3, [pc, #472]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a75      	ldr	r2, [pc, #468]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e01d      	b.n	8002804 <HAL_RCC_OscConfig+0xb0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x98>
 80027d2:	4b70      	ldr	r3, [pc, #448]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a6f      	ldr	r2, [pc, #444]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b6d      	ldr	r3, [pc, #436]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a6c      	ldr	r2, [pc, #432]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0xb0>
 80027ec:	4b69      	ldr	r3, [pc, #420]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a68      	ldr	r2, [pc, #416]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b66      	ldr	r3, [pc, #408]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a65      	ldr	r2, [pc, #404]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80027fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7ff f8b4 	bl	8001978 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002814:	f7ff f8b0 	bl	8001978 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e207      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0xc0>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff f8a0 	bl	8001978 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283c:	f7ff f89c 	bl	8001978 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1f3      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	4b51      	ldr	r3, [pc, #324]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0xe8>
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d063      	beq.n	8002932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287e:	2b08      	cmp	r3, #8
 8002880:	d11c      	bne.n	80028bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002882:	4b44      	ldr	r3, [pc, #272]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d116      	bne.n	80028bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	4b41      	ldr	r3, [pc, #260]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_RCC_OscConfig+0x152>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e1c7      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4937      	ldr	r1, [pc, #220]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ba:	e03a      	b.n	8002932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c4:	4b34      	ldr	r3, [pc, #208]	; (8002998 <HAL_RCC_OscConfig+0x244>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7ff f855 	bl	8001978 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d2:	f7ff f851 	bl	8001978 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1a8      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4925      	ldr	r1, [pc, #148]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
 8002904:	e015      	b.n	8002932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_OscConfig+0x244>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7ff f834 	bl	8001978 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002914:	f7ff f830 	bl	8001978 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e187      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d036      	beq.n	80029ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_RCC_OscConfig+0x248>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7ff f814 	bl	8001978 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002954:	f7ff f810 	bl	8001978 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e167      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_OscConfig+0x240>)
 8002968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x200>
 8002972:	e01b      	b.n	80029ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_OscConfig+0x248>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7fe fffd 	bl	8001978 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	e00e      	b.n	80029a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002982:	f7fe fff9 	bl	8001978 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d907      	bls.n	80029a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e150      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
 8002994:	40023800 	.word	0x40023800
 8002998:	42470000 	.word	0x42470000
 800299c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a0:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ea      	bne.n	8002982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8097 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029be:	4b81      	ldr	r3, [pc, #516]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10f      	bne.n	80029ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a7c      	ldr	r2, [pc, #496]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e6:	2301      	movs	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	4b77      	ldr	r3, [pc, #476]	; (8002bc8 <HAL_RCC_OscConfig+0x474>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d118      	bne.n	8002a28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f6:	4b74      	ldr	r3, [pc, #464]	; (8002bc8 <HAL_RCC_OscConfig+0x474>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a73      	ldr	r2, [pc, #460]	; (8002bc8 <HAL_RCC_OscConfig+0x474>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a02:	f7fe ffb9 	bl	8001978 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0a:	f7fe ffb5 	bl	8001978 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e10c      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_OscConfig+0x474>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x2ea>
 8002a30:	4b64      	ldr	r3, [pc, #400]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a63      	ldr	r2, [pc, #396]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3c:	e01c      	b.n	8002a78 <HAL_RCC_OscConfig+0x324>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x30c>
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a5e      	ldr	r2, [pc, #376]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	f043 0304 	orr.w	r3, r3, #4
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
 8002a52:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a5b      	ldr	r2, [pc, #364]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0x324>
 8002a60:	4b58      	ldr	r3, [pc, #352]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	4a57      	ldr	r2, [pc, #348]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6c:	4b55      	ldr	r3, [pc, #340]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	4a54      	ldr	r2, [pc, #336]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002a72:	f023 0304 	bic.w	r3, r3, #4
 8002a76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7fe ff7a 	bl	8001978 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe ff76 	bl	8001978 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e0cb      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0ee      	beq.n	8002a88 <HAL_RCC_OscConfig+0x334>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aac:	f7fe ff64 	bl	8001978 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7fe ff60 	bl	8001978 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0b5      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aca:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ee      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002adc:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	4a38      	ldr	r2, [pc, #224]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80a1 	beq.w	8002c34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af2:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d05c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d141      	bne.n	8002b8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <HAL_RCC_OscConfig+0x478>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe ff34 	bl	8001978 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe ff30 	bl	8001978 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e087      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	019b      	lsls	r3, r3, #6
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	491b      	ldr	r1, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x478>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe ff09 	bl	8001978 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe ff05 	bl	8001978 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e05c      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x416>
 8002b88:	e054      	b.n	8002c34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_RCC_OscConfig+0x478>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fef2 	bl	8001978 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe feee 	bl	8001978 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e045      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_RCC_OscConfig+0x470>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x444>
 8002bb6:	e03d      	b.n	8002c34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e038      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x4ec>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d028      	beq.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d121      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d11a      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	085b      	lsrs	r3, r3, #1
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800

08002c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0cc      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d90c      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d044      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d119      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e067      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4934      	ldr	r1, [pc, #208]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fe20 	bl	8001978 <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3c:	f7fe fe1c 	bl	8001978 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 020c 	and.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1eb      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d20c      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 f821 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	5ccb      	ldrb	r3, [r1, r3]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fd80 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00
 8002e00:	40023800 	.word	0x40023800
 8002e04:	08004c58 	.word	0x08004c58
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e14:	b094      	sub	sp, #80	; 0x50
 8002e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e20:	2300      	movs	r3, #0
 8002e22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e28:	4b79      	ldr	r3, [pc, #484]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d00d      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x40>
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	f200 80e1 	bhi.w	8002ffc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x34>
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e42:	e0db      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e48:	e0db      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e4e:	e0d8      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e50:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d063      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e78:	633b      	str	r3, [r7, #48]	; 0x30
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e82:	4622      	mov	r2, r4
 8002e84:	462b      	mov	r3, r5
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	0159      	lsls	r1, r3, #5
 8002e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e94:	0150      	lsls	r0, r2, #5
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	1a51      	subs	r1, r2, r1
 8002e9e:	6139      	str	r1, [r7, #16]
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	018b      	lsls	r3, r1, #6
 8002eb8:	4651      	mov	r1, sl
 8002eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	018a      	lsls	r2, r1, #6
 8002ec2:	4651      	mov	r1, sl
 8002ec4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ec8:	4659      	mov	r1, fp
 8002eca:	eb63 0901 	sbc.w	r9, r3, r1
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ee2:	4690      	mov	r8, r2
 8002ee4:	4699      	mov	r9, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	eb18 0303 	adds.w	r3, r8, r3
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	462b      	mov	r3, r5
 8002ef0:	eb49 0303 	adc.w	r3, r9, r3
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f02:	4629      	mov	r1, r5
 8002f04:	024b      	lsls	r3, r1, #9
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	024a      	lsls	r2, r1, #9
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f16:	2200      	movs	r2, #0
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f20:	f7fd fe04 	bl	8000b2c <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f2c:	e058      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2e:	4b38      	ldr	r3, [pc, #224]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	2200      	movs	r2, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	4611      	mov	r1, r2
 8002f3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f3e:	623b      	str	r3, [r7, #32]
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f48:	4642      	mov	r2, r8
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	f04f 0000 	mov.w	r0, #0
 8002f50:	f04f 0100 	mov.w	r1, #0
 8002f54:	0159      	lsls	r1, r3, #5
 8002f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f5a:	0150      	lsls	r0, r2, #5
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4641      	mov	r1, r8
 8002f62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f66:	4649      	mov	r1, r9
 8002f68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f80:	ebb2 040a 	subs.w	r4, r2, sl
 8002f84:	eb63 050b 	sbc.w	r5, r3, fp
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	00eb      	lsls	r3, r5, #3
 8002f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f96:	00e2      	lsls	r2, r4, #3
 8002f98:	4614      	mov	r4, r2
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	4643      	mov	r3, r8
 8002f9e:	18e3      	adds	r3, r4, r3
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	eb45 0303 	adc.w	r3, r5, r3
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	028b      	lsls	r3, r1, #10
 8002fba:	4621      	mov	r1, r4
 8002fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	028a      	lsls	r2, r1, #10
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	61fa      	str	r2, [r7, #28]
 8002fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd4:	f7fd fdaa 	bl	8000b2c <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	3301      	adds	r3, #1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ffa:	e002      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003004:	4618      	mov	r0, r3
 8003006:	3750      	adds	r7, #80	; 0x50
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	00f42400 	.word	0x00f42400
 8003018:	007a1200 	.word	0x007a1200

0800301c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e041      	b.n	80030b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe fb32 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f000 fa10 	bl	8003480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e041      	b.n	8003150 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f839 	bl	8003158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 f9c1 	bl	8003480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003186:	2302      	movs	r3, #2
 8003188:	e0ae      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	f200 809f 	bhi.w	80032d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031d5 	.word	0x080031d5
 80031a4:	080032d9 	.word	0x080032d9
 80031a8:	080032d9 	.word	0x080032d9
 80031ac:	080032d9 	.word	0x080032d9
 80031b0:	08003215 	.word	0x08003215
 80031b4:	080032d9 	.word	0x080032d9
 80031b8:	080032d9 	.word	0x080032d9
 80031bc:	080032d9 	.word	0x080032d9
 80031c0:	08003257 	.word	0x08003257
 80031c4:	080032d9 	.word	0x080032d9
 80031c8:	080032d9 	.word	0x080032d9
 80031cc:	080032d9 	.word	0x080032d9
 80031d0:	08003297 	.word	0x08003297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 f9f0 	bl	80035c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0208 	orr.w	r2, r2, #8
 80031ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0204 	bic.w	r2, r2, #4
 80031fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6999      	ldr	r1, [r3, #24]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	619a      	str	r2, [r3, #24]
      break;
 8003212:	e064      	b.n	80032de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fa40 	bl	80036a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6999      	ldr	r1, [r3, #24]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	021a      	lsls	r2, r3, #8
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	619a      	str	r2, [r3, #24]
      break;
 8003254:	e043      	b.n	80032de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fa95 	bl	800378c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0208 	orr.w	r2, r2, #8
 8003270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0204 	bic.w	r2, r2, #4
 8003280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69d9      	ldr	r1, [r3, #28]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	61da      	str	r2, [r3, #28]
      break;
 8003294:	e023      	b.n	80032de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fae9 	bl	8003874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69d9      	ldr	r1, [r3, #28]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	61da      	str	r2, [r3, #28]
      break;
 80032d6:	e002      	b.n	80032de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	75fb      	strb	r3, [r7, #23]
      break;
 80032dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_TIM_ConfigClockSource+0x1c>
 8003308:	2302      	movs	r3, #2
 800330a:	e0b4      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x186>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003344:	d03e      	beq.n	80033c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	f200 8087 	bhi.w	800345c <HAL_TIM_ConfigClockSource+0x16c>
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003352:	f000 8086 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x172>
 8003356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335a:	d87f      	bhi.n	800345c <HAL_TIM_ConfigClockSource+0x16c>
 800335c:	2b70      	cmp	r3, #112	; 0x70
 800335e:	d01a      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0xa6>
 8003360:	2b70      	cmp	r3, #112	; 0x70
 8003362:	d87b      	bhi.n	800345c <HAL_TIM_ConfigClockSource+0x16c>
 8003364:	2b60      	cmp	r3, #96	; 0x60
 8003366:	d050      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x11a>
 8003368:	2b60      	cmp	r3, #96	; 0x60
 800336a:	d877      	bhi.n	800345c <HAL_TIM_ConfigClockSource+0x16c>
 800336c:	2b50      	cmp	r3, #80	; 0x50
 800336e:	d03c      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0xfa>
 8003370:	2b50      	cmp	r3, #80	; 0x50
 8003372:	d873      	bhi.n	800345c <HAL_TIM_ConfigClockSource+0x16c>
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d058      	beq.n	800342a <HAL_TIM_ConfigClockSource+0x13a>
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d86f      	bhi.n	800345c <HAL_TIM_ConfigClockSource+0x16c>
 800337c:	2b30      	cmp	r3, #48	; 0x30
 800337e:	d064      	beq.n	800344a <HAL_TIM_ConfigClockSource+0x15a>
 8003380:	2b30      	cmp	r3, #48	; 0x30
 8003382:	d86b      	bhi.n	800345c <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b20      	cmp	r3, #32
 8003386:	d060      	beq.n	800344a <HAL_TIM_ConfigClockSource+0x15a>
 8003388:	2b20      	cmp	r3, #32
 800338a:	d867      	bhi.n	800345c <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d05c      	beq.n	800344a <HAL_TIM_ConfigClockSource+0x15a>
 8003390:	2b10      	cmp	r3, #16
 8003392:	d05a      	beq.n	800344a <HAL_TIM_ConfigClockSource+0x15a>
 8003394:	e062      	b.n	800345c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6899      	ldr	r1, [r3, #8]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f000 fb35 	bl	8003a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	609a      	str	r2, [r3, #8]
      break;
 80033c2:	e04f      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f000 fb1e 	bl	8003a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e6:	609a      	str	r2, [r3, #8]
      break;
 80033e8:	e03c      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 fa92 	bl	8003920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2150      	movs	r1, #80	; 0x50
 8003402:	4618      	mov	r0, r3
 8003404:	f000 faeb 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 8003408:	e02c      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	461a      	mov	r2, r3
 8003418:	f000 fab1 	bl	800397e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2160      	movs	r1, #96	; 0x60
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fadb 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 8003428:	e01c      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	461a      	mov	r2, r3
 8003438:	f000 fa72 	bl	8003920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2140      	movs	r1, #64	; 0x40
 8003442:	4618      	mov	r0, r3
 8003444:	f000 facb 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 8003448:	e00c      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f000 fac2 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 800345a:	e003      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      break;
 8003460:	e000      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a40      	ldr	r2, [pc, #256]	; (8003594 <TIM_Base_SetConfig+0x114>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <TIM_Base_SetConfig+0x40>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349e:	d00f      	beq.n	80034c0 <TIM_Base_SetConfig+0x40>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a3d      	ldr	r2, [pc, #244]	; (8003598 <TIM_Base_SetConfig+0x118>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <TIM_Base_SetConfig+0x40>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a3c      	ldr	r2, [pc, #240]	; (800359c <TIM_Base_SetConfig+0x11c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d007      	beq.n	80034c0 <TIM_Base_SetConfig+0x40>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a3b      	ldr	r2, [pc, #236]	; (80035a0 <TIM_Base_SetConfig+0x120>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0x40>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a3a      	ldr	r2, [pc, #232]	; (80035a4 <TIM_Base_SetConfig+0x124>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d108      	bne.n	80034d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2f      	ldr	r2, [pc, #188]	; (8003594 <TIM_Base_SetConfig+0x114>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d02b      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d027      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <TIM_Base_SetConfig+0x118>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d023      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a2b      	ldr	r2, [pc, #172]	; (800359c <TIM_Base_SetConfig+0x11c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01f      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a2a      	ldr	r2, [pc, #168]	; (80035a0 <TIM_Base_SetConfig+0x120>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01b      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a29      	ldr	r2, [pc, #164]	; (80035a4 <TIM_Base_SetConfig+0x124>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d017      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a28      	ldr	r2, [pc, #160]	; (80035a8 <TIM_Base_SetConfig+0x128>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a27      	ldr	r2, [pc, #156]	; (80035ac <TIM_Base_SetConfig+0x12c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00f      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <TIM_Base_SetConfig+0x130>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00b      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a25      	ldr	r2, [pc, #148]	; (80035b4 <TIM_Base_SetConfig+0x134>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <TIM_Base_SetConfig+0x138>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a23      	ldr	r2, [pc, #140]	; (80035bc <TIM_Base_SetConfig+0x13c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <TIM_Base_SetConfig+0x114>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_Base_SetConfig+0xf8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0c      	ldr	r2, [pc, #48]	; (80035a4 <TIM_Base_SetConfig+0x124>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	615a      	str	r2, [r3, #20]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40014400 	.word	0x40014400
 80035b0:	40014800 	.word	0x40014800
 80035b4:	40001800 	.word	0x40001800
 80035b8:	40001c00 	.word	0x40001c00
 80035bc:	40002000 	.word	0x40002000

080035c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f023 0201 	bic.w	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0303 	bic.w	r3, r3, #3
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 0302 	bic.w	r3, r3, #2
 8003608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a20      	ldr	r2, [pc, #128]	; (8003698 <TIM_OC1_SetConfig+0xd8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_OC1_SetConfig+0x64>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a1f      	ldr	r2, [pc, #124]	; (800369c <TIM_OC1_SetConfig+0xdc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10c      	bne.n	800363e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0308 	bic.w	r3, r3, #8
 800362a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a15      	ldr	r2, [pc, #84]	; (8003698 <TIM_OC1_SetConfig+0xd8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_OC1_SetConfig+0x8e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <TIM_OC1_SetConfig+0xdc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d111      	bne.n	8003672 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800365c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	621a      	str	r2, [r3, #32]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40010000 	.word	0x40010000
 800369c:	40010400 	.word	0x40010400

080036a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f023 0210 	bic.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 0320 	bic.w	r3, r3, #32
 80036ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a22      	ldr	r2, [pc, #136]	; (8003784 <TIM_OC2_SetConfig+0xe4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <TIM_OC2_SetConfig+0x68>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <TIM_OC2_SetConfig+0xe8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d10d      	bne.n	8003724 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <TIM_OC2_SetConfig+0xe4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_OC2_SetConfig+0x94>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a16      	ldr	r2, [pc, #88]	; (8003788 <TIM_OC2_SetConfig+0xe8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d113      	bne.n	800375c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800373a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40010000 	.word	0x40010000
 8003788:	40010400 	.word	0x40010400

0800378c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a21      	ldr	r2, [pc, #132]	; (800386c <TIM_OC3_SetConfig+0xe0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_OC3_SetConfig+0x66>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a20      	ldr	r2, [pc, #128]	; (8003870 <TIM_OC3_SetConfig+0xe4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10d      	bne.n	800380e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800380c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a16      	ldr	r2, [pc, #88]	; (800386c <TIM_OC3_SetConfig+0xe0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d003      	beq.n	800381e <TIM_OC3_SetConfig+0x92>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a15      	ldr	r2, [pc, #84]	; (8003870 <TIM_OC3_SetConfig+0xe4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d113      	bne.n	8003846 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800382c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	621a      	str	r2, [r3, #32]
}
 8003860:	bf00      	nop
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40010000 	.word	0x40010000
 8003870:	40010400 	.word	0x40010400

08003874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	031b      	lsls	r3, r3, #12
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <TIM_OC4_SetConfig+0xa4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_OC4_SetConfig+0x68>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a11      	ldr	r2, [pc, #68]	; (800391c <TIM_OC4_SetConfig+0xa8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d109      	bne.n	80038f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	40010400 	.word	0x40010400

08003920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0201 	bic.w	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f023 030a 	bic.w	r3, r3, #10
 800395c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	621a      	str	r2, [r3, #32]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f023 0210 	bic.w	r2, r3, #16
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f043 0307 	orr.w	r3, r3, #7
 8003a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	609a      	str	r2, [r3, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	021a      	lsls	r2, r3, #8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	609a      	str	r2, [r3, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e05a      	b.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a21      	ldr	r2, [pc, #132]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d01d      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10c      	bne.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40010400 	.word	0x40010400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40001800 	.word	0x40001800

08003b4c <__libc_init_array>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	4d0d      	ldr	r5, [pc, #52]	; (8003b84 <__libc_init_array+0x38>)
 8003b50:	4c0d      	ldr	r4, [pc, #52]	; (8003b88 <__libc_init_array+0x3c>)
 8003b52:	1b64      	subs	r4, r4, r5
 8003b54:	10a4      	asrs	r4, r4, #2
 8003b56:	2600      	movs	r6, #0
 8003b58:	42a6      	cmp	r6, r4
 8003b5a:	d109      	bne.n	8003b70 <__libc_init_array+0x24>
 8003b5c:	4d0b      	ldr	r5, [pc, #44]	; (8003b8c <__libc_init_array+0x40>)
 8003b5e:	4c0c      	ldr	r4, [pc, #48]	; (8003b90 <__libc_init_array+0x44>)
 8003b60:	f001 f86c 	bl	8004c3c <_init>
 8003b64:	1b64      	subs	r4, r4, r5
 8003b66:	10a4      	asrs	r4, r4, #2
 8003b68:	2600      	movs	r6, #0
 8003b6a:	42a6      	cmp	r6, r4
 8003b6c:	d105      	bne.n	8003b7a <__libc_init_array+0x2e>
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b74:	4798      	blx	r3
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7ee      	b.n	8003b58 <__libc_init_array+0xc>
 8003b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7e:	4798      	blx	r3
 8003b80:	3601      	adds	r6, #1
 8003b82:	e7f2      	b.n	8003b6a <__libc_init_array+0x1e>
 8003b84:	08004e48 	.word	0x08004e48
 8003b88:	08004e48 	.word	0x08004e48
 8003b8c:	08004e48 	.word	0x08004e48
 8003b90:	08004e4c 	.word	0x08004e4c

08003b94 <memset>:
 8003b94:	4402      	add	r2, r0
 8003b96:	4603      	mov	r3, r0
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <memset+0xa>
 8003b9c:	4770      	bx	lr
 8003b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba2:	e7f9      	b.n	8003b98 <memset+0x4>
 8003ba4:	0000      	movs	r0, r0
	...

08003ba8 <sin>:
 8003ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003baa:	ec53 2b10 	vmov	r2, r3, d0
 8003bae:	4828      	ldr	r0, [pc, #160]	; (8003c50 <sin+0xa8>)
 8003bb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003bb4:	4281      	cmp	r1, r0
 8003bb6:	dc07      	bgt.n	8003bc8 <sin+0x20>
 8003bb8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003c48 <sin+0xa0>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	b005      	add	sp, #20
 8003bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bc4:	f000 be6c 	b.w	80048a0 <__kernel_sin>
 8003bc8:	4822      	ldr	r0, [pc, #136]	; (8003c54 <sin+0xac>)
 8003bca:	4281      	cmp	r1, r0
 8003bcc:	dd09      	ble.n	8003be2 <sin+0x3a>
 8003bce:	ee10 0a10 	vmov	r0, s0
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fc fb10 	bl	80001f8 <__aeabi_dsub>
 8003bd8:	ec41 0b10 	vmov	d0, r0, r1
 8003bdc:	b005      	add	sp, #20
 8003bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8003be2:	4668      	mov	r0, sp
 8003be4:	f000 f838 	bl	8003c58 <__ieee754_rem_pio2>
 8003be8:	f000 0003 	and.w	r0, r0, #3
 8003bec:	2801      	cmp	r0, #1
 8003bee:	d00c      	beq.n	8003c0a <sin+0x62>
 8003bf0:	2802      	cmp	r0, #2
 8003bf2:	d011      	beq.n	8003c18 <sin+0x70>
 8003bf4:	b9f0      	cbnz	r0, 8003c34 <sin+0x8c>
 8003bf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003bfa:	ed9d 0b00 	vldr	d0, [sp]
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f000 fe4e 	bl	80048a0 <__kernel_sin>
 8003c04:	ec51 0b10 	vmov	r0, r1, d0
 8003c08:	e7e6      	b.n	8003bd8 <sin+0x30>
 8003c0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c0e:	ed9d 0b00 	vldr	d0, [sp]
 8003c12:	f000 fa2d 	bl	8004070 <__kernel_cos>
 8003c16:	e7f5      	b.n	8003c04 <sin+0x5c>
 8003c18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c1c:	ed9d 0b00 	vldr	d0, [sp]
 8003c20:	2001      	movs	r0, #1
 8003c22:	f000 fe3d 	bl	80048a0 <__kernel_sin>
 8003c26:	ec53 2b10 	vmov	r2, r3, d0
 8003c2a:	ee10 0a10 	vmov	r0, s0
 8003c2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003c32:	e7d1      	b.n	8003bd8 <sin+0x30>
 8003c34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c38:	ed9d 0b00 	vldr	d0, [sp]
 8003c3c:	f000 fa18 	bl	8004070 <__kernel_cos>
 8003c40:	e7f1      	b.n	8003c26 <sin+0x7e>
 8003c42:	bf00      	nop
 8003c44:	f3af 8000 	nop.w
	...
 8003c50:	3fe921fb 	.word	0x3fe921fb
 8003c54:	7fefffff 	.word	0x7fefffff

08003c58 <__ieee754_rem_pio2>:
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5c:	ed2d 8b02 	vpush	{d8}
 8003c60:	ec55 4b10 	vmov	r4, r5, d0
 8003c64:	4bca      	ldr	r3, [pc, #808]	; (8003f90 <__ieee754_rem_pio2+0x338>)
 8003c66:	b08b      	sub	sp, #44	; 0x2c
 8003c68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003c6c:	4598      	cmp	r8, r3
 8003c6e:	4682      	mov	sl, r0
 8003c70:	9502      	str	r5, [sp, #8]
 8003c72:	dc08      	bgt.n	8003c86 <__ieee754_rem_pio2+0x2e>
 8003c74:	2200      	movs	r2, #0
 8003c76:	2300      	movs	r3, #0
 8003c78:	ed80 0b00 	vstr	d0, [r0]
 8003c7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003c80:	f04f 0b00 	mov.w	fp, #0
 8003c84:	e028      	b.n	8003cd8 <__ieee754_rem_pio2+0x80>
 8003c86:	4bc3      	ldr	r3, [pc, #780]	; (8003f94 <__ieee754_rem_pio2+0x33c>)
 8003c88:	4598      	cmp	r8, r3
 8003c8a:	dc78      	bgt.n	8003d7e <__ieee754_rem_pio2+0x126>
 8003c8c:	9b02      	ldr	r3, [sp, #8]
 8003c8e:	4ec2      	ldr	r6, [pc, #776]	; (8003f98 <__ieee754_rem_pio2+0x340>)
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	ee10 0a10 	vmov	r0, s0
 8003c96:	a3b0      	add	r3, pc, #704	; (adr r3, 8003f58 <__ieee754_rem_pio2+0x300>)
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	dd39      	ble.n	8003d14 <__ieee754_rem_pio2+0xbc>
 8003ca0:	f7fc faaa 	bl	80001f8 <__aeabi_dsub>
 8003ca4:	45b0      	cmp	r8, r6
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	460d      	mov	r5, r1
 8003caa:	d01b      	beq.n	8003ce4 <__ieee754_rem_pio2+0x8c>
 8003cac:	a3ac      	add	r3, pc, #688	; (adr r3, 8003f60 <__ieee754_rem_pio2+0x308>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f7fc faa1 	bl	80001f8 <__aeabi_dsub>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	e9ca 2300 	strd	r2, r3, [sl]
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	f7fc fa99 	bl	80001f8 <__aeabi_dsub>
 8003cc6:	a3a6      	add	r3, pc, #664	; (adr r3, 8003f60 <__ieee754_rem_pio2+0x308>)
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f7fc fa94 	bl	80001f8 <__aeabi_dsub>
 8003cd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003cd4:	f04f 0b01 	mov.w	fp, #1
 8003cd8:	4658      	mov	r0, fp
 8003cda:	b00b      	add	sp, #44	; 0x2c
 8003cdc:	ecbd 8b02 	vpop	{d8}
 8003ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce4:	a3a0      	add	r3, pc, #640	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x310>)
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f7fc fa85 	bl	80001f8 <__aeabi_dsub>
 8003cee:	a3a0      	add	r3, pc, #640	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x318>)
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	460d      	mov	r5, r1
 8003cf8:	f7fc fa7e 	bl	80001f8 <__aeabi_dsub>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	e9ca 2300 	strd	r2, r3, [sl]
 8003d04:	4620      	mov	r0, r4
 8003d06:	4629      	mov	r1, r5
 8003d08:	f7fc fa76 	bl	80001f8 <__aeabi_dsub>
 8003d0c:	a398      	add	r3, pc, #608	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x318>)
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	e7db      	b.n	8003ccc <__ieee754_rem_pio2+0x74>
 8003d14:	f7fc fa72 	bl	80001fc <__adddf3>
 8003d18:	45b0      	cmp	r8, r6
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	460d      	mov	r5, r1
 8003d1e:	d016      	beq.n	8003d4e <__ieee754_rem_pio2+0xf6>
 8003d20:	a38f      	add	r3, pc, #572	; (adr r3, 8003f60 <__ieee754_rem_pio2+0x308>)
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f7fc fa69 	bl	80001fc <__adddf3>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	e9ca 2300 	strd	r2, r3, [sl]
 8003d32:	4620      	mov	r0, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	f7fc fa5f 	bl	80001f8 <__aeabi_dsub>
 8003d3a:	a389      	add	r3, pc, #548	; (adr r3, 8003f60 <__ieee754_rem_pio2+0x308>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc fa5c 	bl	80001fc <__adddf3>
 8003d44:	f04f 3bff 	mov.w	fp, #4294967295
 8003d48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003d4c:	e7c4      	b.n	8003cd8 <__ieee754_rem_pio2+0x80>
 8003d4e:	a386      	add	r3, pc, #536	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x310>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fa52 	bl	80001fc <__adddf3>
 8003d58:	a385      	add	r3, pc, #532	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x318>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	4604      	mov	r4, r0
 8003d60:	460d      	mov	r5, r1
 8003d62:	f7fc fa4b 	bl	80001fc <__adddf3>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	e9ca 2300 	strd	r2, r3, [sl]
 8003d6e:	4620      	mov	r0, r4
 8003d70:	4629      	mov	r1, r5
 8003d72:	f7fc fa41 	bl	80001f8 <__aeabi_dsub>
 8003d76:	a37e      	add	r3, pc, #504	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x318>)
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	e7e0      	b.n	8003d40 <__ieee754_rem_pio2+0xe8>
 8003d7e:	4b87      	ldr	r3, [pc, #540]	; (8003f9c <__ieee754_rem_pio2+0x344>)
 8003d80:	4598      	cmp	r8, r3
 8003d82:	f300 80d9 	bgt.w	8003f38 <__ieee754_rem_pio2+0x2e0>
 8003d86:	f000 fe49 	bl	8004a1c <fabs>
 8003d8a:	ec55 4b10 	vmov	r4, r5, d0
 8003d8e:	ee10 0a10 	vmov	r0, s0
 8003d92:	a379      	add	r3, pc, #484	; (adr r3, 8003f78 <__ieee754_rem_pio2+0x320>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f7fc fbe5 	bl	8000568 <__aeabi_dmul>
 8003d9e:	4b80      	ldr	r3, [pc, #512]	; (8003fa0 <__ieee754_rem_pio2+0x348>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	f7fc fa2b 	bl	80001fc <__adddf3>
 8003da6:	f7fc fe79 	bl	8000a9c <__aeabi_d2iz>
 8003daa:	4683      	mov	fp, r0
 8003dac:	f7fc fb72 	bl	8000494 <__aeabi_i2d>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	ec43 2b18 	vmov	d8, r2, r3
 8003db8:	a367      	add	r3, pc, #412	; (adr r3, 8003f58 <__ieee754_rem_pio2+0x300>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fbd3 	bl	8000568 <__aeabi_dmul>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f7fc fa15 	bl	80001f8 <__aeabi_dsub>
 8003dce:	a364      	add	r3, pc, #400	; (adr r3, 8003f60 <__ieee754_rem_pio2+0x308>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	460f      	mov	r7, r1
 8003dd8:	ec51 0b18 	vmov	r0, r1, d8
 8003ddc:	f7fc fbc4 	bl	8000568 <__aeabi_dmul>
 8003de0:	f1bb 0f1f 	cmp.w	fp, #31
 8003de4:	4604      	mov	r4, r0
 8003de6:	460d      	mov	r5, r1
 8003de8:	dc0d      	bgt.n	8003e06 <__ieee754_rem_pio2+0x1ae>
 8003dea:	4b6e      	ldr	r3, [pc, #440]	; (8003fa4 <__ieee754_rem_pio2+0x34c>)
 8003dec:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df4:	4543      	cmp	r3, r8
 8003df6:	d006      	beq.n	8003e06 <__ieee754_rem_pio2+0x1ae>
 8003df8:	4622      	mov	r2, r4
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	4639      	mov	r1, r7
 8003e00:	f7fc f9fa 	bl	80001f8 <__aeabi_dsub>
 8003e04:	e00f      	b.n	8003e26 <__ieee754_rem_pio2+0x1ce>
 8003e06:	462b      	mov	r3, r5
 8003e08:	4622      	mov	r2, r4
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	4639      	mov	r1, r7
 8003e0e:	f7fc f9f3 	bl	80001f8 <__aeabi_dsub>
 8003e12:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003e16:	9303      	str	r3, [sp, #12]
 8003e18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003e1c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003e20:	f1b8 0f10 	cmp.w	r8, #16
 8003e24:	dc02      	bgt.n	8003e2c <__ieee754_rem_pio2+0x1d4>
 8003e26:	e9ca 0100 	strd	r0, r1, [sl]
 8003e2a:	e039      	b.n	8003ea0 <__ieee754_rem_pio2+0x248>
 8003e2c:	a34e      	add	r3, pc, #312	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x310>)
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	ec51 0b18 	vmov	r0, r1, d8
 8003e36:	f7fc fb97 	bl	8000568 <__aeabi_dmul>
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	460d      	mov	r5, r1
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4630      	mov	r0, r6
 8003e44:	4639      	mov	r1, r7
 8003e46:	f7fc f9d7 	bl	80001f8 <__aeabi_dsub>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4680      	mov	r8, r0
 8003e50:	4689      	mov	r9, r1
 8003e52:	4630      	mov	r0, r6
 8003e54:	4639      	mov	r1, r7
 8003e56:	f7fc f9cf 	bl	80001f8 <__aeabi_dsub>
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	f7fc f9cb 	bl	80001f8 <__aeabi_dsub>
 8003e62:	a343      	add	r3, pc, #268	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x318>)
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	4604      	mov	r4, r0
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	ec51 0b18 	vmov	r0, r1, d8
 8003e70:	f7fc fb7a 	bl	8000568 <__aeabi_dmul>
 8003e74:	4622      	mov	r2, r4
 8003e76:	462b      	mov	r3, r5
 8003e78:	f7fc f9be 	bl	80001f8 <__aeabi_dsub>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4604      	mov	r4, r0
 8003e82:	460d      	mov	r5, r1
 8003e84:	4640      	mov	r0, r8
 8003e86:	4649      	mov	r1, r9
 8003e88:	f7fc f9b6 	bl	80001f8 <__aeabi_dsub>
 8003e8c:	9a03      	ldr	r2, [sp, #12]
 8003e8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b31      	cmp	r3, #49	; 0x31
 8003e96:	dc24      	bgt.n	8003ee2 <__ieee754_rem_pio2+0x28a>
 8003e98:	e9ca 0100 	strd	r0, r1, [sl]
 8003e9c:	4646      	mov	r6, r8
 8003e9e:	464f      	mov	r7, r9
 8003ea0:	e9da 8900 	ldrd	r8, r9, [sl]
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	4642      	mov	r2, r8
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	4639      	mov	r1, r7
 8003eac:	f7fc f9a4 	bl	80001f8 <__aeabi_dsub>
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	f7fc f9a0 	bl	80001f8 <__aeabi_dsub>
 8003eb8:	9b02      	ldr	r3, [sp, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003ec0:	f6bf af0a 	bge.w	8003cd8 <__ieee754_rem_pio2+0x80>
 8003ec4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003ec8:	f8ca 3004 	str.w	r3, [sl, #4]
 8003ecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ed0:	f8ca 8000 	str.w	r8, [sl]
 8003ed4:	f8ca 0008 	str.w	r0, [sl, #8]
 8003ed8:	f8ca 300c 	str.w	r3, [sl, #12]
 8003edc:	f1cb 0b00 	rsb	fp, fp, #0
 8003ee0:	e6fa      	b.n	8003cd8 <__ieee754_rem_pio2+0x80>
 8003ee2:	a327      	add	r3, pc, #156	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x328>)
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	ec51 0b18 	vmov	r0, r1, d8
 8003eec:	f7fc fb3c 	bl	8000568 <__aeabi_dmul>
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	460d      	mov	r5, r1
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4640      	mov	r0, r8
 8003efa:	4649      	mov	r1, r9
 8003efc:	f7fc f97c 	bl	80001f8 <__aeabi_dsub>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4606      	mov	r6, r0
 8003f06:	460f      	mov	r7, r1
 8003f08:	4640      	mov	r0, r8
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	f7fc f974 	bl	80001f8 <__aeabi_dsub>
 8003f10:	4622      	mov	r2, r4
 8003f12:	462b      	mov	r3, r5
 8003f14:	f7fc f970 	bl	80001f8 <__aeabi_dsub>
 8003f18:	a31b      	add	r3, pc, #108	; (adr r3, 8003f88 <__ieee754_rem_pio2+0x330>)
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	4604      	mov	r4, r0
 8003f20:	460d      	mov	r5, r1
 8003f22:	ec51 0b18 	vmov	r0, r1, d8
 8003f26:	f7fc fb1f 	bl	8000568 <__aeabi_dmul>
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	f7fc f963 	bl	80001f8 <__aeabi_dsub>
 8003f32:	4604      	mov	r4, r0
 8003f34:	460d      	mov	r5, r1
 8003f36:	e75f      	b.n	8003df8 <__ieee754_rem_pio2+0x1a0>
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <__ieee754_rem_pio2+0x350>)
 8003f3a:	4598      	cmp	r8, r3
 8003f3c:	dd36      	ble.n	8003fac <__ieee754_rem_pio2+0x354>
 8003f3e:	ee10 2a10 	vmov	r2, s0
 8003f42:	462b      	mov	r3, r5
 8003f44:	4620      	mov	r0, r4
 8003f46:	4629      	mov	r1, r5
 8003f48:	f7fc f956 	bl	80001f8 <__aeabi_dsub>
 8003f4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003f50:	e9ca 0100 	strd	r0, r1, [sl]
 8003f54:	e694      	b.n	8003c80 <__ieee754_rem_pio2+0x28>
 8003f56:	bf00      	nop
 8003f58:	54400000 	.word	0x54400000
 8003f5c:	3ff921fb 	.word	0x3ff921fb
 8003f60:	1a626331 	.word	0x1a626331
 8003f64:	3dd0b461 	.word	0x3dd0b461
 8003f68:	1a600000 	.word	0x1a600000
 8003f6c:	3dd0b461 	.word	0x3dd0b461
 8003f70:	2e037073 	.word	0x2e037073
 8003f74:	3ba3198a 	.word	0x3ba3198a
 8003f78:	6dc9c883 	.word	0x6dc9c883
 8003f7c:	3fe45f30 	.word	0x3fe45f30
 8003f80:	2e000000 	.word	0x2e000000
 8003f84:	3ba3198a 	.word	0x3ba3198a
 8003f88:	252049c1 	.word	0x252049c1
 8003f8c:	397b839a 	.word	0x397b839a
 8003f90:	3fe921fb 	.word	0x3fe921fb
 8003f94:	4002d97b 	.word	0x4002d97b
 8003f98:	3ff921fb 	.word	0x3ff921fb
 8003f9c:	413921fb 	.word	0x413921fb
 8003fa0:	3fe00000 	.word	0x3fe00000
 8003fa4:	08004c68 	.word	0x08004c68
 8003fa8:	7fefffff 	.word	0x7fefffff
 8003fac:	ea4f 5428 	mov.w	r4, r8, asr #20
 8003fb0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8003fb4:	ee10 0a10 	vmov	r0, s0
 8003fb8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8003fbc:	ee10 6a10 	vmov	r6, s0
 8003fc0:	460f      	mov	r7, r1
 8003fc2:	f7fc fd6b 	bl	8000a9c <__aeabi_d2iz>
 8003fc6:	f7fc fa65 	bl	8000494 <__aeabi_i2d>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4630      	mov	r0, r6
 8003fd0:	4639      	mov	r1, r7
 8003fd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fd6:	f7fc f90f 	bl	80001f8 <__aeabi_dsub>
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <__ieee754_rem_pio2+0x410>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f7fc fac3 	bl	8000568 <__aeabi_dmul>
 8003fe2:	460f      	mov	r7, r1
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	f7fc fd59 	bl	8000a9c <__aeabi_d2iz>
 8003fea:	f7fc fa53 	bl	8000494 <__aeabi_i2d>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	4639      	mov	r1, r7
 8003ff6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003ffa:	f7fc f8fd 	bl	80001f8 <__aeabi_dsub>
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <__ieee754_rem_pio2+0x410>)
 8004000:	2200      	movs	r2, #0
 8004002:	f7fc fab1 	bl	8000568 <__aeabi_dmul>
 8004006:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800400a:	ad04      	add	r5, sp, #16
 800400c:	f04f 0803 	mov.w	r8, #3
 8004010:	46a9      	mov	r9, r5
 8004012:	2600      	movs	r6, #0
 8004014:	2700      	movs	r7, #0
 8004016:	4632      	mov	r2, r6
 8004018:	463b      	mov	r3, r7
 800401a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800401e:	46c3      	mov	fp, r8
 8004020:	3d08      	subs	r5, #8
 8004022:	f108 38ff 	add.w	r8, r8, #4294967295
 8004026:	f7fc fd07 	bl	8000a38 <__aeabi_dcmpeq>
 800402a:	2800      	cmp	r0, #0
 800402c:	d1f3      	bne.n	8004016 <__ieee754_rem_pio2+0x3be>
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <__ieee754_rem_pio2+0x414>)
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	2302      	movs	r3, #2
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	4622      	mov	r2, r4
 8004038:	465b      	mov	r3, fp
 800403a:	4651      	mov	r1, sl
 800403c:	4648      	mov	r0, r9
 800403e:	f000 f8df 	bl	8004200 <__kernel_rem_pio2>
 8004042:	9b02      	ldr	r3, [sp, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	4683      	mov	fp, r0
 8004048:	f6bf ae46 	bge.w	8003cd8 <__ieee754_rem_pio2+0x80>
 800404c:	e9da 2100 	ldrd	r2, r1, [sl]
 8004050:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004054:	e9ca 2300 	strd	r2, r3, [sl]
 8004058:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800405c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004060:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004064:	e73a      	b.n	8003edc <__ieee754_rem_pio2+0x284>
 8004066:	bf00      	nop
 8004068:	41700000 	.word	0x41700000
 800406c:	08004ce8 	.word	0x08004ce8

08004070 <__kernel_cos>:
 8004070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004074:	ec57 6b10 	vmov	r6, r7, d0
 8004078:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800407c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004080:	ed8d 1b00 	vstr	d1, [sp]
 8004084:	da07      	bge.n	8004096 <__kernel_cos+0x26>
 8004086:	ee10 0a10 	vmov	r0, s0
 800408a:	4639      	mov	r1, r7
 800408c:	f7fc fd06 	bl	8000a9c <__aeabi_d2iz>
 8004090:	2800      	cmp	r0, #0
 8004092:	f000 8088 	beq.w	80041a6 <__kernel_cos+0x136>
 8004096:	4632      	mov	r2, r6
 8004098:	463b      	mov	r3, r7
 800409a:	4630      	mov	r0, r6
 800409c:	4639      	mov	r1, r7
 800409e:	f7fc fa63 	bl	8000568 <__aeabi_dmul>
 80040a2:	4b51      	ldr	r3, [pc, #324]	; (80041e8 <__kernel_cos+0x178>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	4604      	mov	r4, r0
 80040a8:	460d      	mov	r5, r1
 80040aa:	f7fc fa5d 	bl	8000568 <__aeabi_dmul>
 80040ae:	a340      	add	r3, pc, #256	; (adr r3, 80041b0 <__kernel_cos+0x140>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	4682      	mov	sl, r0
 80040b6:	468b      	mov	fp, r1
 80040b8:	4620      	mov	r0, r4
 80040ba:	4629      	mov	r1, r5
 80040bc:	f7fc fa54 	bl	8000568 <__aeabi_dmul>
 80040c0:	a33d      	add	r3, pc, #244	; (adr r3, 80041b8 <__kernel_cos+0x148>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc f899 	bl	80001fc <__adddf3>
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	f7fc fa4b 	bl	8000568 <__aeabi_dmul>
 80040d2:	a33b      	add	r3, pc, #236	; (adr r3, 80041c0 <__kernel_cos+0x150>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc f88e 	bl	80001f8 <__aeabi_dsub>
 80040dc:	4622      	mov	r2, r4
 80040de:	462b      	mov	r3, r5
 80040e0:	f7fc fa42 	bl	8000568 <__aeabi_dmul>
 80040e4:	a338      	add	r3, pc, #224	; (adr r3, 80041c8 <__kernel_cos+0x158>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc f887 	bl	80001fc <__adddf3>
 80040ee:	4622      	mov	r2, r4
 80040f0:	462b      	mov	r3, r5
 80040f2:	f7fc fa39 	bl	8000568 <__aeabi_dmul>
 80040f6:	a336      	add	r3, pc, #216	; (adr r3, 80041d0 <__kernel_cos+0x160>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc f87c 	bl	80001f8 <__aeabi_dsub>
 8004100:	4622      	mov	r2, r4
 8004102:	462b      	mov	r3, r5
 8004104:	f7fc fa30 	bl	8000568 <__aeabi_dmul>
 8004108:	a333      	add	r3, pc, #204	; (adr r3, 80041d8 <__kernel_cos+0x168>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc f875 	bl	80001fc <__adddf3>
 8004112:	4622      	mov	r2, r4
 8004114:	462b      	mov	r3, r5
 8004116:	f7fc fa27 	bl	8000568 <__aeabi_dmul>
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	f7fc fa23 	bl	8000568 <__aeabi_dmul>
 8004122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004126:	4604      	mov	r4, r0
 8004128:	460d      	mov	r5, r1
 800412a:	4630      	mov	r0, r6
 800412c:	4639      	mov	r1, r7
 800412e:	f7fc fa1b 	bl	8000568 <__aeabi_dmul>
 8004132:	460b      	mov	r3, r1
 8004134:	4602      	mov	r2, r0
 8004136:	4629      	mov	r1, r5
 8004138:	4620      	mov	r0, r4
 800413a:	f7fc f85d 	bl	80001f8 <__aeabi_dsub>
 800413e:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <__kernel_cos+0x17c>)
 8004140:	4598      	cmp	r8, r3
 8004142:	4606      	mov	r6, r0
 8004144:	460f      	mov	r7, r1
 8004146:	dc10      	bgt.n	800416a <__kernel_cos+0xfa>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4650      	mov	r0, sl
 800414e:	4659      	mov	r1, fp
 8004150:	f7fc f852 	bl	80001f8 <__aeabi_dsub>
 8004154:	460b      	mov	r3, r1
 8004156:	4926      	ldr	r1, [pc, #152]	; (80041f0 <__kernel_cos+0x180>)
 8004158:	4602      	mov	r2, r0
 800415a:	2000      	movs	r0, #0
 800415c:	f7fc f84c 	bl	80001f8 <__aeabi_dsub>
 8004160:	ec41 0b10 	vmov	d0, r0, r1
 8004164:	b003      	add	sp, #12
 8004166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416a:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <__kernel_cos+0x184>)
 800416c:	4920      	ldr	r1, [pc, #128]	; (80041f0 <__kernel_cos+0x180>)
 800416e:	4598      	cmp	r8, r3
 8004170:	bfcc      	ite	gt
 8004172:	4d21      	ldrgt	r5, [pc, #132]	; (80041f8 <__kernel_cos+0x188>)
 8004174:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004178:	2400      	movs	r4, #0
 800417a:	4622      	mov	r2, r4
 800417c:	462b      	mov	r3, r5
 800417e:	2000      	movs	r0, #0
 8004180:	f7fc f83a 	bl	80001f8 <__aeabi_dsub>
 8004184:	4622      	mov	r2, r4
 8004186:	4680      	mov	r8, r0
 8004188:	4689      	mov	r9, r1
 800418a:	462b      	mov	r3, r5
 800418c:	4650      	mov	r0, sl
 800418e:	4659      	mov	r1, fp
 8004190:	f7fc f832 	bl	80001f8 <__aeabi_dsub>
 8004194:	4632      	mov	r2, r6
 8004196:	463b      	mov	r3, r7
 8004198:	f7fc f82e 	bl	80001f8 <__aeabi_dsub>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4640      	mov	r0, r8
 80041a2:	4649      	mov	r1, r9
 80041a4:	e7da      	b.n	800415c <__kernel_cos+0xec>
 80041a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80041e0 <__kernel_cos+0x170>
 80041aa:	e7db      	b.n	8004164 <__kernel_cos+0xf4>
 80041ac:	f3af 8000 	nop.w
 80041b0:	be8838d4 	.word	0xbe8838d4
 80041b4:	bda8fae9 	.word	0xbda8fae9
 80041b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80041bc:	3e21ee9e 	.word	0x3e21ee9e
 80041c0:	809c52ad 	.word	0x809c52ad
 80041c4:	3e927e4f 	.word	0x3e927e4f
 80041c8:	19cb1590 	.word	0x19cb1590
 80041cc:	3efa01a0 	.word	0x3efa01a0
 80041d0:	16c15177 	.word	0x16c15177
 80041d4:	3f56c16c 	.word	0x3f56c16c
 80041d8:	5555554c 	.word	0x5555554c
 80041dc:	3fa55555 	.word	0x3fa55555
 80041e0:	00000000 	.word	0x00000000
 80041e4:	3ff00000 	.word	0x3ff00000
 80041e8:	3fe00000 	.word	0x3fe00000
 80041ec:	3fd33332 	.word	0x3fd33332
 80041f0:	3ff00000 	.word	0x3ff00000
 80041f4:	3fe90000 	.word	0x3fe90000
 80041f8:	3fd20000 	.word	0x3fd20000
 80041fc:	00000000 	.word	0x00000000

08004200 <__kernel_rem_pio2>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	ed2d 8b02 	vpush	{d8}
 8004208:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800420c:	f112 0f14 	cmn.w	r2, #20
 8004210:	9308      	str	r3, [sp, #32]
 8004212:	9101      	str	r1, [sp, #4]
 8004214:	4bc4      	ldr	r3, [pc, #784]	; (8004528 <__kernel_rem_pio2+0x328>)
 8004216:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004218:	900b      	str	r0, [sp, #44]	; 0x2c
 800421a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800421e:	9302      	str	r3, [sp, #8]
 8004220:	9b08      	ldr	r3, [sp, #32]
 8004222:	f103 33ff 	add.w	r3, r3, #4294967295
 8004226:	bfa8      	it	ge
 8004228:	1ed4      	subge	r4, r2, #3
 800422a:	9306      	str	r3, [sp, #24]
 800422c:	bfb2      	itee	lt
 800422e:	2400      	movlt	r4, #0
 8004230:	2318      	movge	r3, #24
 8004232:	fb94 f4f3 	sdivge	r4, r4, r3
 8004236:	f06f 0317 	mvn.w	r3, #23
 800423a:	fb04 3303 	mla	r3, r4, r3, r3
 800423e:	eb03 0a02 	add.w	sl, r3, r2
 8004242:	9b02      	ldr	r3, [sp, #8]
 8004244:	9a06      	ldr	r2, [sp, #24]
 8004246:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004518 <__kernel_rem_pio2+0x318>
 800424a:	eb03 0802 	add.w	r8, r3, r2
 800424e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004250:	1aa7      	subs	r7, r4, r2
 8004252:	ae22      	add	r6, sp, #136	; 0x88
 8004254:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004258:	2500      	movs	r5, #0
 800425a:	4545      	cmp	r5, r8
 800425c:	dd13      	ble.n	8004286 <__kernel_rem_pio2+0x86>
 800425e:	9b08      	ldr	r3, [sp, #32]
 8004260:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004518 <__kernel_rem_pio2+0x318>
 8004264:	aa22      	add	r2, sp, #136	; 0x88
 8004266:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800426a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800426e:	f04f 0800 	mov.w	r8, #0
 8004272:	9b02      	ldr	r3, [sp, #8]
 8004274:	4598      	cmp	r8, r3
 8004276:	dc2f      	bgt.n	80042d8 <__kernel_rem_pio2+0xd8>
 8004278:	ed8d 8b04 	vstr	d8, [sp, #16]
 800427c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004280:	462f      	mov	r7, r5
 8004282:	2600      	movs	r6, #0
 8004284:	e01b      	b.n	80042be <__kernel_rem_pio2+0xbe>
 8004286:	42ef      	cmn	r7, r5
 8004288:	d407      	bmi.n	800429a <__kernel_rem_pio2+0x9a>
 800428a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800428e:	f7fc f901 	bl	8000494 <__aeabi_i2d>
 8004292:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004296:	3501      	adds	r5, #1
 8004298:	e7df      	b.n	800425a <__kernel_rem_pio2+0x5a>
 800429a:	ec51 0b18 	vmov	r0, r1, d8
 800429e:	e7f8      	b.n	8004292 <__kernel_rem_pio2+0x92>
 80042a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80042a8:	f7fc f95e 	bl	8000568 <__aeabi_dmul>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042b4:	f7fb ffa2 	bl	80001fc <__adddf3>
 80042b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042bc:	3601      	adds	r6, #1
 80042be:	9b06      	ldr	r3, [sp, #24]
 80042c0:	429e      	cmp	r6, r3
 80042c2:	f1a7 0708 	sub.w	r7, r7, #8
 80042c6:	ddeb      	ble.n	80042a0 <__kernel_rem_pio2+0xa0>
 80042c8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80042cc:	f108 0801 	add.w	r8, r8, #1
 80042d0:	ecab 7b02 	vstmia	fp!, {d7}
 80042d4:	3508      	adds	r5, #8
 80042d6:	e7cc      	b.n	8004272 <__kernel_rem_pio2+0x72>
 80042d8:	9b02      	ldr	r3, [sp, #8]
 80042da:	aa0e      	add	r2, sp, #56	; 0x38
 80042dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80042e0:	930d      	str	r3, [sp, #52]	; 0x34
 80042e2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80042e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80042e8:	9c02      	ldr	r4, [sp, #8]
 80042ea:	930c      	str	r3, [sp, #48]	; 0x30
 80042ec:	00e3      	lsls	r3, r4, #3
 80042ee:	930a      	str	r3, [sp, #40]	; 0x28
 80042f0:	ab9a      	add	r3, sp, #616	; 0x268
 80042f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042f6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80042fa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80042fe:	ab72      	add	r3, sp, #456	; 0x1c8
 8004300:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004304:	46c3      	mov	fp, r8
 8004306:	46a1      	mov	r9, r4
 8004308:	f1b9 0f00 	cmp.w	r9, #0
 800430c:	f1a5 0508 	sub.w	r5, r5, #8
 8004310:	dc77      	bgt.n	8004402 <__kernel_rem_pio2+0x202>
 8004312:	ec47 6b10 	vmov	d0, r6, r7
 8004316:	4650      	mov	r0, sl
 8004318:	f000 fc0a 	bl	8004b30 <scalbn>
 800431c:	ec57 6b10 	vmov	r6, r7, d0
 8004320:	2200      	movs	r2, #0
 8004322:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004326:	ee10 0a10 	vmov	r0, s0
 800432a:	4639      	mov	r1, r7
 800432c:	f7fc f91c 	bl	8000568 <__aeabi_dmul>
 8004330:	ec41 0b10 	vmov	d0, r0, r1
 8004334:	f000 fb7c 	bl	8004a30 <floor>
 8004338:	4b7c      	ldr	r3, [pc, #496]	; (800452c <__kernel_rem_pio2+0x32c>)
 800433a:	ec51 0b10 	vmov	r0, r1, d0
 800433e:	2200      	movs	r2, #0
 8004340:	f7fc f912 	bl	8000568 <__aeabi_dmul>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4630      	mov	r0, r6
 800434a:	4639      	mov	r1, r7
 800434c:	f7fb ff54 	bl	80001f8 <__aeabi_dsub>
 8004350:	460f      	mov	r7, r1
 8004352:	4606      	mov	r6, r0
 8004354:	f7fc fba2 	bl	8000a9c <__aeabi_d2iz>
 8004358:	9004      	str	r0, [sp, #16]
 800435a:	f7fc f89b 	bl	8000494 <__aeabi_i2d>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4630      	mov	r0, r6
 8004364:	4639      	mov	r1, r7
 8004366:	f7fb ff47 	bl	80001f8 <__aeabi_dsub>
 800436a:	f1ba 0f00 	cmp.w	sl, #0
 800436e:	4606      	mov	r6, r0
 8004370:	460f      	mov	r7, r1
 8004372:	dd6d      	ble.n	8004450 <__kernel_rem_pio2+0x250>
 8004374:	1e62      	subs	r2, r4, #1
 8004376:	ab0e      	add	r3, sp, #56	; 0x38
 8004378:	9d04      	ldr	r5, [sp, #16]
 800437a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800437e:	f1ca 0118 	rsb	r1, sl, #24
 8004382:	fa40 f301 	asr.w	r3, r0, r1
 8004386:	441d      	add	r5, r3
 8004388:	408b      	lsls	r3, r1
 800438a:	1ac0      	subs	r0, r0, r3
 800438c:	ab0e      	add	r3, sp, #56	; 0x38
 800438e:	9504      	str	r5, [sp, #16]
 8004390:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004394:	f1ca 0317 	rsb	r3, sl, #23
 8004398:	fa40 fb03 	asr.w	fp, r0, r3
 800439c:	f1bb 0f00 	cmp.w	fp, #0
 80043a0:	dd65      	ble.n	800446e <__kernel_rem_pio2+0x26e>
 80043a2:	9b04      	ldr	r3, [sp, #16]
 80043a4:	2200      	movs	r2, #0
 80043a6:	3301      	adds	r3, #1
 80043a8:	9304      	str	r3, [sp, #16]
 80043aa:	4615      	mov	r5, r2
 80043ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80043b0:	4294      	cmp	r4, r2
 80043b2:	f300 809c 	bgt.w	80044ee <__kernel_rem_pio2+0x2ee>
 80043b6:	f1ba 0f00 	cmp.w	sl, #0
 80043ba:	dd07      	ble.n	80043cc <__kernel_rem_pio2+0x1cc>
 80043bc:	f1ba 0f01 	cmp.w	sl, #1
 80043c0:	f000 80c0 	beq.w	8004544 <__kernel_rem_pio2+0x344>
 80043c4:	f1ba 0f02 	cmp.w	sl, #2
 80043c8:	f000 80c6 	beq.w	8004558 <__kernel_rem_pio2+0x358>
 80043cc:	f1bb 0f02 	cmp.w	fp, #2
 80043d0:	d14d      	bne.n	800446e <__kernel_rem_pio2+0x26e>
 80043d2:	4632      	mov	r2, r6
 80043d4:	463b      	mov	r3, r7
 80043d6:	4956      	ldr	r1, [pc, #344]	; (8004530 <__kernel_rem_pio2+0x330>)
 80043d8:	2000      	movs	r0, #0
 80043da:	f7fb ff0d 	bl	80001f8 <__aeabi_dsub>
 80043de:	4606      	mov	r6, r0
 80043e0:	460f      	mov	r7, r1
 80043e2:	2d00      	cmp	r5, #0
 80043e4:	d043      	beq.n	800446e <__kernel_rem_pio2+0x26e>
 80043e6:	4650      	mov	r0, sl
 80043e8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004520 <__kernel_rem_pio2+0x320>
 80043ec:	f000 fba0 	bl	8004b30 <scalbn>
 80043f0:	4630      	mov	r0, r6
 80043f2:	4639      	mov	r1, r7
 80043f4:	ec53 2b10 	vmov	r2, r3, d0
 80043f8:	f7fb fefe 	bl	80001f8 <__aeabi_dsub>
 80043fc:	4606      	mov	r6, r0
 80043fe:	460f      	mov	r7, r1
 8004400:	e035      	b.n	800446e <__kernel_rem_pio2+0x26e>
 8004402:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <__kernel_rem_pio2+0x334>)
 8004404:	2200      	movs	r2, #0
 8004406:	4630      	mov	r0, r6
 8004408:	4639      	mov	r1, r7
 800440a:	f7fc f8ad 	bl	8000568 <__aeabi_dmul>
 800440e:	f7fc fb45 	bl	8000a9c <__aeabi_d2iz>
 8004412:	f7fc f83f 	bl	8000494 <__aeabi_i2d>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	ec43 2b18 	vmov	d8, r2, r3
 800441e:	4b46      	ldr	r3, [pc, #280]	; (8004538 <__kernel_rem_pio2+0x338>)
 8004420:	2200      	movs	r2, #0
 8004422:	f7fc f8a1 	bl	8000568 <__aeabi_dmul>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4630      	mov	r0, r6
 800442c:	4639      	mov	r1, r7
 800442e:	f7fb fee3 	bl	80001f8 <__aeabi_dsub>
 8004432:	f7fc fb33 	bl	8000a9c <__aeabi_d2iz>
 8004436:	e9d5 2300 	ldrd	r2, r3, [r5]
 800443a:	f84b 0b04 	str.w	r0, [fp], #4
 800443e:	ec51 0b18 	vmov	r0, r1, d8
 8004442:	f7fb fedb 	bl	80001fc <__adddf3>
 8004446:	f109 39ff 	add.w	r9, r9, #4294967295
 800444a:	4606      	mov	r6, r0
 800444c:	460f      	mov	r7, r1
 800444e:	e75b      	b.n	8004308 <__kernel_rem_pio2+0x108>
 8004450:	d106      	bne.n	8004460 <__kernel_rem_pio2+0x260>
 8004452:	1e63      	subs	r3, r4, #1
 8004454:	aa0e      	add	r2, sp, #56	; 0x38
 8004456:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800445a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800445e:	e79d      	b.n	800439c <__kernel_rem_pio2+0x19c>
 8004460:	4b36      	ldr	r3, [pc, #216]	; (800453c <__kernel_rem_pio2+0x33c>)
 8004462:	2200      	movs	r2, #0
 8004464:	f7fc fb06 	bl	8000a74 <__aeabi_dcmpge>
 8004468:	2800      	cmp	r0, #0
 800446a:	d13d      	bne.n	80044e8 <__kernel_rem_pio2+0x2e8>
 800446c:	4683      	mov	fp, r0
 800446e:	2200      	movs	r2, #0
 8004470:	2300      	movs	r3, #0
 8004472:	4630      	mov	r0, r6
 8004474:	4639      	mov	r1, r7
 8004476:	f7fc fadf 	bl	8000a38 <__aeabi_dcmpeq>
 800447a:	2800      	cmp	r0, #0
 800447c:	f000 80c0 	beq.w	8004600 <__kernel_rem_pio2+0x400>
 8004480:	1e65      	subs	r5, r4, #1
 8004482:	462b      	mov	r3, r5
 8004484:	2200      	movs	r2, #0
 8004486:	9902      	ldr	r1, [sp, #8]
 8004488:	428b      	cmp	r3, r1
 800448a:	da6c      	bge.n	8004566 <__kernel_rem_pio2+0x366>
 800448c:	2a00      	cmp	r2, #0
 800448e:	f000 8089 	beq.w	80045a4 <__kernel_rem_pio2+0x3a4>
 8004492:	ab0e      	add	r3, sp, #56	; 0x38
 8004494:	f1aa 0a18 	sub.w	sl, sl, #24
 8004498:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80ad 	beq.w	80045fc <__kernel_rem_pio2+0x3fc>
 80044a2:	4650      	mov	r0, sl
 80044a4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004520 <__kernel_rem_pio2+0x320>
 80044a8:	f000 fb42 	bl	8004b30 <scalbn>
 80044ac:	ab9a      	add	r3, sp, #616	; 0x268
 80044ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80044b2:	ec57 6b10 	vmov	r6, r7, d0
 80044b6:	00ec      	lsls	r4, r5, #3
 80044b8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80044bc:	46aa      	mov	sl, r5
 80044be:	f1ba 0f00 	cmp.w	sl, #0
 80044c2:	f280 80d6 	bge.w	8004672 <__kernel_rem_pio2+0x472>
 80044c6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004518 <__kernel_rem_pio2+0x318>
 80044ca:	462e      	mov	r6, r5
 80044cc:	2e00      	cmp	r6, #0
 80044ce:	f2c0 8104 	blt.w	80046da <__kernel_rem_pio2+0x4da>
 80044d2:	ab72      	add	r3, sp, #456	; 0x1c8
 80044d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80044d8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004540 <__kernel_rem_pio2+0x340>
 80044dc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80044e0:	f04f 0800 	mov.w	r8, #0
 80044e4:	1baf      	subs	r7, r5, r6
 80044e6:	e0ea      	b.n	80046be <__kernel_rem_pio2+0x4be>
 80044e8:	f04f 0b02 	mov.w	fp, #2
 80044ec:	e759      	b.n	80043a2 <__kernel_rem_pio2+0x1a2>
 80044ee:	f8d8 3000 	ldr.w	r3, [r8]
 80044f2:	b955      	cbnz	r5, 800450a <__kernel_rem_pio2+0x30a>
 80044f4:	b123      	cbz	r3, 8004500 <__kernel_rem_pio2+0x300>
 80044f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80044fa:	f8c8 3000 	str.w	r3, [r8]
 80044fe:	2301      	movs	r3, #1
 8004500:	3201      	adds	r2, #1
 8004502:	f108 0804 	add.w	r8, r8, #4
 8004506:	461d      	mov	r5, r3
 8004508:	e752      	b.n	80043b0 <__kernel_rem_pio2+0x1b0>
 800450a:	1acb      	subs	r3, r1, r3
 800450c:	f8c8 3000 	str.w	r3, [r8]
 8004510:	462b      	mov	r3, r5
 8004512:	e7f5      	b.n	8004500 <__kernel_rem_pio2+0x300>
 8004514:	f3af 8000 	nop.w
	...
 8004524:	3ff00000 	.word	0x3ff00000
 8004528:	08004e30 	.word	0x08004e30
 800452c:	40200000 	.word	0x40200000
 8004530:	3ff00000 	.word	0x3ff00000
 8004534:	3e700000 	.word	0x3e700000
 8004538:	41700000 	.word	0x41700000
 800453c:	3fe00000 	.word	0x3fe00000
 8004540:	08004df0 	.word	0x08004df0
 8004544:	1e62      	subs	r2, r4, #1
 8004546:	ab0e      	add	r3, sp, #56	; 0x38
 8004548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800454c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004550:	a90e      	add	r1, sp, #56	; 0x38
 8004552:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004556:	e739      	b.n	80043cc <__kernel_rem_pio2+0x1cc>
 8004558:	1e62      	subs	r2, r4, #1
 800455a:	ab0e      	add	r3, sp, #56	; 0x38
 800455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004560:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004564:	e7f4      	b.n	8004550 <__kernel_rem_pio2+0x350>
 8004566:	a90e      	add	r1, sp, #56	; 0x38
 8004568:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800456c:	3b01      	subs	r3, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	e789      	b.n	8004486 <__kernel_rem_pio2+0x286>
 8004572:	3301      	adds	r3, #1
 8004574:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004578:	2900      	cmp	r1, #0
 800457a:	d0fa      	beq.n	8004572 <__kernel_rem_pio2+0x372>
 800457c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800457e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004582:	446a      	add	r2, sp
 8004584:	3a98      	subs	r2, #152	; 0x98
 8004586:	920a      	str	r2, [sp, #40]	; 0x28
 8004588:	9a08      	ldr	r2, [sp, #32]
 800458a:	18e3      	adds	r3, r4, r3
 800458c:	18a5      	adds	r5, r4, r2
 800458e:	aa22      	add	r2, sp, #136	; 0x88
 8004590:	f104 0801 	add.w	r8, r4, #1
 8004594:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	9b04      	ldr	r3, [sp, #16]
 800459c:	4543      	cmp	r3, r8
 800459e:	da04      	bge.n	80045aa <__kernel_rem_pio2+0x3aa>
 80045a0:	461c      	mov	r4, r3
 80045a2:	e6a3      	b.n	80042ec <__kernel_rem_pio2+0xec>
 80045a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80045a6:	2301      	movs	r3, #1
 80045a8:	e7e4      	b.n	8004574 <__kernel_rem_pio2+0x374>
 80045aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80045b0:	f7fb ff70 	bl	8000494 <__aeabi_i2d>
 80045b4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80045b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045ba:	46ab      	mov	fp, r5
 80045bc:	461c      	mov	r4, r3
 80045be:	f04f 0900 	mov.w	r9, #0
 80045c2:	2600      	movs	r6, #0
 80045c4:	2700      	movs	r7, #0
 80045c6:	9b06      	ldr	r3, [sp, #24]
 80045c8:	4599      	cmp	r9, r3
 80045ca:	dd06      	ble.n	80045da <__kernel_rem_pio2+0x3da>
 80045cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ce:	e8e3 6702 	strd	r6, r7, [r3], #8
 80045d2:	f108 0801 	add.w	r8, r8, #1
 80045d6:	930a      	str	r3, [sp, #40]	; 0x28
 80045d8:	e7df      	b.n	800459a <__kernel_rem_pio2+0x39a>
 80045da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80045de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80045e2:	f7fb ffc1 	bl	8000568 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4630      	mov	r0, r6
 80045ec:	4639      	mov	r1, r7
 80045ee:	f7fb fe05 	bl	80001fc <__adddf3>
 80045f2:	f109 0901 	add.w	r9, r9, #1
 80045f6:	4606      	mov	r6, r0
 80045f8:	460f      	mov	r7, r1
 80045fa:	e7e4      	b.n	80045c6 <__kernel_rem_pio2+0x3c6>
 80045fc:	3d01      	subs	r5, #1
 80045fe:	e748      	b.n	8004492 <__kernel_rem_pio2+0x292>
 8004600:	ec47 6b10 	vmov	d0, r6, r7
 8004604:	f1ca 0000 	rsb	r0, sl, #0
 8004608:	f000 fa92 	bl	8004b30 <scalbn>
 800460c:	ec57 6b10 	vmov	r6, r7, d0
 8004610:	4ba0      	ldr	r3, [pc, #640]	; (8004894 <__kernel_rem_pio2+0x694>)
 8004612:	ee10 0a10 	vmov	r0, s0
 8004616:	2200      	movs	r2, #0
 8004618:	4639      	mov	r1, r7
 800461a:	f7fc fa2b 	bl	8000a74 <__aeabi_dcmpge>
 800461e:	b1f8      	cbz	r0, 8004660 <__kernel_rem_pio2+0x460>
 8004620:	4b9d      	ldr	r3, [pc, #628]	; (8004898 <__kernel_rem_pio2+0x698>)
 8004622:	2200      	movs	r2, #0
 8004624:	4630      	mov	r0, r6
 8004626:	4639      	mov	r1, r7
 8004628:	f7fb ff9e 	bl	8000568 <__aeabi_dmul>
 800462c:	f7fc fa36 	bl	8000a9c <__aeabi_d2iz>
 8004630:	4680      	mov	r8, r0
 8004632:	f7fb ff2f 	bl	8000494 <__aeabi_i2d>
 8004636:	4b97      	ldr	r3, [pc, #604]	; (8004894 <__kernel_rem_pio2+0x694>)
 8004638:	2200      	movs	r2, #0
 800463a:	f7fb ff95 	bl	8000568 <__aeabi_dmul>
 800463e:	460b      	mov	r3, r1
 8004640:	4602      	mov	r2, r0
 8004642:	4639      	mov	r1, r7
 8004644:	4630      	mov	r0, r6
 8004646:	f7fb fdd7 	bl	80001f8 <__aeabi_dsub>
 800464a:	f7fc fa27 	bl	8000a9c <__aeabi_d2iz>
 800464e:	1c65      	adds	r5, r4, #1
 8004650:	ab0e      	add	r3, sp, #56	; 0x38
 8004652:	f10a 0a18 	add.w	sl, sl, #24
 8004656:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800465a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800465e:	e720      	b.n	80044a2 <__kernel_rem_pio2+0x2a2>
 8004660:	4630      	mov	r0, r6
 8004662:	4639      	mov	r1, r7
 8004664:	f7fc fa1a 	bl	8000a9c <__aeabi_d2iz>
 8004668:	ab0e      	add	r3, sp, #56	; 0x38
 800466a:	4625      	mov	r5, r4
 800466c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004670:	e717      	b.n	80044a2 <__kernel_rem_pio2+0x2a2>
 8004672:	ab0e      	add	r3, sp, #56	; 0x38
 8004674:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004678:	f7fb ff0c 	bl	8000494 <__aeabi_i2d>
 800467c:	4632      	mov	r2, r6
 800467e:	463b      	mov	r3, r7
 8004680:	f7fb ff72 	bl	8000568 <__aeabi_dmul>
 8004684:	4b84      	ldr	r3, [pc, #528]	; (8004898 <__kernel_rem_pio2+0x698>)
 8004686:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800468a:	2200      	movs	r2, #0
 800468c:	4630      	mov	r0, r6
 800468e:	4639      	mov	r1, r7
 8004690:	f7fb ff6a 	bl	8000568 <__aeabi_dmul>
 8004694:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004698:	4606      	mov	r6, r0
 800469a:	460f      	mov	r7, r1
 800469c:	e70f      	b.n	80044be <__kernel_rem_pio2+0x2be>
 800469e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80046a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80046a6:	f7fb ff5f 	bl	8000568 <__aeabi_dmul>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046b2:	f7fb fda3 	bl	80001fc <__adddf3>
 80046b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046ba:	f108 0801 	add.w	r8, r8, #1
 80046be:	9b02      	ldr	r3, [sp, #8]
 80046c0:	4598      	cmp	r8, r3
 80046c2:	dc01      	bgt.n	80046c8 <__kernel_rem_pio2+0x4c8>
 80046c4:	45b8      	cmp	r8, r7
 80046c6:	ddea      	ble.n	800469e <__kernel_rem_pio2+0x49e>
 80046c8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80046cc:	ab4a      	add	r3, sp, #296	; 0x128
 80046ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80046d2:	ed87 7b00 	vstr	d7, [r7]
 80046d6:	3e01      	subs	r6, #1
 80046d8:	e6f8      	b.n	80044cc <__kernel_rem_pio2+0x2cc>
 80046da:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80046dc:	2b02      	cmp	r3, #2
 80046de:	dc0b      	bgt.n	80046f8 <__kernel_rem_pio2+0x4f8>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	dc35      	bgt.n	8004750 <__kernel_rem_pio2+0x550>
 80046e4:	d059      	beq.n	800479a <__kernel_rem_pio2+0x59a>
 80046e6:	9b04      	ldr	r3, [sp, #16]
 80046e8:	f003 0007 	and.w	r0, r3, #7
 80046ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80046f0:	ecbd 8b02 	vpop	{d8}
 80046f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d1f3      	bne.n	80046e6 <__kernel_rem_pio2+0x4e6>
 80046fe:	ab4a      	add	r3, sp, #296	; 0x128
 8004700:	4423      	add	r3, r4
 8004702:	9306      	str	r3, [sp, #24]
 8004704:	461c      	mov	r4, r3
 8004706:	469a      	mov	sl, r3
 8004708:	9502      	str	r5, [sp, #8]
 800470a:	9b02      	ldr	r3, [sp, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f1aa 0a08 	sub.w	sl, sl, #8
 8004712:	dc6b      	bgt.n	80047ec <__kernel_rem_pio2+0x5ec>
 8004714:	46aa      	mov	sl, r5
 8004716:	f1ba 0f01 	cmp.w	sl, #1
 800471a:	f1a4 0408 	sub.w	r4, r4, #8
 800471e:	f300 8085 	bgt.w	800482c <__kernel_rem_pio2+0x62c>
 8004722:	9c06      	ldr	r4, [sp, #24]
 8004724:	2000      	movs	r0, #0
 8004726:	3408      	adds	r4, #8
 8004728:	2100      	movs	r1, #0
 800472a:	2d01      	cmp	r5, #1
 800472c:	f300 809d 	bgt.w	800486a <__kernel_rem_pio2+0x66a>
 8004730:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004734:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004738:	f1bb 0f00 	cmp.w	fp, #0
 800473c:	f040 809b 	bne.w	8004876 <__kernel_rem_pio2+0x676>
 8004740:	9b01      	ldr	r3, [sp, #4]
 8004742:	e9c3 5600 	strd	r5, r6, [r3]
 8004746:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800474a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800474e:	e7ca      	b.n	80046e6 <__kernel_rem_pio2+0x4e6>
 8004750:	3408      	adds	r4, #8
 8004752:	ab4a      	add	r3, sp, #296	; 0x128
 8004754:	441c      	add	r4, r3
 8004756:	462e      	mov	r6, r5
 8004758:	2000      	movs	r0, #0
 800475a:	2100      	movs	r1, #0
 800475c:	2e00      	cmp	r6, #0
 800475e:	da36      	bge.n	80047ce <__kernel_rem_pio2+0x5ce>
 8004760:	f1bb 0f00 	cmp.w	fp, #0
 8004764:	d039      	beq.n	80047da <__kernel_rem_pio2+0x5da>
 8004766:	4602      	mov	r2, r0
 8004768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800476c:	9c01      	ldr	r4, [sp, #4]
 800476e:	e9c4 2300 	strd	r2, r3, [r4]
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800477a:	f7fb fd3d 	bl	80001f8 <__aeabi_dsub>
 800477e:	ae4c      	add	r6, sp, #304	; 0x130
 8004780:	2401      	movs	r4, #1
 8004782:	42a5      	cmp	r5, r4
 8004784:	da2c      	bge.n	80047e0 <__kernel_rem_pio2+0x5e0>
 8004786:	f1bb 0f00 	cmp.w	fp, #0
 800478a:	d002      	beq.n	8004792 <__kernel_rem_pio2+0x592>
 800478c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004790:	4619      	mov	r1, r3
 8004792:	9b01      	ldr	r3, [sp, #4]
 8004794:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004798:	e7a5      	b.n	80046e6 <__kernel_rem_pio2+0x4e6>
 800479a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800479e:	eb0d 0403 	add.w	r4, sp, r3
 80047a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80047a6:	2000      	movs	r0, #0
 80047a8:	2100      	movs	r1, #0
 80047aa:	2d00      	cmp	r5, #0
 80047ac:	da09      	bge.n	80047c2 <__kernel_rem_pio2+0x5c2>
 80047ae:	f1bb 0f00 	cmp.w	fp, #0
 80047b2:	d002      	beq.n	80047ba <__kernel_rem_pio2+0x5ba>
 80047b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047b8:	4619      	mov	r1, r3
 80047ba:	9b01      	ldr	r3, [sp, #4]
 80047bc:	e9c3 0100 	strd	r0, r1, [r3]
 80047c0:	e791      	b.n	80046e6 <__kernel_rem_pio2+0x4e6>
 80047c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80047c6:	f7fb fd19 	bl	80001fc <__adddf3>
 80047ca:	3d01      	subs	r5, #1
 80047cc:	e7ed      	b.n	80047aa <__kernel_rem_pio2+0x5aa>
 80047ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80047d2:	f7fb fd13 	bl	80001fc <__adddf3>
 80047d6:	3e01      	subs	r6, #1
 80047d8:	e7c0      	b.n	800475c <__kernel_rem_pio2+0x55c>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	e7c5      	b.n	800476c <__kernel_rem_pio2+0x56c>
 80047e0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80047e4:	f7fb fd0a 	bl	80001fc <__adddf3>
 80047e8:	3401      	adds	r4, #1
 80047ea:	e7ca      	b.n	8004782 <__kernel_rem_pio2+0x582>
 80047ec:	e9da 8900 	ldrd	r8, r9, [sl]
 80047f0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80047f4:	9b02      	ldr	r3, [sp, #8]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	9302      	str	r3, [sp, #8]
 80047fa:	4632      	mov	r2, r6
 80047fc:	463b      	mov	r3, r7
 80047fe:	4640      	mov	r0, r8
 8004800:	4649      	mov	r1, r9
 8004802:	f7fb fcfb 	bl	80001fc <__adddf3>
 8004806:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4640      	mov	r0, r8
 8004810:	4649      	mov	r1, r9
 8004812:	f7fb fcf1 	bl	80001f8 <__aeabi_dsub>
 8004816:	4632      	mov	r2, r6
 8004818:	463b      	mov	r3, r7
 800481a:	f7fb fcef 	bl	80001fc <__adddf3>
 800481e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004822:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004826:	ed8a 7b00 	vstr	d7, [sl]
 800482a:	e76e      	b.n	800470a <__kernel_rem_pio2+0x50a>
 800482c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004830:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004834:	4640      	mov	r0, r8
 8004836:	4632      	mov	r2, r6
 8004838:	463b      	mov	r3, r7
 800483a:	4649      	mov	r1, r9
 800483c:	f7fb fcde 	bl	80001fc <__adddf3>
 8004840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4640      	mov	r0, r8
 800484a:	4649      	mov	r1, r9
 800484c:	f7fb fcd4 	bl	80001f8 <__aeabi_dsub>
 8004850:	4632      	mov	r2, r6
 8004852:	463b      	mov	r3, r7
 8004854:	f7fb fcd2 	bl	80001fc <__adddf3>
 8004858:	ed9d 7b02 	vldr	d7, [sp, #8]
 800485c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004860:	ed84 7b00 	vstr	d7, [r4]
 8004864:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004868:	e755      	b.n	8004716 <__kernel_rem_pio2+0x516>
 800486a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800486e:	f7fb fcc5 	bl	80001fc <__adddf3>
 8004872:	3d01      	subs	r5, #1
 8004874:	e759      	b.n	800472a <__kernel_rem_pio2+0x52a>
 8004876:	9b01      	ldr	r3, [sp, #4]
 8004878:	9a01      	ldr	r2, [sp, #4]
 800487a:	601d      	str	r5, [r3, #0]
 800487c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004880:	605c      	str	r4, [r3, #4]
 8004882:	609f      	str	r7, [r3, #8]
 8004884:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004888:	60d3      	str	r3, [r2, #12]
 800488a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800488e:	6110      	str	r0, [r2, #16]
 8004890:	6153      	str	r3, [r2, #20]
 8004892:	e728      	b.n	80046e6 <__kernel_rem_pio2+0x4e6>
 8004894:	41700000 	.word	0x41700000
 8004898:	3e700000 	.word	0x3e700000
 800489c:	00000000 	.word	0x00000000

080048a0 <__kernel_sin>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	ed2d 8b04 	vpush	{d8-d9}
 80048a8:	eeb0 8a41 	vmov.f32	s16, s2
 80048ac:	eef0 8a61 	vmov.f32	s17, s3
 80048b0:	ec55 4b10 	vmov	r4, r5, d0
 80048b4:	b083      	sub	sp, #12
 80048b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80048ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80048be:	9001      	str	r0, [sp, #4]
 80048c0:	da06      	bge.n	80048d0 <__kernel_sin+0x30>
 80048c2:	ee10 0a10 	vmov	r0, s0
 80048c6:	4629      	mov	r1, r5
 80048c8:	f7fc f8e8 	bl	8000a9c <__aeabi_d2iz>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d051      	beq.n	8004974 <__kernel_sin+0xd4>
 80048d0:	4622      	mov	r2, r4
 80048d2:	462b      	mov	r3, r5
 80048d4:	4620      	mov	r0, r4
 80048d6:	4629      	mov	r1, r5
 80048d8:	f7fb fe46 	bl	8000568 <__aeabi_dmul>
 80048dc:	4682      	mov	sl, r0
 80048de:	468b      	mov	fp, r1
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4620      	mov	r0, r4
 80048e6:	4629      	mov	r1, r5
 80048e8:	f7fb fe3e 	bl	8000568 <__aeabi_dmul>
 80048ec:	a341      	add	r3, pc, #260	; (adr r3, 80049f4 <__kernel_sin+0x154>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	4680      	mov	r8, r0
 80048f4:	4689      	mov	r9, r1
 80048f6:	4650      	mov	r0, sl
 80048f8:	4659      	mov	r1, fp
 80048fa:	f7fb fe35 	bl	8000568 <__aeabi_dmul>
 80048fe:	a33f      	add	r3, pc, #252	; (adr r3, 80049fc <__kernel_sin+0x15c>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fc78 	bl	80001f8 <__aeabi_dsub>
 8004908:	4652      	mov	r2, sl
 800490a:	465b      	mov	r3, fp
 800490c:	f7fb fe2c 	bl	8000568 <__aeabi_dmul>
 8004910:	a33c      	add	r3, pc, #240	; (adr r3, 8004a04 <__kernel_sin+0x164>)
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f7fb fc71 	bl	80001fc <__adddf3>
 800491a:	4652      	mov	r2, sl
 800491c:	465b      	mov	r3, fp
 800491e:	f7fb fe23 	bl	8000568 <__aeabi_dmul>
 8004922:	a33a      	add	r3, pc, #232	; (adr r3, 8004a0c <__kernel_sin+0x16c>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb fc66 	bl	80001f8 <__aeabi_dsub>
 800492c:	4652      	mov	r2, sl
 800492e:	465b      	mov	r3, fp
 8004930:	f7fb fe1a 	bl	8000568 <__aeabi_dmul>
 8004934:	a337      	add	r3, pc, #220	; (adr r3, 8004a14 <__kernel_sin+0x174>)
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f7fb fc5f 	bl	80001fc <__adddf3>
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	4606      	mov	r6, r0
 8004942:	460f      	mov	r7, r1
 8004944:	b9eb      	cbnz	r3, 8004982 <__kernel_sin+0xe2>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4650      	mov	r0, sl
 800494c:	4659      	mov	r1, fp
 800494e:	f7fb fe0b 	bl	8000568 <__aeabi_dmul>
 8004952:	a325      	add	r3, pc, #148	; (adr r3, 80049e8 <__kernel_sin+0x148>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fc4e 	bl	80001f8 <__aeabi_dsub>
 800495c:	4642      	mov	r2, r8
 800495e:	464b      	mov	r3, r9
 8004960:	f7fb fe02 	bl	8000568 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4620      	mov	r0, r4
 800496a:	4629      	mov	r1, r5
 800496c:	f7fb fc46 	bl	80001fc <__adddf3>
 8004970:	4604      	mov	r4, r0
 8004972:	460d      	mov	r5, r1
 8004974:	ec45 4b10 	vmov	d0, r4, r5
 8004978:	b003      	add	sp, #12
 800497a:	ecbd 8b04 	vpop	{d8-d9}
 800497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <__kernel_sin+0x150>)
 8004984:	ec51 0b18 	vmov	r0, r1, d8
 8004988:	2200      	movs	r2, #0
 800498a:	f7fb fded 	bl	8000568 <__aeabi_dmul>
 800498e:	4632      	mov	r2, r6
 8004990:	ec41 0b19 	vmov	d9, r0, r1
 8004994:	463b      	mov	r3, r7
 8004996:	4640      	mov	r0, r8
 8004998:	4649      	mov	r1, r9
 800499a:	f7fb fde5 	bl	8000568 <__aeabi_dmul>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	ec51 0b19 	vmov	r0, r1, d9
 80049a6:	f7fb fc27 	bl	80001f8 <__aeabi_dsub>
 80049aa:	4652      	mov	r2, sl
 80049ac:	465b      	mov	r3, fp
 80049ae:	f7fb fddb 	bl	8000568 <__aeabi_dmul>
 80049b2:	ec53 2b18 	vmov	r2, r3, d8
 80049b6:	f7fb fc1f 	bl	80001f8 <__aeabi_dsub>
 80049ba:	a30b      	add	r3, pc, #44	; (adr r3, 80049e8 <__kernel_sin+0x148>)
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	4606      	mov	r6, r0
 80049c2:	460f      	mov	r7, r1
 80049c4:	4640      	mov	r0, r8
 80049c6:	4649      	mov	r1, r9
 80049c8:	f7fb fdce 	bl	8000568 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4630      	mov	r0, r6
 80049d2:	4639      	mov	r1, r7
 80049d4:	f7fb fc12 	bl	80001fc <__adddf3>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4620      	mov	r0, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	f7fb fc0a 	bl	80001f8 <__aeabi_dsub>
 80049e4:	e7c4      	b.n	8004970 <__kernel_sin+0xd0>
 80049e6:	bf00      	nop
 80049e8:	55555549 	.word	0x55555549
 80049ec:	3fc55555 	.word	0x3fc55555
 80049f0:	3fe00000 	.word	0x3fe00000
 80049f4:	5acfd57c 	.word	0x5acfd57c
 80049f8:	3de5d93a 	.word	0x3de5d93a
 80049fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8004a00:	3e5ae5e6 	.word	0x3e5ae5e6
 8004a04:	57b1fe7d 	.word	0x57b1fe7d
 8004a08:	3ec71de3 	.word	0x3ec71de3
 8004a0c:	19c161d5 	.word	0x19c161d5
 8004a10:	3f2a01a0 	.word	0x3f2a01a0
 8004a14:	1110f8a6 	.word	0x1110f8a6
 8004a18:	3f811111 	.word	0x3f811111

08004a1c <fabs>:
 8004a1c:	ec51 0b10 	vmov	r0, r1, d0
 8004a20:	ee10 2a10 	vmov	r2, s0
 8004a24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a28:	ec43 2b10 	vmov	d0, r2, r3
 8004a2c:	4770      	bx	lr
	...

08004a30 <floor>:
 8004a30:	ec51 0b10 	vmov	r0, r1, d0
 8004a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004a3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004a40:	2e13      	cmp	r6, #19
 8004a42:	ee10 5a10 	vmov	r5, s0
 8004a46:	ee10 8a10 	vmov	r8, s0
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	dc32      	bgt.n	8004ab4 <floor+0x84>
 8004a4e:	2e00      	cmp	r6, #0
 8004a50:	da14      	bge.n	8004a7c <floor+0x4c>
 8004a52:	a333      	add	r3, pc, #204	; (adr r3, 8004b20 <floor+0xf0>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fbd0 	bl	80001fc <__adddf3>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f7fc f812 	bl	8000a88 <__aeabi_dcmpgt>
 8004a64:	b138      	cbz	r0, 8004a76 <floor+0x46>
 8004a66:	2c00      	cmp	r4, #0
 8004a68:	da57      	bge.n	8004b1a <floor+0xea>
 8004a6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004a6e:	431d      	orrs	r5, r3
 8004a70:	d001      	beq.n	8004a76 <floor+0x46>
 8004a72:	4c2d      	ldr	r4, [pc, #180]	; (8004b28 <floor+0xf8>)
 8004a74:	2500      	movs	r5, #0
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	e025      	b.n	8004ac8 <floor+0x98>
 8004a7c:	4f2b      	ldr	r7, [pc, #172]	; (8004b2c <floor+0xfc>)
 8004a7e:	4137      	asrs	r7, r6
 8004a80:	ea01 0307 	and.w	r3, r1, r7
 8004a84:	4303      	orrs	r3, r0
 8004a86:	d01f      	beq.n	8004ac8 <floor+0x98>
 8004a88:	a325      	add	r3, pc, #148	; (adr r3, 8004b20 <floor+0xf0>)
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	f7fb fbb5 	bl	80001fc <__adddf3>
 8004a92:	2200      	movs	r2, #0
 8004a94:	2300      	movs	r3, #0
 8004a96:	f7fb fff7 	bl	8000a88 <__aeabi_dcmpgt>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d0eb      	beq.n	8004a76 <floor+0x46>
 8004a9e:	2c00      	cmp	r4, #0
 8004aa0:	bfbe      	ittt	lt
 8004aa2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004aa6:	fa43 f606 	asrlt.w	r6, r3, r6
 8004aaa:	19a4      	addlt	r4, r4, r6
 8004aac:	ea24 0407 	bic.w	r4, r4, r7
 8004ab0:	2500      	movs	r5, #0
 8004ab2:	e7e0      	b.n	8004a76 <floor+0x46>
 8004ab4:	2e33      	cmp	r6, #51	; 0x33
 8004ab6:	dd0b      	ble.n	8004ad0 <floor+0xa0>
 8004ab8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004abc:	d104      	bne.n	8004ac8 <floor+0x98>
 8004abe:	ee10 2a10 	vmov	r2, s0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	f7fb fb9a 	bl	80001fc <__adddf3>
 8004ac8:	ec41 0b10 	vmov	d0, r0, r1
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad8:	fa23 f707 	lsr.w	r7, r3, r7
 8004adc:	4207      	tst	r7, r0
 8004ade:	d0f3      	beq.n	8004ac8 <floor+0x98>
 8004ae0:	a30f      	add	r3, pc, #60	; (adr r3, 8004b20 <floor+0xf0>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fb89 	bl	80001fc <__adddf3>
 8004aea:	2200      	movs	r2, #0
 8004aec:	2300      	movs	r3, #0
 8004aee:	f7fb ffcb 	bl	8000a88 <__aeabi_dcmpgt>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d0bf      	beq.n	8004a76 <floor+0x46>
 8004af6:	2c00      	cmp	r4, #0
 8004af8:	da02      	bge.n	8004b00 <floor+0xd0>
 8004afa:	2e14      	cmp	r6, #20
 8004afc:	d103      	bne.n	8004b06 <floor+0xd6>
 8004afe:	3401      	adds	r4, #1
 8004b00:	ea25 0507 	bic.w	r5, r5, r7
 8004b04:	e7b7      	b.n	8004a76 <floor+0x46>
 8004b06:	2301      	movs	r3, #1
 8004b08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004b0c:	fa03 f606 	lsl.w	r6, r3, r6
 8004b10:	4435      	add	r5, r6
 8004b12:	4545      	cmp	r5, r8
 8004b14:	bf38      	it	cc
 8004b16:	18e4      	addcc	r4, r4, r3
 8004b18:	e7f2      	b.n	8004b00 <floor+0xd0>
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	462c      	mov	r4, r5
 8004b1e:	e7aa      	b.n	8004a76 <floor+0x46>
 8004b20:	8800759c 	.word	0x8800759c
 8004b24:	7e37e43c 	.word	0x7e37e43c
 8004b28:	bff00000 	.word	0xbff00000
 8004b2c:	000fffff 	.word	0x000fffff

08004b30 <scalbn>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	ec55 4b10 	vmov	r4, r5, d0
 8004b36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	b99a      	cbnz	r2, 8004b68 <scalbn+0x38>
 8004b40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b44:	4323      	orrs	r3, r4
 8004b46:	d036      	beq.n	8004bb6 <scalbn+0x86>
 8004b48:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <scalbn+0x100>)
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	ee10 0a10 	vmov	r0, s0
 8004b50:	2200      	movs	r2, #0
 8004b52:	f7fb fd09 	bl	8000568 <__aeabi_dmul>
 8004b56:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <scalbn+0x104>)
 8004b58:	429e      	cmp	r6, r3
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	460d      	mov	r5, r1
 8004b5e:	da10      	bge.n	8004b82 <scalbn+0x52>
 8004b60:	a32b      	add	r3, pc, #172	; (adr r3, 8004c10 <scalbn+0xe0>)
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	e03a      	b.n	8004bde <scalbn+0xae>
 8004b68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004b6c:	428a      	cmp	r2, r1
 8004b6e:	d10c      	bne.n	8004b8a <scalbn+0x5a>
 8004b70:	ee10 2a10 	vmov	r2, s0
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f7fb fb40 	bl	80001fc <__adddf3>
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	460d      	mov	r5, r1
 8004b80:	e019      	b.n	8004bb6 <scalbn+0x86>
 8004b82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004b86:	460b      	mov	r3, r1
 8004b88:	3a36      	subs	r2, #54	; 0x36
 8004b8a:	4432      	add	r2, r6
 8004b8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004b90:	428a      	cmp	r2, r1
 8004b92:	dd08      	ble.n	8004ba6 <scalbn+0x76>
 8004b94:	2d00      	cmp	r5, #0
 8004b96:	a120      	add	r1, pc, #128	; (adr r1, 8004c18 <scalbn+0xe8>)
 8004b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b9c:	da1c      	bge.n	8004bd8 <scalbn+0xa8>
 8004b9e:	a120      	add	r1, pc, #128	; (adr r1, 8004c20 <scalbn+0xf0>)
 8004ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ba4:	e018      	b.n	8004bd8 <scalbn+0xa8>
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	dd08      	ble.n	8004bbc <scalbn+0x8c>
 8004baa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004bae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004bb6:	ec45 4b10 	vmov	d0, r4, r5
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
 8004bbc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004bc0:	da19      	bge.n	8004bf6 <scalbn+0xc6>
 8004bc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004bc6:	429e      	cmp	r6, r3
 8004bc8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004bcc:	dd0a      	ble.n	8004be4 <scalbn+0xb4>
 8004bce:	a112      	add	r1, pc, #72	; (adr r1, 8004c18 <scalbn+0xe8>)
 8004bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e2      	bne.n	8004b9e <scalbn+0x6e>
 8004bd8:	a30f      	add	r3, pc, #60	; (adr r3, 8004c18 <scalbn+0xe8>)
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f7fb fcc3 	bl	8000568 <__aeabi_dmul>
 8004be2:	e7cb      	b.n	8004b7c <scalbn+0x4c>
 8004be4:	a10a      	add	r1, pc, #40	; (adr r1, 8004c10 <scalbn+0xe0>)
 8004be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0b8      	beq.n	8004b60 <scalbn+0x30>
 8004bee:	a10e      	add	r1, pc, #56	; (adr r1, 8004c28 <scalbn+0xf8>)
 8004bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bf4:	e7b4      	b.n	8004b60 <scalbn+0x30>
 8004bf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004bfa:	3236      	adds	r2, #54	; 0x36
 8004bfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004c04:	4620      	mov	r0, r4
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <scalbn+0x108>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	e7e8      	b.n	8004bde <scalbn+0xae>
 8004c0c:	f3af 8000 	nop.w
 8004c10:	c2f8f359 	.word	0xc2f8f359
 8004c14:	01a56e1f 	.word	0x01a56e1f
 8004c18:	8800759c 	.word	0x8800759c
 8004c1c:	7e37e43c 	.word	0x7e37e43c
 8004c20:	8800759c 	.word	0x8800759c
 8004c24:	fe37e43c 	.word	0xfe37e43c
 8004c28:	c2f8f359 	.word	0xc2f8f359
 8004c2c:	81a56e1f 	.word	0x81a56e1f
 8004c30:	43500000 	.word	0x43500000
 8004c34:	ffff3cb0 	.word	0xffff3cb0
 8004c38:	3c900000 	.word	0x3c900000

08004c3c <_init>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr

08004c48 <_fini>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr
